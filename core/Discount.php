<?php
	/* Generated by Wixnit Class Builder 
	// Jan, 19/2020
	// Building class for Discount
	*/

	class Discount
	{
		public $Id = "";
		public $Created = 0;
		public $Name = "";
		public $Booking = array();
		public $Food = array();
		public $Drinks = array();
		public $Pastries = array();
		public $Laundry = array();
		public $Pool = array();
		public $Services = array();
		public $Value = 0;
		public $Bypercentage = false;
		public $Status = false;
		public $Autoapply = false;
		public $Fromamount = 0;
		public $Toamount = 0;
		public $Fromcount = 0;
		public $Tocount = 0;
		public $Fromhour = 0;
		public $Tohour = 0;
		public $Fromminuite = 0;
		public $Tominuite = 0;
		public $Fromday = 0;
		public $Today = 0;
		public $Frommonth = "";
		public $Tomonth = "";
		public $Frommeridean = "";
		public $Tomeridean = "";
		public $Isstaff = false;
		public $Periodic = false;
		public $Timebased = false;
		public $Bookingcount = false;
		public $Formerorder = false;
		public $Onlineorder = false;
		public $Offlineorder = false;
		public $Quantity = false;
		public $Bookedroom = false;
		public $Bookeddays = false;
		public $Amountbased = false;
		public $Ontotal = false;

		private $subscriber = null;

		function __construct(Subscriber $subscriber)
		{
		    $this->subscriber = $subscriber;
		}

		public function Initialize($arg=null)
        {
            if($arg != null)
            {
                $db = $this->subscriber->GetDB();

                $res = $db->query("SELECT * FROM discount WHERE discountid='$arg'");

                if ($res->num_rows > 0) {
                    $row = $res->fetch_assoc();

                    $this->Id = $row['discountid'];
                    $this->Created = new WixDate($row['created']);
                    $this->Name = $row['name'];
                    $this->Booking = json_decode($row['booking']);
                    $this->Food = json_decode($row['food']);
                    $this->Drinks = json_decode($row['drinks']);
                    $this->Pastries = json_decode($row['pastries']);
                    $this->Laundry = json_decode($row['laundry']);
                    $this->Pool = json_decode($row['pool']);
                    $this->Services = json_decode($row['services']);
                    $this->Value = $row['value'];
                    $this->Bypercentage = Convert::ToBool($row['bypercentage']);
                    $this->Status = Convert::ToBool($row['status']);
                    $this->Autoapply = Convert::ToBool($row['autoapply']);
                    $this->Fromamount = $row['fromamount'];
                    $this->Toamount = $row['toamount'];
                    $this->Fromcount = $row['fromcount'];
                    $this->Tocount = $row['tocount'];
                    $this->Fromhour = $row['fromhour'];
                    $this->Tohour = $row['tohour'];
                    $this->Fromminuite = $row['fromminuite'];
                    $this->Tominuite = $row['tominuite'];
                    $this->Fromday = $row['fromday'];
                    $this->Today = $row['today'];
                    $this->Frommonth = $row['frommonth'];
                    $this->Tomonth = $row['tomonth'];
                    $this->Frommeridean = $row['frommeridean'];
                    $this->Tomeridean = $row['tomeridean'];
                    $this->Isstaff = Convert::ToBool($row['isstaff']);
                    $this->Periodic = Convert::ToBool($row['peiodic']);
                    $this->Timebased = Convert::ToBool($row['timebased']);
                    $this->Bookingcount = Convert::ToBool($row['bookingcount']);
                    $this->Formerorder = Convert::ToBool($row['formerorder']);
                    $this->Onlineorder = Convert::ToBool($row['onlineorder']);
                    $this->Offlineorder = Convert::ToBool($row['offlineorder']);
                    $this->Quantity = Convert::ToBool($row['quantity']);
                    $this->Bookedroom = Convert::ToBool($row['bookedroom']);
                    $this->Bookeddays = Convert::ToBool($row['bookeddays']);
                    $this->Amountbased = Convert::ToBool($row['amountbased']);
                    $this->Ontotal = Convert::ToBool($row['ontotal']);
                }
            }
        }

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$name = addslashes($this->Name);
			$booking = addslashes(json_encode($this->Booking));
			$food = addslashes(json_encode($this->Food));
			$drinks = addslashes(json_encode($this->Drinks));
			$pastries = addslashes(json_encode($this->Pastries));
			$laundry = addslashes(json_encode($this->Laundry));
			$pool = addslashes(json_encode($this->Pool));
			$services = addslashes(json_encode($this->Services));
			$value = floatval($this->Value);
			$bypercentage = Convert::ToInt($this->Bypercentage);
			$status = Convert::ToInt($this->Status);
			$autoapply = Convert::ToInt($this->Autoapply);
			$fromamount = floatval($this->Fromamount);
			$toamount = floatval($this->Toamount);
			$fromcount = Convert::ToInt($this->Fromcount);
			$tocount = Convert::ToInt($this->Tocount);
			$fromhour = Convert::ToInt($this->Fromhour);
			$tohour = Convert::ToInt($this->Tohour);
			$fromminuite = Convert::ToInt($this->Fromminuite);
			$tominuite = Convert::ToInt($this->Tominuite);
			$fromday = Convert::ToInt($this->Fromday);
			$today = Convert::ToInt($this->Today);
			$frommonth = addslashes($this->Frommonth);
			$tomonth = addslashes($this->Tomonth);
			$frommeridean = addslashes($this->Frommeridean);
			$tomeridean = addslashes($this->Tomeridean);
			$isstaff = Convert::ToInt($this->Isstaff);
			$peiodic = Convert::ToInt($this->Periodic);
			$timebased = Convert::ToInt($this->Timebased);
			$bookingcount = Convert::ToInt($this->Bookingcount);
			$formerorder = Convert::ToInt($this->Formerorder);
			$onlineorder = Convert::ToInt($this->Onlineorder);
			$offlineorder = Convert::ToInt($this->Offlineorder);
			$quantity = Convert::ToInt($this->Quantity);
			$bookedroom = Convert::ToInt($this->Bookedroom);
			$bookeddays = Convert::ToInt($this->Bookeddays);
			$amountbased = Convert::ToInt($this->Amountbased);
			$ontotal = Convert::ToInt($this->Ontotal);

			if($res = $db->query("SELECT discountid FROM discount WHERE discountid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE discount SET name='$name',booking='$booking',food='$food',drinks='$drinks',pastries='$pastries',laundry='$laundry',pool='$pool',services='$services',value='$value',bypercentage='$bypercentage',status='$status',autoapply='$autoapply',fromamount='$fromamount',toamount='$toamount',fromcount='$fromcount',tocount='$tocount',fromhour='$fromhour',tohour='$tohour',fromminuite='$fromminuite',tominuite='$tominuite',fromday='$fromday',today='$today',frommonth='$frommonth',tomonth='$tomonth',frommeridean='$frommeridean',tomeridean='$tomeridean',isstaff='$isstaff',peiodic='$peiodic',timebased='$timebased',bookingcount='$bookingcount',formerorder='$formerorder',onlineorder='$onlineorder',offlineorder='$offlineorder',quantity='$quantity',bookedroom='$bookedroom',bookeddays='$bookeddays',amountbased='$amountbased',ontotal='$ontotal' WHERE discountid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT discountid FROM discount WHERE discountid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO discount(discountid,created,name,booking,food,drinks,pastries,laundry,pool,services,value,bypercentage,status,autoapply,fromamount,toamount,fromcount,tocount,fromhour,tohour,fromminuite,tominuite,fromday,today,frommonth,tomonth,frommeridean,tomeridean,isstaff,peiodic,timebased,bookingcount,formerorder,onlineorder,offlineorder,quantity,bookedroom,bookeddays,amountbased,ontotal) VALUES ('$id','$created','$name','$booking','$food','$drinks','$pastries','$laundry','$pool','$services','$value','$bypercentage','$status','$autoapply','$fromamount','$toamount','$fromcount','$tocount','$fromhour','$tohour','$fromminuite','$tominuite','$fromday','$today','$frommonth','$tomonth','$frommeridean','$tomeridean','$isstaff','$peiodic','$timebased','$bookingcount','$formerorder','$onlineorder','$offlineorder','$quantity','$bookedroom','$bookeddays','$amountbased','$ontotal')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM discount WHERE discountid='$id'");
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM discount WHERE name LIKE '%$term%' OR booking LIKE '%$term%' OR food LIKE '%$term%' OR drinks LIKE '%$term%' OR pastries LIKE '%$term%' OR laundry LIKE '%$term%' OR pool LIKE '%$term%' OR services LIKE '%$term%' OR value LIKE '%$term%' OR bypercentage LIKE '%$term%' OR status LIKE '%$term%' OR autoapply LIKE '%$term%' OR fromamount LIKE '%$term%' OR toamount LIKE '%$term%' OR fromcount LIKE '%$term%' OR tocount LIKE '%$term%' OR fromhour LIKE '%$term%' OR tohour LIKE '%$term%' OR fromminuite LIKE '%$term%' OR tominuite LIKE '%$term%' OR fromday LIKE '%$term%' OR today LIKE '%$term%' OR frommonth LIKE '%$term%' OR tomonth LIKE '%$term%' OR frommeridean LIKE '%$term%' OR tomeridean LIKE '%$term%' OR isstaff LIKE '%$term%' OR peiodic LIKE '%$term%' OR timebased LIKE '%$term%' OR bookingcount LIKE '%$term%' OR formerorder LIKE '%$term%' OR onlineorder LIKE '%$term%' OR offlineorder LIKE '%$term%' OR quantity LIKE '%$term%' OR bookedroom LIKE '%$term%' OR bookeddays LIKE '%$term%' OR amountbased LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Discount($subscriber);
                $ret[$i]->Id = $row['discountid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Name = $row['name'];
                $ret[$i]->Booking = json_decode($row['booking']);
                $ret[$i]->Food = json_decode($row['food']);
                $ret[$i]->Drinks = json_decode($row['drinks']);
                $ret[$i]->Pastries = json_decode($row['pastries']);
                $ret[$i]->Laundry = json_decode($row['laundry']);
                $ret[$i]->Pool = json_decode($row['pool']);
                $ret[$i]->Services = json_decode($row['services']);
                $ret[$i]->Value = $row['value'];
                $ret[$i]->Bypercentage = Convert::ToBool($row['bypercentage']);
                $ret[$i]->Status = Convert::ToBool($row['status']);
                $ret[$i]->Autoapply = Convert::ToBool($row['autoapply']);
                $ret[$i]->Fromamount = $row['fromamount'];
                $ret[$i]->Toamount = $row['toamount'];
                $ret[$i]->Fromcount = $row['fromcount'];
                $ret[$i]->Tocount = $row['tocount'];
                $ret[$i]->Fromhour = $row['fromhour'];
                $ret[$i]->Tohour = $row['tohour'];
                $ret[$i]->Fromminuite = $row['fromminuite'];
                $ret[$i]->Tominuite = $row['tominuite'];
                $ret[$i]->Fromday = $row['fromday'];
                $ret[$i]->Today = $row['today'];
                $ret[$i]->Frommonth = $row['frommonth'];
                $ret[$i]->Tomonth = $row['tomonth'];
                $ret[$i]->Frommeridean = $row['frommeridean'];
                $ret[$i]->Tomeridean = $row['tomeridean'];
                $ret[$i]->Isstaff = Convert::ToBool($row['isstaff']);
                $ret[$i]->Periodic = Convert::ToBool($row['peiodic']);
                $ret[$i]->Timebased = Convert::ToBool($row['timebased']);
                $ret[$i]->Bookingcount = Convert::ToBool($row['bookingcount']);
                $ret[$i]->Formerorder = Convert::ToBool($row['formerorder']);
                $ret[$i]->Onlineorder = Convert::ToBool($row['onlineorder']);
                $ret[$i]->Offlineorder = Convert::ToBool($row['offlineorder']);
                $ret[$i]->Quantity = Convert::ToBool($row['quantity']);
                $ret[$i]->Bookedroom = Convert::ToBool($row['bookedroom']);
                $ret[$i]->Bookeddays = Convert::ToBool($row['bookeddays']);
                $ret[$i]->Amountbased = Convert::ToBool($row['amountbased']);
                $ret[$i]->Ontotal = Convert::ToBool($row['ontotal']);
				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='discountid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM discount WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Discount($subscriber);
                $ret[$i]->Id = $row['discountid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Name = $row['name'];
                $ret[$i]->Booking = json_decode($row['booking']);
                $ret[$i]->Food = json_decode($row['food']);
                $ret[$i]->Drinks = json_decode($row['drinks']);
                $ret[$i]->Pastries = json_decode($row['pastries']);
                $ret[$i]->Laundry = json_decode($row['laundry']);
                $ret[$i]->Pool = json_decode($row['pool']);
                $ret[$i]->Services = json_decode($row['services']);
                $ret[$i]->Value = $row['value'];
                $ret[$i]->Bypercentage = Convert::ToBool($row['bypercentage']);
                $ret[$i]->Status = Convert::ToBool($row['status']);
                $ret[$i]->Autoapply = Convert::ToBool($row['autoapply']);
                $ret[$i]->Fromamount = $row['fromamount'];
                $ret[$i]->Toamount = $row['toamount'];
                $ret[$i]->Fromcount = $row['fromcount'];
                $ret[$i]->Tocount = $row['tocount'];
                $ret[$i]->Fromhour = $row['fromhour'];
                $ret[$i]->Tohour = $row['tohour'];
                $ret[$i]->Fromminuite = $row['fromminuite'];
                $ret[$i]->Tominuite = $row['tominuite'];
                $ret[$i]->Fromday = $row['fromday'];
                $ret[$i]->Today = $row['today'];
                $ret[$i]->Frommonth = $row['frommonth'];
                $ret[$i]->Tomonth = $row['tomonth'];
                $ret[$i]->Frommeridean = $row['frommeridean'];
                $ret[$i]->Tomeridean = $row['tomeridean'];
                $ret[$i]->Isstaff = Convert::ToBool($row['isstaff']);
                $ret[$i]->Periodic = Convert::ToBool($row['peiodic']);
                $ret[$i]->Timebased = Convert::ToBool($row['timebased']);
                $ret[$i]->Bookingcount = Convert::ToBool($row['bookingcount']);
                $ret[$i]->Formerorder = Convert::ToBool($row['formerorder']);
                $ret[$i]->Onlineorder = Convert::ToBool($row['onlineorder']);
                $ret[$i]->Offlineorder = Convert::ToBool($row['offlineorder']);
                $ret[$i]->Quantity = Convert::ToBool($row['quantity']);
                $ret[$i]->Bookedroom = Convert::ToBool($row['bookedroom']);
                $ret[$i]->Bookeddays = Convert::ToBool($row['bookeddays']);
                $ret[$i]->Amountbased = Convert::ToBool($row['amountbased']);
                $ret[$i]->Ontotal = Convert::ToBool($row['ontotal']);
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM discount ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Discount($subscriber);
                $ret[$i]->Id = $row['discountid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Name = $row['name'];
                $ret[$i]->Booking = json_decode($row['booking']);
                $ret[$i]->Food = json_decode($row['food']);
                $ret[$i]->Drinks = json_decode($row['drinks']);
                $ret[$i]->Pastries = json_decode($row['pastries']);
                $ret[$i]->Laundry = json_decode($row['laundry']);
                $ret[$i]->Pool = json_decode($row['pool']);
                $ret[$i]->Services = json_decode($row['services']);
                $ret[$i]->Value = $row['value'];
                $ret[$i]->Bypercentage = Convert::ToBool($row['bypercentage']);
                $ret[$i]->Status = Convert::ToBool($row['status']);
                $ret[$i]->Autoapply = Convert::ToBool($row['autoapply']);
                $ret[$i]->Fromamount = $row['fromamount'];
                $ret[$i]->Toamount = $row['toamount'];
                $ret[$i]->Fromcount = $row['fromcount'];
                $ret[$i]->Tocount = $row['tocount'];
                $ret[$i]->Fromhour = $row['fromhour'];
                $ret[$i]->Tohour = $row['tohour'];
                $ret[$i]->Fromminuite = $row['fromminuite'];
                $ret[$i]->Tominuite = $row['tominuite'];
                $ret[$i]->Fromday = $row['fromday'];
                $ret[$i]->Today = $row['today'];
                $ret[$i]->Frommonth = $row['frommonth'];
                $ret[$i]->Tomonth = $row['tomonth'];
                $ret[$i]->Frommeridean = $row['frommeridean'];
                $ret[$i]->Tomeridean = $row['tomeridean'];
                $ret[$i]->Isstaff = Convert::ToBool($row['isstaff']);
                $ret[$i]->Periodic = Convert::ToBool($row['peiodic']);
                $ret[$i]->Timebased = Convert::ToBool($row['timebased']);
                $ret[$i]->Bookingcount = Convert::ToBool($row['bookingcount']);
                $ret[$i]->Formerorder = Convert::ToBool($row['formerorder']);
                $ret[$i]->Onlineorder = Convert::ToBool($row['onlineorder']);
                $ret[$i]->Offlineorder = Convert::ToBool($row['offlineorder']);
                $ret[$i]->Quantity = Convert::ToBool($row['quantity']);
                $ret[$i]->Bookedroom = Convert::ToBool($row['bookedroom']);
                $ret[$i]->Bookeddays = Convert::ToBool($row['bookeddays']);
                $ret[$i]->Amountbased = Convert::ToBool($row['amountbased']);
                $ret[$i]->Ontotal = Convert::ToBool($row['ontotal']);
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM discount");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Discount($subscriber);
				$ret[$i]->Id = $row['discountid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Name = $row['name'];
				$ret[$i]->Booking = json_decode($row['booking']);
				$ret[$i]->Food = json_decode($row['food']);
				$ret[$i]->Drinks = json_decode($row['drinks']);
				$ret[$i]->Pastries = json_decode($row['pastries']);
				$ret[$i]->Laundry = json_decode($row['laundry']);
				$ret[$i]->Pool = json_decode($row['pool']);
				$ret[$i]->Services = json_decode($row['services']);
				$ret[$i]->Value = $row['value'];
				$ret[$i]->Bypercentage = Convert::ToBool($row['bypercentage']);
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Autoapply = Convert::ToBool($row['autoapply']);
				$ret[$i]->Fromamount = $row['fromamount'];
				$ret[$i]->Toamount = $row['toamount'];
				$ret[$i]->Fromcount = $row['fromcount'];
				$ret[$i]->Tocount = $row['tocount'];
				$ret[$i]->Fromhour = $row['fromhour'];
				$ret[$i]->Tohour = $row['tohour'];
				$ret[$i]->Fromminuite = $row['fromminuite'];
				$ret[$i]->Tominuite = $row['tominuite'];
				$ret[$i]->Fromday = $row['fromday'];
				$ret[$i]->Today = $row['today'];
				$ret[$i]->Frommonth = $row['frommonth'];
				$ret[$i]->Tomonth = $row['tomonth'];
				$ret[$i]->Frommeridean = $row['frommeridean'];
				$ret[$i]->Tomeridean = $row['tomeridean'];
				$ret[$i]->Isstaff = Convert::ToBool($row['isstaff']);
				$ret[$i]->Periodic = Convert::ToBool($row['peiodic']);
				$ret[$i]->Timebased = Convert::ToBool($row['timebased']);
				$ret[$i]->Bookingcount = Convert::ToBool($row['bookingcount']);
				$ret[$i]->Formerorder = Convert::ToBool($row['formerorder']);
				$ret[$i]->Onlineorder = Convert::ToBool($row['onlineorder']);
				$ret[$i]->Offlineorder = Convert::ToBool($row['offlineorder']);
				$ret[$i]->Quantity = Convert::ToBool($row['quantity']);
				$ret[$i]->Bookedroom = Convert::ToBool($row['bookedroom']);
				$ret[$i]->Bookeddays = Convert::ToBool($row['bookeddays']);
				$ret[$i]->Amountbased = Convert::ToBool($row['amountbased']);
                $ret[$i]->Ontotal = Convert::ToBool($row['ontotal']);
				$i++;
			}
			return $ret;
		}


		public function Matchitem($item)
        {
            $ret = false;

            if($this->Coversbooking())
            {
                if($item->Type === "room_order")
                {
                    if(in_array($item->Roomcategory->Id, $this->Booking))
                    {
                        $ret = true;
                    }
                }
            }
            if($this->Coversfood())
            {
                if($item->Type === "food_order")
                {
                    if(in_array($item->Food->Id, $this->Food))
                    {
                        $ret = true;
                    }
                }
            }
            if($this->Coversbar())
            {
                if($item->Type === "drink_order")
                {
                    if(in_array($item->Drink->Id, $this->Drinks))
                    {
                        $ret = true;
                    }
                }
            }
            if($this->Coverspastries())
            {
                if($item->Type === "pastry_order")
                {
                    if(in_array($item->Pastry->Id, $this->Pastries))
                    {
                        $ret = true;
                    }
                }
            }
            if($this->Coverslaundry())
            {
                if($item->Type === "laundry_order")
                {
                    if(in_array($item->Laundry->Id, $this->Laundry))
                    {
                        $ret = true;
                    }
                }
            }
            if($this->Coverspool())
            {
                if($item->Type === "pool_order")
                {
                    if(in_array($item->Pool->Id, $this->Pool))
                    {
                        $ret = true;
                    }
                }
            }
            if($this->Coversservices())
            {
                if($item->Type === "services_order")
                {
                    if(in_array($item->Services->Id, $this->Services))
                    {
                        $ret = true;
                    }
                }
            }
            return $ret;
        }


		public function Coversbooking()
        {
            return count($this->Booking) > 0 ? true : false;
        }

        public function Coversfood()
        {
            return count($this->Food) > 0 ? true : false;
        }

        public function Coverspastries()
        {
            return count($this->Pastries) > 0 ? true : false;
        }

        public function Coversbar()
        {
            return count($this->Drinks) > 0 ? true : false;
        }

        public function Coverslaundry()
        {
            return count($this->Laundry) > 0 ? true : false;
        }

        public function Coverspool()
        {
            return count($this->Pool) > 0 ? true : false;
        }
        public function Coversservices()
        {
            return count($this->Services) > 0 ? true : false;
        }

		//Hand crafted methods
        public static function process(Subscriber $subscriber, Orderlist $orderlist)
        {
            $orderlist->Discount = 0;
            $orderlist->Discountlist = array();
            $discounts = Discount::Filter($subscriber,  1, 'autoapply');
            $items = $orderlist->Getitems();

            $modules = new Modules($subscriber);

            //echo json_encode($items);

            for($i = 0; $i < count($discounts); $i++)
            {
                if(($discounts[$i]->Status) && ($modules->Discount))
                {
                    for($j = 0; $j < count($items); $j++)
                    {
                        if($discounts[$i]->Matchitem($items[$j]))
                        {
                            if($discounts[$i]->Isstaff)
                            {
                                if($orderlist->Owner->Type === "staff")
                                {
                                    if($discounts[$i]->Bypercentage)
                                    {
                                        if($discounts[$i]->Ontotal)
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                        }
                                        else
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                        }
                                    }
                                    else
                                    {
                                        $orderlist->Discount += $discounts[$i]->Value;
                                    }
                                }
                            }
                            if($discounts[$i]->Periodic)
                            {
                                if((Convert::MonthToNumber($discounts[$i]->Frommonth) > Convert::ToInt(date('m'))) &&
                                    (Convert::MonthToNumber($discounts[$i]->Tomonth) < Convert::ToInt(date('m'))))
                                {
                                    if($discounts[$i]->Bypercentage)
                                    {
                                        if($discounts[$i]->Ontotal)
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                        }
                                        else
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                        }
                                    }
                                    else
                                    {
                                        $orderlist->Discount += $discounts[$i]->Value;
                                    }
                                }
                                if(Convert::MonthToNumber($discounts[$i]->Frommonth) == Convert::ToInt(date('m')))
                                {
                                    if($discounts[$i]->Fromday <= Convert::ToInt(date("d")))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                                else if(Convert::MonthToNumber($discounts[$i]->Tomonth) == Convert::ToInt(date('m')))
                                {
                                    if($discounts[$i]->Today >= Convert::ToInt(date("d")))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                            }
                            if($discounts[$i]->Timebased)
                            {
                                $nowsec = time() - ((strtotime(date("m/d/Y"))));
                                $fromsec = 0;
                                $tosec = 0;

                                $starthour = $discounts[$i]->Fromhour == 12 ? 0 : $discounts[$i]->Fromhour;
                                $stophour = $discounts[$i]->Tohour == 12 ? 0 : $discounts[$i]->Tohour;

                                $fromsec = $discounts[$i]->Frommeridean == "am" ? ((($starthour * 60) + $discounts[$i]->Fromminuite) * 60) : (((($discounts[$i]->Fromhour + 12) * 60) + $discounts[$i]->Fromminuite) * 60);
                                $tosec = $discounts[$i]->Tomeridean == "am" ? ((($stophour * 60) + $discounts[$i]->Tominuite) * 60) : (((($discounts[$i]->Tohour + 12) * 60) + $discounts[$i]->Tominuite) * 60);


                                if($fromsec > $tosec)
                                {
                                    if (($nowsec >= $fromsec) || ($nowsec <= $tosec))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                                else
                                {
                                    if (($nowsec >= $fromsec) && ($nowsec <= $tosec))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                            }
                            if($discounts[$i]->Bookingcount)
                            {
                                $count = Lodging::LodgeCount($subscriber, $orderlist->Owner);

                                if($count >= $discounts[$i]->Fromcount)
                                {
                                    if(($count <= $discounts[$i]->Tocount) || ($discounts[$i]->Tocount === 0))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                            }
                            if($discounts[$i]->Formerorder)
                            {
                                if($discounts[$i]->Bypercentage)
                                {
                                    if($discounts[$i]->Ontotal)
                                    {
                                        $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                    }
                                    else
                                    {
                                        $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                    }
                                }
                                else
                                {
                                    $orderlist->Discount += $discounts[$i]->Value;
                                }
                            }
                            if($discounts[$i]->Onlineorder)
                            {
                                if($orderlist->Online())
                                {
                                    if($discounts[$i]->Bypercentage)
                                    {
                                        if($discounts[$i]->Ontotal)
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                        }
                                        else
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                        }
                                    }
                                    else
                                    {
                                        $orderlist->Discount += $discounts[$i]->Value;
                                    }
                                }
                            }
                            if($discounts[$i]->Offlineorder)
                            {
                                if($orderlist->Offline())
                                {
                                    if($discounts[$i]->Bypercentage)
                                    {
                                        if($discounts[$i]->Ontotal)
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                        }
                                        else
                                        {
                                            $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                        }
                                    }
                                    else
                                    {
                                        $orderlist->Discount += $discounts[$i]->Value;
                                    }
                                }
                            }
                            if($discounts[$i]->Quantity)
                            {
                                if(isset($items[$j]->Quantiy))
                                {
                                    if($items[$j]->Quantity >= $discounts[$i]->Fromcount)
                                    {
                                        if(($items[$j]->Quantity <= Convert::ToInt($discounts[$i]->Tocount)) || (Convert::ToInt($discounts[$i]->Tocount) === 0))
                                        {
                                            if($discounts[$i]->Bypercentage)
                                            {
                                                if($discounts[$i]->Ontotal)
                                                {
                                                    $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                                }
                                                else
                                                {
                                                    $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                                }
                                            }
                                            else
                                            {
                                                $orderlist->Discount += $discounts[$i]->Value;
                                            }
                                        }
                                    }
                                }
                            }
                            if($discounts[$i]->Bookedroom)
                            {
                                $roomscount = 0;

                                for($o = 0; $o < count($items); $o++)
                                {
                                    if($items[$o]->Type == "room_order")
                                    {
                                        $roomscount++;
                                    }
                                }

                                if($roomscount >= $discounts[$i]->Fromcount)
                                {
                                    if(($roomscount <= Convert::ToInt($discounts[$i]->Tocount)) || (Convert::ToInt($discounts[$i]->Tocount) === 0))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                            }
                            if($discounts[$i]->Bookeddays)
                            {
                                if($items[$j]->Type === "room_order")
                                {
                                    $days = Roomorder::Days($items[$j]);

                                    if($days >= $discounts[$i]->Fromcount)
                                    {
                                        if(($days <= Convert::ToInt($discounts[$i]->Tocount)) || (Convert::ToInt($discounts[$i]->Tocount) === 0))
                                        {
                                            if($discounts[$i]->Bypercentage)
                                            {
                                                if($discounts[$i]->Ontotal)
                                                {
                                                    $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                                }
                                                else
                                                {
                                                    $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                                }
                                            }
                                            else
                                            {
                                                $orderlist->Discount += $discounts[$i]->Value;
                                            }
                                        }
                                    }
                                }
                            }
                            if($discounts[$i]->Amountbased)
                            {
                                if($orderlist->GetTotal() >= $discounts[$i]->Fromamount)
                                {
                                    if(($orderlist->GetTotal() <= $discounts[$i]->Toamount) || (Convert::ToInt($discounts[$i]->Toamount) === 0))
                                    {
                                        if($discounts[$i]->Bypercentage)
                                        {
                                            if($discounts[$i]->Ontotal)
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $orderlist->GetTotal());
                                            }
                                            else
                                            {
                                                $orderlist->Discount += (($discounts[$i]->Value / 100.0) * $items[$j]->Total());
                                            }
                                        }
                                        else
                                        {
                                            $orderlist->Discount += $discounts[$i]->Value;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            $orderlist->Save();
            return $orderlist;
        }


        public static function Barcovered(Subscriber $subscriber)
        {
            $discounts = Discount::All($subscriber);

            $ret = [];

            for($i = 0; $i < count($discounts); $i++)
            {
                if(count($discounts[$i]->Drinks) > 0)
                {
                    array_push($ret, $discounts[$i]);
                }
            }
            return $ret;
        }
        public static function Foodcovered(Subscriber $subscriber)
        {
            $discounts = Discount::All($subscriber);

            $ret = [];

            for($i = 0; $i < count($discounts); $i++)
            {
                if(count($discounts[$i]->Food) > 0)
                {
                    array_push($ret, $discounts[$i]);
                }
            }
            return $ret;
        }
        public static function Pastrycovered(Subscriber $subscriber)
        {
            $discounts = Discount::All($subscriber);

            $ret = [];

            for($i = 0; $i < count($discounts); $i++)
            {
                if(count($discounts[$i]->Pastries) > 0)
                {
                    array_push($ret, $discounts[$i]);
                }
            }
            return $ret;
        }
        public static function Laundrycovered(Subscriber $subscriber)
        {
            $discounts = Discount::All($subscriber);

            $ret = [];

            for($i = 0; $i < count($discounts); $i++)
            {
                if(count($discounts[$i]->Laundry) > 0)
                {
                    array_push($ret, $discounts[$i]);
                }
            }
            return $ret;
        }
        public static function Poolcovered(Subscriber $subscriber)
        {
            $discounts = Discount::All($subscriber);

            $ret = [];

            for($i = 0; $i < count($discounts); $i++)
            {
                if(count($discounts[$i]->Pool) > 0)
                {
                    array_push($ret, $discounts[$i]);
                }
            }
            return $ret;
        }
        public static function Servicescovered(Subscriber $subscriber)
        {
            $discounts = Discount::All($subscriber);

            $ret = [];

            for($i = 0; $i < count($discounts); $i++)
            {
                if(count($discounts[$i]->Services) > 0)
                {
                    array_push($ret, $discounts[$i]);
                }
            }
            return $ret;
        }

	}
