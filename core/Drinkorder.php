<?php
	/* Generated by Wixnit Class Builder 
	// Feb, 23/2020
	// Building class for Drinkorder
	*/

	class Drinkorder extends Order
	{
		public $Id = "";
		public $Created = 0;
		public $Drink = "";
		public $Quantity = 0;
		public $Immediate = false;
		public $Paid = false;
		public $Lodging = "";
		public $Itemkey = "";
		public $Invoice = "";
		public $Customer = "";
		public $Schedule = "";
		public $Orderdate = 0;
		public $Ordermin = 0;
		public $Orderhour = 0;
		public $Ordergmt = "";

		protected $subscriber = null;

		function __construct(Subscriber $subscriber)
		{
			$this->subscriber = $subscriber;
            $this->Type = "drink_order";
		}

		public function Initialize($arg=null)
        {
            if($arg != null)
            {
                $db = $this->subscriber->GetDB();

                $res = $db->query("SELECT * FROM drinkorder WHERE drinkorderid='$arg'");

                if($res->num_rows > 0)
                {
                    $row = $res->fetch_assoc();

                    $this->Id = $row['drinkorderid'];
                    $this->Created = new WixDate($row['created']);
                    $this->Drink = new Drink($this->subscriber);
                    $this->Drink->Initialize($row['drink']);
                    $this->Quantity = Convert::ToInt($row['quantity']);
                    $this->Immediate = Convert::ToBool($row['immediate']);
                    $this->Paid = Convert::ToBool($row['paid']);
                    $this->Lodging = $row['lodging'];
                    $this->Itemkey = $row['itemkey'];
                    $this->Invoice = new Invoice($row['invoice']);
                    $this->Customer = new Entity($row['customer']);
                    $this->Schedule = $row['schedule'];
                    $this->Orderdate = new WixDate($row['orderdate']);
                    $this->Ordermin = Convert::ToInt($row['ordermin']);
                    $this->Orderhour = Convert::ToInt($row['orderhour']);
                    $this->Ordergmt = $row['ordergmt'];
                }
            }
        }

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$drink = addslashes(is_a($this->Drink, "Drink") ? $this->Drink->Id : $this->Drink);
			$quantity = Convert::ToInt($this->Quantity);
			$immediate = Convert::ToInt($this->Immediate);
			$paid = Convert::ToInt($this->Paid);
			$lodging = addslashes($this->Lodging);
			$itemkey = addslashes($this->Itemkey);
			$invoice = addslashes(is_a($this->Invoice, "Invoice") ? $this->Invoice->Id : $this->Invoice);
			$customer = addslashes(is_a($this->Customer, "Entity") ? $this->Customer->Id : $this->Customer);
			$schedule = addslashes($this->Schedule);
			$orderdate = Convert::ToInt(is_a($this->Orderdate, "WixDate") ? $this->Orderdate->getValue() : $this->Orderdate);
			$ordermin = Convert::ToInt($this->Ordermin);
			$orderhour = Convert::ToInt($this->Orderhour);
			$ordergmt = addslashes($this->Ordergmt);

			if($res = $db->query("SELECT drinkorderid FROM drinkorder WHERE drinkorderid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE drinkorder SET drink='$drink',quantity='$quantity',immediate='$immediate',paid='$paid',lodging='$lodging',itemkey='$itemkey',invoice='$invoice',customer='$customer',schedule='$schedule',orderdate='$orderdate',ordermin='$ordermin',orderhour='$orderhour',ordergmt='$ordergmt' WHERE drinkorderid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT drinkorderid FROM drinkorder WHERE drinkorderid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO drinkorder(drinkorderid,created,drink,quantity,immediate,paid,lodging,itemkey,invoice,customer,schedule,orderdate,ordermin,orderhour,ordergmt) VALUES ('$id','$created','$drink','$quantity','$immediate','$paid','$lodging','$itemkey','$invoice','$customer','$schedule','$orderdate','$ordermin','$orderhour','$ordergmt')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM drinkorder WHERE drinkorderid='$id'");

			//Deleting Associated Objects
			/*n			$this->Drink->Delete();

			$this->Invoice->Delete();

			$this->Customer->Delete();
			*/
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM drinkorder WHERE drink LIKE '%$term%' OR quantity LIKE '%$term%' OR immediate LIKE '%$term%' OR paid LIKE '%$term%' OR lodging LIKE '%$term%' OR itemkey LIKE '%$term%' OR invoice LIKE '%$term%' OR customer LIKE '%$term%' OR schedule LIKE '%$term%' OR orderdate LIKE '%$term%' OR ordermin LIKE '%$term%' OR orderhour LIKE '%$term%' OR ordergmt LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Drinkorder($subscriber);
                $ret[$i]->Id = $row['drinkorderid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Drink = new Drink($subscriber);
                $ret[$i]->Drink->Initialize($row['drink']);
                $ret[$i]->Quantity = Convert::ToInt($row['quantity']);
                $ret[$i]->Immediate = Convert::ToBool($row['immediate']);
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Lodging = $row['lodging'];
                $ret[$i]->Itemkey = $row['itemkey'];
                //$ret[$i]->Invoice = new Invoice($subscriber);
                //$ret[$i]->Invoice->Initialize($row['invoice']);
                $ret[$i]->Customer = new Entity($subscriber);
                //$ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Orderdate = new WixDate($row['orderdate']);
                $ret[$i]->Ordermin = Convert::ToInt($row['ordermin']);
                $ret[$i]->Orderhour = Convert::ToInt($row['orderhour']);
                $ret[$i]->Ordergmt = $row['ordergmt'];
				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='drinkorderid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM drinkorder WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Drinkorder($subscriber);
                $ret[$i]->Id = $row['drinkorderid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Drink = new Drink($subscriber);
                $ret[$i]->Drink->Initialize($row['drink']);
                $ret[$i]->Quantity = Convert::ToInt($row['quantity']);
                $ret[$i]->Immediate = Convert::ToBool($row['immediate']);
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Lodging = $row['lodging'];
                $ret[$i]->Itemkey = $row['itemkey'];
                //$ret[$i]->Invoice = new Invoice($subscriber);
                //$ret[$i]->Invoice->Initialize($row['invoice']);
                $ret[$i]->Customer = new Entity($subscriber);
                //$ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Orderdate = new WixDate($row['orderdate']);
                $ret[$i]->Ordermin = Convert::ToInt($row['ordermin']);
                $ret[$i]->Orderhour = Convert::ToInt($row['orderhour']);
                $ret[$i]->Ordergmt = $row['ordergmt'];
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM drinkorder ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Drinkorder($subscriber);
                $ret[$i]->Id = $row['drinkorderid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Drink = new Drink($subscriber);
                $ret[$i]->Drink->Initialize($row['drink']);
                $ret[$i]->Quantity = Convert::ToInt($row['quantity']);
                $ret[$i]->Immediate = Convert::ToBool($row['immediate']);
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Lodging = $row['lodging'];
                $ret[$i]->Itemkey = $row['itemkey'];
                //$ret[$i]->Invoice = new Invoice($subscriber);
                //$ret[$i]->Invoice->Initialize($row['invoice']);
                $ret[$i]->Customer = new Entity($subscriber);
                //$ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Orderdate = new WixDate($row['orderdate']);
                $ret[$i]->Ordermin = Convert::ToInt($row['ordermin']);
                $ret[$i]->Orderhour = Convert::ToInt($row['orderhour']);
                $ret[$i]->Ordergmt = $row['ordergmt'];
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM drinkorder");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Drinkorder($subscriber);
				$ret[$i]->Id = $row['drinkorderid'];
				$ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Drink = new Drink($subscriber);
                $ret[$i]->Drink->Initialize($row['drink']);
				$ret[$i]->Quantity = Convert::ToInt($row['quantity']);
				$ret[$i]->Immediate = Convert::ToBool($row['immediate']);
				$ret[$i]->Paid = Convert::ToBool($row['paid']);
				$ret[$i]->Lodging = $row['lodging'];
				$ret[$i]->Itemkey = $row['itemkey'];
				//$ret[$i]->Invoice = new Invoice($subscriber);
				//$ret[$i]->Invoice->Initialize($row['invoice']);
				$ret[$i]->Customer = new Entity($subscriber);
				//$ret[$i]->Customer->Initialize($row['customer']);
				$ret[$i]->Schedule = $row['schedule'];
				$ret[$i]->Orderdate = new WixDate($row['orderdate']);
				$ret[$i]->Ordermin = Convert::ToInt($row['ordermin']);
				$ret[$i]->Orderhour = Convert::ToInt($row['orderhour']);
				$ret[$i]->Ordergmt = $row['ordergmt'];
				$i++;
			}
			return $ret;
		}


        public static function ByItemkey(Subscriber $subscriber, $key)
        {
            $db = $subscriber->GetDB();
            $ret = array();
            $i = 0;

            $res = $db->query("SELECT * FROM drinkorder WHERE itemkey='$key'");
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Drinkorder($subscriber);
                $ret[$i]->Id = $row['drinkorderid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Drink = new Drink($subscriber);
                $ret[$i]->Drink->Initialize($row['drink']);
                $ret[$i]->Quantity = Convert::ToInt($row['quantity']);
                $ret[$i]->Immediate = Convert::ToBool($row['immediate']);
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Lodging = $row['lodging'];
                $ret[$i]->Itemkey = $row['itemkey'];
                //$ret[$i]->Invoice = new Invoice($subscriber);
                //$ret[$i]->Invoice->Initialize($row['invoice']);
                $ret[$i]->Customer = new Entity($subscriber);
                //$ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Orderdate = new WixDate($row['orderdate']);
                $ret[$i]->Ordermin = Convert::ToInt($row['ordermin']);
                $ret[$i]->Orderhour = Convert::ToInt($row['orderhour']);
                $ret[$i]->Ordergmt = $row['ordergmt'];
                $i++;
            }
            return $ret;
        }


        public static function Calc(Drinkorder $drinkorder)
        {
            $ret = (doubleval($drinkorder->Drink->Price) * $drinkorder->Quantity);
            return $ret;
        }


        public static function CalculateTaxes(Drinkorder $drinkorder, $compound=false)
        {
            if($compound)
            {
                $ret = doubleval($drinkorder->Drink->Tax);
            }
            else
            {
                $ret = (doubleval($drinkorder->Drink->Tax) * $drinkorder->Quantity);
            }
            return $ret;
        }
	}
