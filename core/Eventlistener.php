<?php
	/* Generated by Wixnit Class Builder
	// Feb, 01/2020
	// Building class for Eventlistener
	*/

	class Eventlistener
	{
		public $Id = "";
		public $Created = 0;
		public $Title = "";
		public $Message = "";
		public $Event = "";
		public $Delayhours = 0;
		public $Delaymins = 0;
		public $Contextuser = false;
		public $Contactlist = array();
		public $Guest = false;
		public $Customer = false;
		public $Staff = false;
		public $Subscribers = false;
		public $Contactform = false;
		public $Customlist = array();
		public $Issystem = false;

		public $Eventname = "";

		public $Firecount = 0;

		public $Status = false;

		private $subscriber = null;

		function __construct(Subscriber $subscriber)
		{
            $this->subscriber = $subscriber;
		}

		public function Initialize($arg=null)
        {
            if($arg != null)
            {
                $db = $this->subscriber->GetDB();

                $res = $db->query("SELECT * FROM eventlistener WHERE eventlistenerid='$arg'");

                if($res->num_rows > 0)
                {
                    $row = $res->fetch_assoc();

                    $this->Id = $row['eventlistenerid'];
                    $this->Created = new WixDate($row['created']);
                    $this->Title = $row['title'];
                    $this->Message = new messagetemplate($this->subscriber);
                    $this->Message->Initialize($row['message']);
                    $this->Event = $row['event'];
                    $this->Delayhours = $row['delayhours'];
                    $this->Delaymins = $row['delaymins'];
                    $this->Contextuser = Convert::ToBool($row['contextuser']);
                    $this->Contactlist = json_decode($row['contactlist']);
                    $this->Guest = Convert::ToBool($row['guest']);
                    $this->Customer = Convert::ToBool($row['customer']);
                    $this->Staff = Convert::ToBool($row['staff']);
                    $this->Subscribers = Convert::ToBool($row['subscribers']);
                    $this->Contactform = Convert::ToBool($row['contactform']);
                    $this->Status = Convert::ToBool($row['status']);
                    $this->Issystem = Convert::ToBool($row['issystem']);
                    $this->Firecount = $row['fired'];
                    $this->Eventname = Eventlistener::CodeToString($this->Event);

                    $this->Customlist = array();

                    $r = json_decode($row['customlist']);

                    for($i = 0; $i < count($r); $i++)
                    {
                        $this->Customlist[$i] = new Contactcollection($this->subscriber);
                        $this->Customlist[$i]->Initialize($r[$i]);
                    }
                }
            }
        }

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$title = addslashes($this->Title);
			$message = addslashes(is_a($this->Message, "messagetemplate") ? $this->Message->Id : $this->Message);
			$event = addslashes($this->Event);
			$delayhours = Convert::ToInt($this->Delayhours);
			$delaymins = Convert::ToInt($this->Delaymins);
			$contextuser = Convert::ToInt($this->Contextuser);
			$contactlist = addslashes(json_encode($this->Contactlist));
			$guest = Convert::ToInt($this->Guest);
			$customer = Convert::ToInt($this->Customer);
			$staff = Convert::ToInt($this->Staff);
			$subscribers = Convert::ToInt($this->Subscribers);
			$contactform = Convert::ToInt($this->Contactform);
			$customlist = addslashes(json_encode($this->Customlist));
			$status = Convert::ToInt($this->Status);
			$issystem = Convert::ToInt($this->Issystem);
			$fired = Convert::ToInt($this->Firecount);

            $list = array();
            for($i = 0; $i < count($this->Customlist); $i++)
            {
                array_push($list,is_object($this->Customlist[$i]) ? $this->Customlist[$i]->Id : $this->Customlist[$i]);
            }
            $customlist = json_encode($list);

			if($res = $db->query("SELECT eventlistenerid FROM eventlistener WHERE eventlistenerid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE eventlistener SET title='$title',message='$message',event='$event',delayhours='$delayhours',delaymins='$delaymins',contextuser='$contextuser',contactlist='$contactlist',guest='$guest',customer='$customer',staff='$staff',subscribers='$subscribers',contactform='$contactform',customlist='$customlist',status='$status',issystem='$issystem',fired='$fired' WHERE eventlistenerid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT eventlistenerid FROM eventlistener WHERE eventlistenerid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO eventlistener(eventlistenerid,created,title,message,event,delayhours,delaymins,contextuser,contactlist,guest,customer,staff,subscribers,contactform,customlist,status,issystem,fired) VALUES ('$id','$created','$title','$message','$event','$delayhours','$delaymins','$contextuser','$contactlist','$guest','$customer','$staff','$subscribers','$contactform','$customlist','$status','$issystem','$fired')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM eventlistener WHERE eventlistenerid='$id'");

			//Deleting Associated Objects
			/*n			$this->Message->Delete();
			*/
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM eventlistener WHERE title LIKE '%$term%' OR message LIKE '%$term%' OR event LIKE '%$term%' OR delayhours LIKE '%$term%' OR delaymins LIKE '%$term%' OR contextuser LIKE '%$term%' OR contactlist LIKE '%$term%' OR guest LIKE '%$term%' OR customer LIKE '%$term%' OR staff LIKE '%$term%' OR subscribers LIKE '%$term%' OR contactform LIKE '%$term%' OR customlist LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Eventlistener($subscriber);
                $ret[$i]->Id = $row['eventlistenerid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Title = $row['title'];
                $ret[$i]->Message = new messagetemplate($subscriber);
                $ret[$i]->Message->Initialize($row['message']);
                $ret[$i]->Event = $row['event'];
                $ret[$i]->Delayhours = $row['delayhours'];
                $ret[$i]->Delaymins = $row['delaymins'];
                $ret[$i]->Contextuser = Convert::ToBool($row['contextuser']);
                $ret[$i]->Contactlist = json_decode($row['contactlist']);
                $ret[$i]->Guest = Convert::ToBool($row['guest']);
                $ret[$i]->Customer = Convert::ToBool($row['customer']);
                $ret[$i]->Staff = Convert::ToBool($row['staff']);
                $ret[$i]->Subscribers = Convert::ToBool($row['subscribers']);
                $ret[$i]->Contactform = Convert::ToBool($row['contactform']);
                $ret[$i]->Customlist = json_decode($row['customlist']);
                $ret[$i]->Status = Convert::ToBool($row['status']);
                $ret[$i]->Issystem = Convert::ToBool($row['issystem']);
                $ret[$i]->Firecount = $row['fired'];
                $ret[$i]->Eventname = Eventlistener::CodeToString($ret[$i]->Event);
                $i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='eventlistenerid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM eventlistener WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Eventlistener($subscriber);
                $ret[$i]->Id = $row['eventlistenerid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Title = $row['title'];
                $ret[$i]->Message = new messagetemplate($subscriber);
                $ret[$i]->Message->Initialize($row['message']);
                $ret[$i]->Event = $row['event'];
                $ret[$i]->Delayhours = $row['delayhours'];
                $ret[$i]->Delaymins = $row['delaymins'];
                $ret[$i]->Contextuser = Convert::ToBool($row['contextuser']);
                $ret[$i]->Contactlist = json_decode($row['contactlist']);
                $ret[$i]->Guest = Convert::ToBool($row['guest']);
                $ret[$i]->Customer = Convert::ToBool($row['customer']);
                $ret[$i]->Staff = Convert::ToBool($row['staff']);
                $ret[$i]->Subscribers = Convert::ToBool($row['subscribers']);
                $ret[$i]->Contactform = Convert::ToBool($row['contactform']);
                $ret[$i]->Customlist = json_decode($row['customlist']);
                $ret[$i]->Status = Convert::ToBool($row['status']);
                $ret[$i]->Issystem = Convert::ToBool($row['issystem']);
                $ret[$i]->Firecount = $row['fired'];
                $ret[$i]->Eventname = Eventlistener::CodeToString($ret[$i]->Event);
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM eventlistener ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Eventlistener($subscriber);
                $ret[$i]->Id = $row['eventlistenerid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Title = $row['title'];
                $ret[$i]->Message = new messagetemplate($subscriber);
                $ret[$i]->Message->Initialize($row['message']);
                $ret[$i]->Event = $row['event'];
                $ret[$i]->Delayhours = $row['delayhours'];
                $ret[$i]->Delaymins = $row['delaymins'];
                $ret[$i]->Contextuser = Convert::ToBool($row['contextuser']);
                $ret[$i]->Contactlist = json_decode($row['contactlist']);
                $ret[$i]->Guest = Convert::ToBool($row['guest']);
                $ret[$i]->Customer = Convert::ToBool($row['customer']);
                $ret[$i]->Staff = Convert::ToBool($row['staff']);
                $ret[$i]->Subscribers = Convert::ToBool($row['subscribers']);
                $ret[$i]->Contactform = Convert::ToBool($row['contactform']);
                $ret[$i]->Customlist = json_decode($row['customlist']);
                $ret[$i]->Status = Convert::ToBool($row['status']);
                $ret[$i]->Issystem = Convert::ToBool($row['issystem']);
                $ret[$i]->Firecount = $row['fired'];
                $ret[$i]->Eventname = Eventlistener::CodeToString($ret[$i]->Event);
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM eventlistener");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Eventlistener($subscriber);
				$ret[$i]->Id = $row['eventlistenerid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Title = $row['title'];
				$ret[$i]->Message = new messagetemplate($subscriber);
				$ret[$i]->Message->Initialize($row['message']);
				$ret[$i]->Event = $row['event'];
				$ret[$i]->Delayhours = $row['delayhours'];
				$ret[$i]->Delaymins = $row['delaymins'];
				$ret[$i]->Contextuser = Convert::ToBool($row['contextuser']);
				$ret[$i]->Contactlist = json_decode($row['contactlist']);
				$ret[$i]->Guest = Convert::ToBool($row['guest']);
				$ret[$i]->Customer = Convert::ToBool($row['customer']);
				$ret[$i]->Staff = Convert::ToBool($row['staff']);
				$ret[$i]->Subscribers = Convert::ToBool($row['subscribers']);
				$ret[$i]->Contactform = Convert::ToBool($row['contactform']);
				$ret[$i]->Customlist = json_decode($row['customlist']);
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Issystem = Convert::ToBool($row['issystem']);
                $ret[$i]->Firecount = $row['fired'];
                $ret[$i]->Eventname = Eventlistener::CodeToString($ret[$i]->Event);
				$i++;
			}
			return $ret;
		}


		public static function SystemEvents(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM eventlistener WHERE issystem=1");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Eventlistener($subscriber);
				$ret[$i]->Id = $row['eventlistenerid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Title = $row['title'];
				$ret[$i]->Message = new messagetemplate($subscriber);
				$ret[$i]->Message->Initialize($row['message']);
				$ret[$i]->Event = $row['event'];
				$ret[$i]->Delayhours = $row['delayhours'];
				$ret[$i]->Delaymins = $row['delaymins'];
				$ret[$i]->Contextuser = Convert::ToBool($row['contextuser']);
				$ret[$i]->Contactlist = json_decode($row['contactlist']);
				$ret[$i]->Guest = Convert::ToBool($row['guest']);
				$ret[$i]->Customer = Convert::ToBool($row['customer']);
				$ret[$i]->Staff = Convert::ToBool($row['staff']);
				$ret[$i]->Subscribers = Convert::ToBool($row['subscribers']);
				$ret[$i]->Contactform = Convert::ToBool($row['contactform']);
				$ret[$i]->Customlist = json_decode($row['customlist']);
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Issystem = Convert::ToBool($row['issystem']);
                $ret[$i]->Firecount = $row['fired'];
                $ret[$i]->Eventname = Eventlistener::CodeToString($ret[$i]->Event);
				$i++;
			}
			return $ret;
		}


		public static function UserEvents(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM eventlistener WHERE issystem=0");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Eventlistener($subscriber);
				$ret[$i]->Id = $row['eventlistenerid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Title = $row['title'];
				$ret[$i]->Message = new messagetemplate($subscriber);
				$ret[$i]->Message->Initialize($row['message']);
				$ret[$i]->Event = $row['event'];
				$ret[$i]->Delayhours = $row['delayhours'];
				$ret[$i]->Delaymins = $row['delaymins'];
				$ret[$i]->Contextuser = Convert::ToBool($row['contextuser']);
				$ret[$i]->Contactlist = json_decode($row['contactlist']);
				$ret[$i]->Guest = Convert::ToBool($row['guest']);
				$ret[$i]->Customer = Convert::ToBool($row['customer']);
				$ret[$i]->Staff = Convert::ToBool($row['staff']);
				$ret[$i]->Subscribers = Convert::ToBool($row['subscribers']);
				$ret[$i]->Contactform = Convert::ToBool($row['contactform']);
				$ret[$i]->Customlist = json_decode($row['customlist']);
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Issystem = Convert::ToBool($row['issystem']);
                $ret[$i]->Firecount = $row['fired'];
                $ret[$i]->Eventname = Eventlistener::CodeToString($ret[$i]->Event);
				$i++;
			}
			return $ret;
		}


		public static function GetList()
        {
            return ["101","102","103","104","105","106","107","108","109","201","202","203",
                "204","205","206","207","208","208","301","302","303","304","305","306","307",
                "308","308","401"];
        }

        public static function CodeToString($code)
        {
            $ret = "";

            switch ($code)
            {
                case "101":
                    $ret = "Guest checked in";
                    break;
                case "102":
                    $ret = "Guest checked out";
                    break;
                case "103":
                    $ret = "Guest stays 25%";
                    break;
                case "104":
                    $ret = "Guest stays 50%";
                    break;
                case "105":
                    $ret = "Guest stays 75%";
                    break;
                case "106":
                    $ret = "Guest stays 100%";
                    break;
                case "107":
                    $ret = "Saff loggedIn";
                    break;
                case "108":
                    $ret = "Customer loggedIn";
                    break;
                case "109":
                    $ret = "Customer creates account";
                    break;
                case "201":
                    $ret = "Staff is added";
                    break;
                case "202":
                    $ret = "Staff signs in at the hotel";
                    break;
                case "203":
                    $ret = "Its users birthday";
                    break;
                case "204":
                    $ret = "Customer completes reservation";
                    break;
                case "205":
                    $ret = "Customer cancels reservation";
                    break;
                case "206":
                    $ret = "1 day to Customers arrival";
                    break;
                case "207":
                    $ret = "2 days to customers arrival";
                    break;
                case "208":
                    $ret = "1 week to customers arrival";
                    break;
                case "209":
                    $ret = "Coupon is used";
                    break;
                case "301":
                    $ret = "Staff logs out";
                    break;
                case "302":
                    $ret = "Customer logs out";
                    break;
                case "303":
                    $ret = "User sends message";
                    break;
                case "304":
                    $ret = "Guest makes order while lodging";
                    break;
                case "305":
                    $ret = "User Completes review";
                    break;
                case "306":
                    $ret = "Customer updates info";
                    break;
                case "307":
                    $ret = "Guest orders food while lodging";
                    break;
                case "308":
                    $ret = "Guest orders drink while lodging";
                    break;
                case "309":
                    $ret = "Guest orders pastry while lodging";
                    break;
                case "401":
                    $ret = "Guest orders laundry while lodging";
                    break;
                case "402":
                    $ret = "";
                    break;
                case "403":
                    $ret = "";
                    break;
                default:
                    $ret = "";
            }
            return $ret;
        }
	}
