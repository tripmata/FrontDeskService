<?php
	/* Generated by Wixnit Class Builder 
	// Feb, 25/2020
	// Building class for Foodreservation
	*/

	class Foodreservation
	{
		public $Id = "";
		public $Created = 0;
		public $Customer = "";
		public $Orderday = 0;
		public $Orderhour = 0;
		public $Ordermin = 0;
		public $Paid = false;
		public $Invoice = "";
		public $Food = "";
		public $Price = 0;
		public $Tax = 0;
		public $Discount = 0;
		public $Ordergmt = "";
		public $Schedule = "";
		public $Quantity = 0;

		private $subscriber = null;

		function __construct(Subscriber $subscriber)
		{
			$this->subscriber = $subscriber;
		}

		public function Initialize($arg=null)
        {
            if($arg != null)
            {
                $db = $this->subscriber->GetDB();

                $res = $db->query("SELECT * FROM foodreservation WHERE foodreservationid='$arg'");

                if($res->num_rows > 0)
                {
                    $row = $res->fetch_assoc();

                    $this->Id = $row['foodreservationid'];
                    $this->Created = new WixDate($row['created']);
                    $this->Customer = new Customer($this->subscriber);
                    $this->Customer->Initialize($row['customer']);
                    $this->Orderday = new WixDate($row['orderday']);
                    $this->Orderhour = $row['orderhour'];
                    $this->Ordermin = $row['ordermin'];
                    $this->Paid = Convert::ToBool($row['paid']);
                    $this->Invoice = new Invoice($this->subscriber);
                    $this->Invoice->Initialize($row['invoice']);
                    $this->Food = new Food($this->subscriber);
                    $this->Food->Initialize($row['food']);
                    $this->Price = $row['price'];
                    $this->Tax = $row['tax'];
                    $this->Discount = $row['discount'];
                    $this->Ordergmt = $row['ordergmt'];
                    $this->Schedule = new Schedule($this->subscriber);
                    $this->Schedule->Initialize($row['schedule']);
                    $this->Quantity = $row['quantity'];
                }
            }
        }

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$customer = addslashes(is_a($this->Customer, "Customer") ? $this->Customer->Id : $this->Customer);
			$orderday = Convert::ToInt($this->Orderday);
			$orderhour = Convert::ToInt($this->Orderhour);
			$ordermin = Convert::ToInt($this->Ordermin);
			$paid = Convert::ToInt($this->Paid);
			$invoice = addslashes(is_a($this->Invoice, "Invoice") ? $this->Invoice->Id : $this->Invoice);
			$food = addslashes(is_a($this->Food, "Food") ? $this->Food->Id : $this->Food);
			$price = floatval($this->Price);
			$tax = floatval($this->Tax);
			$discount = floatval($this->Discount);
			$ordergmt = addslashes($this->Ordergmt);
			$schedule = addslashes(is_a($this->Schedule, "Schedule") ? $this->Schedule->Id : $this->Schedule);
			$quantity = Convert::ToInt($this->Quantity);

			if($res = $db->query("SELECT foodreservationid FROM foodreservation WHERE foodreservationid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE foodreservation SET customer='$customer',orderday='$orderday',orderhour='$orderhour',ordermin='$ordermin',paid='$paid',invoice='$invoice',food='$food',price='$price',tax='$tax',discount='$discount',ordergmt='$ordergmt',schedule='$schedule',quantity='$quantity' WHERE foodreservationid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT foodreservationid FROM foodreservation WHERE foodreservationid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO foodreservation(foodreservationid,created,customer,orderday,orderhour,ordermin,paid,invoice,food,price,tax,discount,ordergmt,schedule,quantity) VALUES ('$id','$created','$customer','$orderday','$orderhour','$ordermin','$paid','$invoice','$food','$price','$tax','$discount','$ordergmt','$schedule','$quantity')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM foodreservation WHERE foodreservationid='$id'");

			//Deleting Associated Objects
			/*n			$this->Customer->Delete();

			$this->Invoice->Delete();

			$this->Food->Delete();

			$this->Schedule->Delete();
			*/
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM foodreservation WHERE customer LIKE '%$term%' OR orderday LIKE '%$term%' OR orderhour LIKE '%$term%' OR ordermin LIKE '%$term%' OR paid LIKE '%$term%' OR invoice LIKE '%$term%' OR food LIKE '%$term%' OR price LIKE '%$term%' OR tax LIKE '%$term%' OR discount LIKE '%$term%' OR ordergmt LIKE '%$term%' OR schedule LIKE '%$term%' OR quantity LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Foodreservation($subscriber);
                $ret[$i]->Id = $row['foodreservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Orderday = new WixDate($row['orderday']);
                $ret[$i]->Orderhour = $row['orderhour'];
                $ret[$i]->Ordermin = $row['ordermin'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Invoice = $row['invoice'];
                $ret[$i]->Food = $row['food'];
                $ret[$i]->Price = $row['price'];
                $ret[$i]->Tax = $row['tax'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Ordergmt = $row['ordergmt'];
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Quantity = $row['quantity'];
				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='foodreservationid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM foodreservation WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Foodreservation($subscriber);
                $ret[$i]->Id = $row['foodreservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Orderday = new WixDate($row['orderday']);
                $ret[$i]->Orderhour = $row['orderhour'];
                $ret[$i]->Ordermin = $row['ordermin'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Invoice = $row['invoice'];
                $ret[$i]->Food = $row['food'];
                $ret[$i]->Price = $row['price'];
                $ret[$i]->Tax = $row['tax'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Ordergmt = $row['ordergmt'];
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Quantity = $row['quantity'];
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM foodreservation ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Foodreservation($subscriber);
                $ret[$i]->Id = $row['foodreservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Orderday = new WixDate($row['orderday']);
                $ret[$i]->Orderhour = $row['orderhour'];
                $ret[$i]->Ordermin = $row['ordermin'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Invoice = $row['invoice'];
                $ret[$i]->Food = $row['food'];
                $ret[$i]->Price = $row['price'];
                $ret[$i]->Tax = $row['tax'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Ordergmt = $row['ordergmt'];
                $ret[$i]->Schedule = $row['schedule'];
                $ret[$i]->Quantity = $row['quantity'];
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM foodreservation");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Foodreservation($subscriber);
				$ret[$i]->Id = $row['foodreservationid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Customer = $row['customer'];
				$ret[$i]->Orderday = new WixDate($row['orderday']);
				$ret[$i]->Orderhour = $row['orderhour'];
				$ret[$i]->Ordermin = $row['ordermin'];
				$ret[$i]->Paid = Convert::ToBool($row['paid']);
				$ret[$i]->Invoice = $row['invoice'];
				$ret[$i]->Food = $row['food'];
				$ret[$i]->Price = $row['price'];
				$ret[$i]->Tax = $row['tax'];
				$ret[$i]->Discount = $row['discount'];
				$ret[$i]->Ordergmt = $row['ordergmt'];
				$ret[$i]->Schedule = $row['schedule'];
				$ret[$i]->Quantity = $row['quantity'];
				$i++;
			}
			return $ret;
		}

		public function GetCustomer()
		{
			return $this->Customer;
		}

		public function SetCustomer($customer)
		{

			//Presuming Object has a Save Method
			/*
			if(is_a($customer, "Customer"))
			{
				$customer->Save();
			}
			*/
			$this->Customer = is_a($customer, "Customer") ? $customer->Id : $customer;
		}
	}
