<?php
/* Generated by Wixnit Class Builder
// Mar, 11/2020
// Building class for Lodging
*/

class Lodging
{
    public $Id = "";
    public $Created = 0;
    public $Guest = "";
    public $Subguest = array();
    public $Rooms = [];
    public $Checkin = 0;
    public $Checkout = 0;
    public $Days = 0;
    public $Adults = 0;
    public $Children = 0;
    public $Pet = false;
    public $Paid = false;
    public $Total = 0;
    public $Taxes = 0;
    public $Discount = 0;
    public $Paidamount = 0;
    public $Roomcategory = array();
    public $User = "";
    public $Checkouts = array();
    public $Bills = 0.0;
    public $Bookingnumber = "";
    public $Checkincount = 0;
    public $Checkoutcount = 0;
    public $Checkedout = false;
    public $BaseTotal = 0;
    public $ReservationID = '';
    public $IsOverdue = false;

    private $subscriber = null;
    public $PlatformName = '';
    public $Checkoutdate = 0;

    function __construct(Subscriber $subscriber)
    {
        $this->subscriber = $subscriber;
    }

    public function Initialize($arg=null)
    { 
        if($arg != null)
        {
            $db = $this->subscriber->GetDB();

            $res = $db->query("SELECT * FROM lodging WHERE lodgingid='$arg' OR booking='$arg' ");

            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $this->Id = $row['lodgingid'];
                $this->Created = new WixDate($row['created']);
                $this->Guest = new CustomerByProperty($this->subscriber);
                $this->Guest->Initialize($row['guest']);
                $this->Subguest = [];

                $this->Checkincount = Convert::ToInt($row['checkincount']);
                $this->Checkoutcount = Convert::ToInt($row['checkoutcount']);
                $this->Checkedout = Convert::ToBool($row['checkedout']);
                $this->BaseTotal = doubleval($row['base_total']);

                $guest = json_decode($row['subguest']);
                for($i = 0; $i < count($guest); $i++)
                {
                    if($guest[$i] != "")
                    {
                        $g = new Subguest($this->subscriber);
                        $g->Initialize($guest[$i]);

                        array_push($this->Subguest, $g);
                    }
                }

                $this->Rooms = [];

                $r = json_decode($row['rooms']);

                // var_dump($r);

                if(is_array($r))
                {
                    for($i = 0; $i < count($r); $i++)
                    {
                        // check for id
                        if ($r[$i]->Id == '') :

                            // @var mixed $bookingNumber
                            $bookingNumber = $row['booking'];

                            // find reservation id from reservation with booking number
                            $reservation = $db->query("SELECT rooms FROM reservation WHERE booking = '$bookingNumber'");

                            // are we good ?
                            if ($reservation->num_rows > 0) :

                                // fetch 
                                $fetch = json_decode($reservation->fetch_assoc()['rooms'])[0];

                                // get number
                                $number = $fetch->number;

                                // get room categoryid
                                $categoryId = $fetch->room;

                                // get roomid
                                $roomId = $db->query("SELECT roomid FROM room WHERE `number` = '$number' AND category  = '$categoryId'");

                                // are we good 
                                if ($roomId->num_rows > 0) :

                                    // feetch result
                                    $roomId = $roomId->fetch_assoc()['roomid'];

                                    // add id
                                    $r[$i]->Id = $roomId;

                                endif;

                            endif;

                        endif;

                        // load lodgepixel
                        $ro = new Lodgepixel($this->subscriber, $r[$i]);
                        array_push($this->Rooms, $ro);
                    }
                }

                $this->Checkin = new WixDate($row['checkin']);
                $this->Checkout = new WixDate($row['checkout']);
                $this->Checkoutdate = new WixDate($row['checkout_date']);
                $this->Days = Convert::ToInt($row['days']);
                $this->Adults = Convert::ToInt($row['adults']);
                $this->Children = Convert::ToInt($row['children']);
                $this->Pet = Convert::ToBool($row['pet']);
                $this->Paid = Convert::ToBool($row['paid']);
                $this->Total = doubleval($row['total']);
                $this->Taxes = doubleval($row['taxes']);
                $this->Discount = doubleval($row['discount']);
                $this->Paidamount = doubleval($row['paidamount']);
                $this->Bills = doubleval($row['bills']);
                $this->Bookingnumber = $row['booking'];
                $this->overdueCheckOut($row);
                $this->PlatformName = $row['platformName'];

                $this->Roomcategory = [];
                $rcat = json_decode($row['roomcategory']);
                for($i = 0; $i < count($rcat); $i++)
                {
                    if($rcat[$i] != "")
                    {
                        $r = new Roomcategory($this->subscriber);
                        $r->Initialize($rcat[$i]);

                        array_push($this->Roomcategory, $r);
                    }
                }


                $this->User = new User($this->subscriber);
                $this->User->Initialize($row['user']);

                $this->Checkouts = [];
                $dates = json_decode($row['checkouts']);
                for($i = 0; $i < count($dates); $i++)
                {
                    if($dates[$i] != "")
                    {
                        array_push($this->Checkouts, new WixDate($dates[$i]));
                    }
                }
            }
        }
    }

    public function Save()
    {
        $db = $this->subscriber->GetDB();
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];
        $checkOutDate = Convert::ToInt($this->Checkout);

        // check data type
        if (is_string($this->Checkoutdate)) :

            // convert to int
            $checkOutDate = Convert::ToInt($this->Checkoutdate);

        else:

            // check if it's an instance of wixdate
            if (is_object($this->Checkoutdate) && is_a($this->Checkoutdate, 'WixDate')) :

                // get the time stamp
                $checkOutDate = $this->Checkoutdate->getValue();

            endif;

        endif;

        // create data.
        $id = $this->Id;
        $created = time();
        $guest = addslashes((is_a($this->Guest, "Customer") || is_a($this->Guest, "CustomerByProperty")) ? $this->Guest->Id : $this->Guest);
        $subguest = "[]";
        $rooms = "[]";
        $checkin = Convert::ToInt($this->Checkin);
        $checkout = Convert::ToInt($this->Checkout);
        $checkout_date = $checkOutDate;
        $days = Convert::ToInt($this->Days);
        $adults = Convert::ToInt($this->Adults);
        $children = Convert::ToInt($this->Children);
        $pet = Convert::ToInt($this->Pet);
        $paid = Convert::ToInt($this->Paid);
        $total = floatval($this->Total);
        $taxes = floatval($this->Taxes);
        $discount = floatval($this->Discount);
        $paidamount = floatval($this->Paidamount);
        $roomcategory = addslashes(json_encode(is_a($this->Roomcategory, "Roomcategory") ? $this->Roomcategory->GetArray() : $this->Roomcategory));
        $user = addslashes(is_a($this->User, "User") ? $this->User->Id : $this->User);
        $checkouts = "[]";

        $checkincount = Convert::ToInt($this->Checkincount);
        $checkoutcount = Convert::ToInt($this->Checkoutcount);
        $checkedout = Convert::ToInt($this->Checkedout);
        $baseTotal = doubleval($this->BaseTotal);
        $platform = addslashes($this->PlatformName);


        // manage booking number
        if ($this->Bookingnumber == '')
        {
            $booking = strtoupper(Random::GenerateId(10));
            while($db->query("SELECT lodgingid FROM lodging WHERE booking='$booking'")->num_rows > 0)
            {
                $booking = strtoupper(Random::GenerateId(10));
            }
            $this->Bookingnumber = $booking;
        }

        $booking = addslashes($this->Bookingnumber);

        $bills = doubleval($this->Bills);



        $ck = [];
        for($i = 0; $i < count($this->Checkouts); $i++)
        {
            array_push($ck, Convert::ToInt($this->Checkouts));
        }
        $checkouts = json_encode($ck);


        $sg = [];
        for($i = 0; $i < count($this->Subguest); $i++)
        {
            array_push($sg, is_a($this->Subguest[$i], "Subguest") ? $this->Subguest[$i]->Id : $this->Subguest[$i]);
        }
        $subguest = json_encode($sg);


        $rms = [];
        for($i = 0; $i < count($this->Rooms); $i++)
        {
            array_push($rms, is_a($this->Rooms[$i], "Lodgepixel") ? $this->Rooms[$i]->Pixelate() : $this->Rooms[$i]->Id);
        }
        $rooms = json_encode($rms);


        if($res = $db->query("SELECT lodgingid FROM lodging WHERE lodgingid='$id'")->num_rows > 0)
        {
            $db->query("UPDATE lodging SET guest='$guest',subguest='$subguest',rooms='$rooms',checkin='$checkin',checkout='$checkout',`days`='$days',adults='$adults',children='$children',pet='$pet',paid='$paid',total='$total',taxes='$taxes',discount='$discount',paidamount='$paidamount',roomcategory='$roomcategory',user='$user',checkouts='$checkouts',bills='$bills',booking='$booking',checkincount='$checkincount',checkoutcount='$checkoutcount',checkedout='$checkedout',base_total='$baseTotal',platformName = '$platform',checkout_date='$checkout_date' WHERE lodgingid = '$id'");
        }
        else
        {
            // check Bookingnumber
            $fromLodging = $db->query("SELECT id FROM lodging WHERE booking = '{$booking}'");

            if ($fromLodging->num_rows == 0) :

                redo: ;
                $id = Random::GenerateId(16);
                if($db->query("SELECT lodgingid FROM lodging WHERE lodgingid='$id'")->num_rows > 0)
                {
                    goto redo;
                }
                $this->Id = $id;
                $db->query("INSERT INTO lodging (lodgingid,created,guest,subguest,rooms,checkin,checkout,`days`,adults,children,pet,paid,total,taxes,discount,paidamount,roomcategory,user,checkouts,bills,booking,checkincount,checkoutcount,checkedout,propertyid,base_total,platformName,checkout_date) VALUES ('$id','$created','$guest','$subguest','$rooms','$checkin','$checkout','$days','$adults','$children','$pet','$paid','$total','$taxes','$discount','$paidamount','$roomcategory','$user','$checkouts','$bills','$booking','$checkincount','$checkoutcount','$checkedout', '$property', '$baseTotal', '$platform','$checkout_date')");
            
            endif;
        }
    }

    public function Delete()
    {
        $db = $this->subscriber->GetDB();

        $id = $this->Id;
        $db->query("DELETE FROM lodging WHERE lodgingid='$id'");

        //Deleting Associated Objects
        /*n			$this->Guest->Delete();

        $this->Subguest->Delete();

        $this->Rooms->Delete();

        $this->Roomcategory->Delete();

        $this->User->Delete();
        */
    }

    public function getReservationID($row, $db)
    {
        // @var string $bookingNumber
        $bookingNumber = $row['booking'];

        // check reservation
        $query = $db->query("SELECT reservationid FROM reservation WHERE booking = '$bookingNumber'");

        // are we good ?
        if ($query->num_rows > 0)
        {
            $this->ReservationID = $query->fetch_assoc()['reservationid'];
        }
    }

    public static function Search(Subscriber $subscriber, $term='')
    {
        // get db
        $db = $subscriber->GetDB();

        // get array
        $ret = array();

        // check customer information
        $res = $db->query("SELECT * FROM customer WHERE email LIKE '%$term%' OR `name` LIKE '%$term%' OR surname LIKE '%$term%' OR phone LIKE '%$term%' OR email LIKE '%$term%'");

        // create function
        $searchFunction = function(string $term) use ($subscriber, $db, &$ret)
        {
            $i = 0;
            $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

            $res = $db->query("SELECT * FROM lodging WHERE guest LIKE '%$term%' OR subguest LIKE '%$term%' OR rooms LIKE '%$term%' OR checkin LIKE '%$term%' OR checkout LIKE '%$term%' OR days LIKE '%$term%' OR adults LIKE '%$term%' OR children LIKE '%$term%' OR pet LIKE '%$term%' OR paid LIKE '%$term%' OR total LIKE '%$term%' OR taxes LIKE '%$term%' OR discount LIKE '%$term%' OR paidamount LIKE '%$term%' OR roomcategory LIKE '%$term%' OR user LIKE '%$term%' OR checkouts LIKE '%$term%'");
            while (($row = $res->fetch_assoc()) != null)
            {
                if ($row['propertyid'] == $property) :

                    $ret[$i] = new Lodging($subscriber);
                    $ret[$i]->Id = $row['lodgingid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Guest = new CustomerByProperty($subscriber);
                    $ret[$i]->Guest->Initialize($row['guest']);
                    $ret[$i]->Subguest = json_decode($row['subguest']);
                    $ret[$i]->Rooms = [];

                    $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
                    $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

                    $r = json_decode($row['rooms']);

                    if(is_array($r))
                    {
                        for($j = 0; $j < count($r); $j++)
                        {
                            $ro = new Lodgepixel($subscriber, $r[$j]);
                            array_push($ret[$i]->Rooms, $ro);
                        }
                    }

                    $ret[$i]->Checkin = new WixDate($row['checkin']);
                    $ret[$i]->Checkout = new WixDate($row['checkout']);
                    $ret[$i]->Days = Convert::ToInt($row['days']);
                    $ret[$i]->Adults = Convert::ToInt($row['adults']);
                    $ret[$i]->Children = Convert::ToInt($row['children']);
                    $ret[$i]->Pet = Convert::ToBool($row['pet']);
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Total = doubleval($row['total']);
                    $ret[$i]->Taxes = doubleval($row['taxes']);
                    $ret[$i]->Discount = doubleval($row['discount']);
                    $ret[$i]->Paidamount = doubleval($row['paidamount']);
                    $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
                    $ret[$i]->User = $row['user'];
                    $ret[$i]->Checkouts = json_decode($row['checkouts']);
                    $ret[$i]->Bills = doubleval($row['bills']);
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->PlatformName = $row['platformName'];
                    $ret[$i]->getReservationID($row, $db);
                    $ret[$i]->overdueCheckOut($row);
                    $i++;

                endif;
            }
        };

        // check fullname
        if ($res->num_rows == 0)
        {
            $termArray = explode(' ', $term);

            // check length
            if (count($termArray) == 2)
            {
                // get first name last name
                list($name, $lastname) = $termArray;

                // check now
                $res = $db->query("SELECT * FROM customer WHERE `name` LIKE '%$name%' OR surname LIKE '%$lastname%'");
            }
        }

        // Check now
        if ($res->num_rows > 0)
        {
            // run loop
            while (($row = $res->fetch_assoc()) != null)
            {
                $searchFunction($row['customerid']);
            }
        }
        else
        {
            $searchFunction($term);
        }

        // return array
        return $ret;
    }

    public static function Filter(Subscriber $subscriber, $term='', $field='lodgingid')
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $res = $db->query("SELECT * FROM lodging WHERE ".$field." ='$term' AND propertyid = '$property'");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = $row['guest'];
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($i = 0; $i < count($r); $i++)
                {
                    $ro = new Room($subscriber);
                    $ro->Initialize($r[$i]);

                    array_push($ret[$i]->Rooms, $ro);
                }
            }

            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $ret[$i]->PlatformName = $row['platformName'];
            $ret[$i]->overdueCheckOut($row);
            $i++;
        }
        return $ret;
    }

    public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $res = $db->query("SELECT * FROM lodging WHERE propertyid = '$property' ORDER BY ".$field." ".$order."");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = $row['guest'];
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }

            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $ret[$i]->PlatformName = $row['platformName'];
            $ret[$i]->overdueCheckOut($row);
            $i++;
        }
        return $ret;
    }

    public static function All(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $res = $db->query("SELECT * FROM lodging WHERE propertyid = '$property'");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new CustomerByProperty($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $ret[$i]->PlatformName = $row['platformName'];
            $ret[$i]->overdueCheckOut($row);
            $i++;
        }
        return $ret;
    }

    //Hand crafted methods
    public static function inHouseCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];
        $res = $db->query("SELECT id FROM lodging WHERE checkedout=0 AND propertyid = '$property'")->num_rows;
        $db->close();

        return $res;
    }

    public static function checkInTodayCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];
        $t = strtotime(date("m/d/Y", time()));
        $res = $db->query("SELECT id FROM lodging WHERE checkin='$t' AND checkedout = 0 AND propertyid = '$property'")->num_rows;
        $db->close();

        return $res;
    }

    public static function GetGuest(Subscriber $subscriber, Customer $customer)
    {
        return new Guest($subscriber);
    }

    public static function isLodged(Subscriber $subscriber, Customer $customer)
    {
        if($customer->Id != "")
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static function Rooms(Subscriber $subscriber, Customer $customer)
    {
        if($customer->Id != "")
        {
            $rooms = [];
            $rooms[0] = new Room($subscriber);
            $rooms[0]->Number = "101";
            return $rooms;
        }
        else
        {
            return null;
        }
    }

    public function Lodgeddays()
    {

    }

    public function LodgedByPercentage()
    {

    }

    public static function dueToday(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $start = strtotime(date("m/d/Y"));
        $stop = (($start) + ((60 * 60) * 24));
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $res = $db->query("SELECT * FROM lodging WHERE checkout >= '$start' AND checkout < '$stop'");
        while(($row = $res->fetch_assoc()) != null)
        {
            if ($row['propertyid'] == $property) :

                $ret[$i] = new Lodging($subscriber);
                $ret[$i]->Id = $row['lodgingid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Guest = new CustomerByProperty($subscriber);
                $ret[$i]->Guest->Initialize($row['guest']);
                $ret[$i]->Subguest = json_decode($row['subguest']);

                $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
                $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

                $ret[$i]->Rooms = [];

                $r = json_decode($row['rooms']);

                if(is_array($r))
                {
                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new Lodgepixel($subscriber, $r[$j]);
                        array_push($ret[$i]->Rooms, $ro);
                    }
                }


                $ret[$i]->Checkin = new WixDate($row['checkin']);
                $ret[$i]->Checkout = new WixDate($row['checkout']);
                $ret[$i]->Days = Convert::ToInt($row['days']);
                $ret[$i]->Adults = Convert::ToInt($row['adults']);
                $ret[$i]->Children = Convert::ToInt($row['children']);
                $ret[$i]->Pet = Convert::ToBool($row['pet']);
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Total = doubleval($row['total']);
                $ret[$i]->Taxes = doubleval($row['taxes']);
                $ret[$i]->Discount = doubleval($row['discount']);
                $ret[$i]->Paidamount = doubleval($row['paidamount']);
                $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
                $ret[$i]->User = $row['user'];
                $ret[$i]->Checkouts = json_decode($row['checkouts']);
                $ret[$i]->Bills = doubleval($row['bills']);
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->overdueCheckOut($row);
                $i++;

            endif;
        }

        return $ret;
    }

    public static function overdue(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $date = strtotime(date("m/d/Y")) + ((60 * 60) * 24);

        $res = $db->query("SELECT * FROM lodging WHERE checkout >= '$date' AND checkedout=0");

        while(($row = $res->fetch_assoc()) != null)
        {
            if ($row['propertyid'] == $property) :

                $ret[$i] = new Lodging($subscriber);
                $ret[$i]->Id = $row['lodgingid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Guest = new CustomerByProperty($subscriber);
                $ret[$i]->Guest->Initialize($row['guest']);
                $ret[$i]->Subguest = json_decode($row['subguest']);
                $ret[$i]->Rooms = [];

                $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
                $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

                $r = json_decode($row['rooms']);

                if(is_array($r))
                {
                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new Lodgepixel($subscriber, $r[$j]);
                        array_push($ret[$i]->Rooms, $ro);
                    }
                }

                $ret[$i]->Checkin = new WixDate($row['checkin']);
                $ret[$i]->Checkout = new WixDate($row['checkout']);
                $ret[$i]->Days = Convert::ToInt($row['days']);
                $ret[$i]->Adults = Convert::ToInt($row['adults']);
                $ret[$i]->Children = Convert::ToInt($row['children']);
                $ret[$i]->Pet = Convert::ToBool($row['pet']);
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Total = doubleval($row['total']);
                $ret[$i]->Taxes = doubleval($row['taxes']);
                $ret[$i]->Discount = doubleval($row['discount']);
                $ret[$i]->Paidamount = doubleval($row['paidamount']);
                $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
                $ret[$i]->User = $row['user'];
                $ret[$i]->Checkouts = json_decode($row['checkouts']);
                $ret[$i]->Bills = doubleval($row['bills']);
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->overdueCheckOut($row);
                $i++;

            endif;
        }
        return $ret;
    }

    public static function CalculateAndAddExtraFee(Subscriber $subscriber, $lodgingID)
    {
        // get all overdues
        $lodging = new Lodging($subscriber);
        $lodging->Initialize($lodgingID);

        // get today
        // $today = new DateTime();
        $today=date_create();
        // get db
        $db = DB::GetDB();

        // add bill
        $bill = 0;

        // get propertyid
        $propertyid = addslashes($_REQUEST['propertyid']);

        // get property information
        $property = $db->query("SELECT * FROM property WHERE propertyid = '$propertyid'")->fetch_assoc();

        // ok
        // get days diffrence
        // $checkOut = new DateTime($lodging->Checkout->Month . '/' . $lodging->Checkout->Day . '/' . $lodging->Checkout->Year);
        $checkOut=date_create($lodging->Checkout->Year . '/' . $lodging->Checkout->Month . '/' . $lodging->Checkout->Day);
        // calculate diff
        $diff = $today->diff($checkOut);

        // get days
        $days = $diff->d;

        // get hours
        $hours = $diff->h;

        $roomRate = 0;

        $checkIn=date_create($lodging->Checkin->Year . '/' . $lodging->Checkin->Month . '/' . $lodging->Checkin->Day);

        $nights_spent = $checkIn->diff($checkOut);
        $total = $lodging->BaseTotal == 0 ? $lodging->Total : $lodging->BaseTotal;
        
        $roomRate = ($total - $lodging->Discount) / $nights_spent->d;

        // return ['newRate' => round($roomRate, 2)];

        // calculate for days
        if ($days > 0)
        {
            for ($x=0; $x < $days; $x++)
            {
                foreach ($lodging->Rooms as $room)
                {
                    if ($room->Checkedout == false) $bill += floatval($room->Category->Price);
                }
            }
        }

        // calculate for hours
        if ($hours >= 12)
        {
            if ($property['late_checkout_rules'] != null)
            {
                // get array
                $checkOutRule = json_decode($property['late_checkout_rules']);

                // get hour
                $hour = intval(date('H'));

                // get minute
                $min = intval(date('i'));
                
                // run
                foreach ($checkOutRule as $rule)
                {
                    // get from 
                    list($fromHour, $fromMin) = explode(':', $rule->from);

                    // get to
                    list($toHour, $toMin) = explode(':', $rule->to);

                    // make int
                    $fromHour = intval($fromHour);
                    $toHour = intval($toHour);

                    // make int 
                    $fromMin = intval($fromMin);
                    $toMin = intval($toMin);

                    // adjust from hour
                    $fromHour = $fromHour < 12 ? ($fromHour + 12) : $fromHour;

                    // adjust to hour
                    $toHour = $toHour < 12 ? ($toHour + 12) : $toHour;

                    // check now
                    if ($hour >= $fromHour && $hour <= $toHour)
                    {
                        // @var bool $canBill
                        $canBill = true;

                        // check end
                        if ($hour == $toHour)
                        {
                            // check minute
                            if ($min > $toMin)
                            {
                                $canBill = false;
                            }
                        }
                        elseif ($hour == $fromHour)
                        {
                            if ($min < $fromMin)
                            {
                                $canBill = false;
                            }
                        }

                        // can we bill
                        if ($canBill)
                        {
                            $billAmount = ($roomRate * $rule->amount/100);
                            $bill += floatval($billAmount);
                        }
                    }
                }
            }
        }

        // add full bill
        if ($bill == 0)
        {
            foreach ($lodging->Rooms as $room)
            {
                //if (is_object($room->Category) && $room->Checkedout == false) $bill += floatval($room->Category->Price);
            }
        }

        // update total
        // $lodging->Total = 0;

        // has bill?
        if ($bill > 0) :

            // check base total
            if ($lodging->BaseTotal == 0)
            {
                // update base total with total
                $lodging->BaseTotal = $lodging->Total;
            }

            // update total
            $lodging->Total = ($bill + $lodging->BaseTotal);

            // save now
            $lodging->Save();

        endif;

        // return bill
        return $lodging->Total + $lodging->Bills;
    }

    public static function toDaysCheckin(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $date = strtotime(date("m/d/Y"));
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $res = $db->query("SELECT * FROM lodging WHERE checkin = '$date' and propertyid = '$property'");

        while (($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new CustomerByProperty($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Room($subscriber);
                    $ro->Initialize($r[$j]);

                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $ret[$i]->PlatformName = $row['platformName'];
            $ret[$i]->overdueCheckOut($row);
            $i++;
        }
        return $ret;
    }

    public static function byPeriod(Subscriber $subscriber, $start=null, $stop=null)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        // can we fetch for this month only
        $fetchForThisMonth = $start == FETCH_FOR_THIS_MONTH_ONLY ? true : false;

        // update start
        $start = ($fetchForThisMonth) ? null : $start;

        if($start == null)
        {
            $start = time();
        }

        if($stop == null)
        {
            $stop = $start + (((60 * 60) * 24) * 30);
        }

        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        // build query string
        $queryString = "SELECT * FROM lodging WHERE propertyid = '$property'";

        // get the first day of this month
        $dayStart = strtotime(date('m') . '/1/' . date('Y'));

        // start from last 2 months
        $dayStart = strtotime(date('m/d/Y', $dayStart) . ' - 2 months');

        // get next month
        $nextMonth = intval(date('m', strtotime('+1 month')));

        // get year for next month
        $nextMonthYear = $nextMonth < intval(date('m')) ? (intval(date('Y')) + 1) : intval(date('Y'));

        // get the last day of next month
        $dayEnd = strtotime( $nextMonth . '/' . date('t', strtotime('+1 month')) . '/' . $nextMonthYear);

        // can we fetch for this month only
        $queryString .= ($fetchForThisMonth) ? "AND (checkin >= '$dayStart' AND checkin <= '$dayEnd')" : '';
        //$queryString .= ($fetchForThisMonth) ? "" : '';
        
        //$res = $db->query("SELECT * FROM lodging WHERE checkin >= '$start' AND checkout <= '$stop'");

        $res = $db->query($queryString);
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new CustomerByProperty($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);

            //$ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            //$ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            if($ret[$i]->Guest->Id == "")
            {
                $ret[$i]->Guest = new CustomerByProperty($subscriber);
                $ret[$i]->Guest->Initialize($row['guest']);
            }
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $r = json_decode($row['rooms']);

            if (is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    if ($r[$j]->Id == '') :

                        // @var mixed $bookingNumber
                        $bookingNumber = $row['booking'];

                        // find reservation id from reservation with booking number
                        $reservation = $db->query("SELECT rooms FROM reservation WHERE booking = '$bookingNumber'");

                        // are we good ?
                        if ($reservation->num_rows > 0) :

                            // fetch 
                            $fetch = json_decode($reservation->fetch_assoc()['rooms'])[0];

                            // get number
                            $number = $fetch->number;

                            // get room categoryid
                            $categoryId = $fetch->room;

                            // get roomid
                            $roomId = $db->query("SELECT roomid FROM room WHERE `number` = '$number' AND category  = '$categoryId'");

                            // are we good 
                            if ($roomId->num_rows > 0) :

                                // feetch result
                                $roomId = $roomId->fetch_assoc()['roomid'];

                                // add id
                                $r[$j]->Id = $roomId;

                            endif;

                        endif;

                    endif;

                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkoutdate = new WixDate($row['checkout_date']);
            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $ret[$i]->PlatformName = $row['platformName'];
            $ret[$i]->overdueCheckOut($row);
            $i++;
        }
        return $ret;
    }

    public static function applyFilter(Subscriber $subscriber, $filter, $duedate)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $d = new WixDate($duedate);
        $dDate = $duedate != "" ? strtotime($d->Month."/".$d->Day."/".$d->Year) : "";

        $today = strtotime(date("m/d/Y", time()));
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];
        $time = mktime(12,0,1,date('n'),date('j'),date('Y'));


        if ($duedate == "")
        {
            if($filter === "all")
            {
                $res = $db->query("SELECT * FROM lodging WHERE propertyid = '$property' AND checkedout=0 ORDER BY id DESC");
            }
            else if($filter === "due-departure")
            {
                $res = $db->query("SELECT * FROM lodging WHERE checkout='$today' AND checkedout=0 ORDER BY id DESC");
            }
            else if($filter === "overdue-departure")
            {
                $res = $db->query("SELECT * FROM lodging WHERE checkout < '$time' AND checkedout=0 ORDER BY id DESC");
            }
            else if($filter === "arrived-today")
            {
                $res = $db->query("SELECT * FROM lodging WHERE checkin='$today' AND propertyid = '$property' ORDER BY id DESC");
            }
        }
        else
        {
            $extra = $_REQUEST['dueDateTo'] == '' ? "checkout='$dDate' AND" : '';

            // make request
            $res = $db->query("SELECT * FROM lodging WHERE $extra propertyid = '$property' ORDER BY id DESC");
        }

        while(($row = $res->fetch_assoc()) != null)
        {
            if ($row['propertyid'] == $property) :

                // @var bool $continue 
                $continue = true;

                // build time
                $time = mktime(12,0,1,date('n', $row['checkout']),date('j', $row['checkout']),date('Y', $row['checkout']));

                // is this guest really overdue
                if ($filter === 'overdue-departure') :
                    if (time() < $time) $continue = false;
                endif;

                // found a range?
                if ($_REQUEST['dueDateTo'] != '')
                {
                    $continue = self::canShowReservation($row);
                }

                // can we continue
                if ($continue === true) :

                    $ret[$i] = new Lodging($subscriber);
                    $ret[$i]->Id = $row['lodgingid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Guest = new CustomerByProperty($subscriber);
                    $ret[$i]->Guest->Initialize($row['guest']);

                    $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
                    $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

                    if($ret[$i]->Guest->Id == "")
                    {
                        $ret[$i]->Guest = new CustomerByProperty($subscriber);
                        $ret[$i]->Guest->Initialize($row['guest']);
                    }
                    $ret[$i]->Subguest = json_decode($row['subguest']);
                    $ret[$i]->Rooms = [];

                    $r = json_decode($row['rooms']);

                    if(is_array($r))
                    {
                        for($j = 0; $j < count($r); $j++)
                        {
                            // check for id
                            if ($r[$j]->Id == '') :

                                // @var mixed $bookingNumber
                                $bookingNumber = $row['booking'];

                                // find reservation id from reservation with booking number
                                $reservation = $db->query("SELECT rooms FROM reservation WHERE booking = '$bookingNumber'");

                                // are we good ?
                                if ($reservation->num_rows > 0) :

                                    // fetch 
                                    $fetch = json_decode($reservation->fetch_assoc()['rooms'])[0];

                                    // get number
                                    $number = $fetch->number;

                                    // get room categoryid
                                    $categoryId = $fetch->room;

                                    // get roomid
                                    $roomId = $db->query("SELECT roomid FROM room WHERE `number` = '$number' AND category  = '$categoryId'");

                                    // are we good 
                                    if ($roomId->num_rows > 0) :

                                        // feetch result
                                        $roomId = $roomId->fetch_assoc()['roomid'];

                                        // add id
                                        $r[$j]->Id = $roomId;

                                    endif;

                                endif;

                            endif;

                            // load lodgepixel
                            $ro = new Lodgepixel($subscriber, $r[$j]);
                            array_push($ret[$i]->Rooms, $ro);
                        }
                    }

                    $ret[$i]->Checkin = new WixDate($row['checkin']);
                    $ret[$i]->Checkout = new WixDate($row['checkout']);
                    $ret[$i]->Days = Convert::ToInt($row['days']);
                    $ret[$i]->Adults = Convert::ToInt($row['adults']);
                    $ret[$i]->Children = Convert::ToInt($row['children']);
                    $ret[$i]->Pet = Convert::ToBool($row['pet']);
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Total = doubleval($row['total']);
                    $ret[$i]->Taxes = doubleval($row['taxes']);
                    $ret[$i]->Discount = doubleval($row['discount']);
                    $ret[$i]->Paidamount = doubleval($row['paidamount']);
                    $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
                    $ret[$i]->User = $row['user'];
                    $ret[$i]->Checkouts = json_decode($row['checkouts']);
                    $ret[$i]->Bills = doubleval($row['bills']);
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->PlatformName = $row['platformName'];
                    $ret[$i]->getReservationID($row, $db);
                    $ret[$i]->overdueCheckOut($row);
                    $i++;

                endif;

            endif;
        }
        return $ret;
    }

    public function overdueCheckOut($row) : void
    {
        // @var int $time
        $time = strtotime(date("m/d/Y g:i:s a"));

        // check now
        if (intval($row['checkout']) < $time)
        {
            // build time
            $time = mktime(12,0,1,date('n', $row['checkout']), date('j', $row['checkout']), date('Y', $row['checkout']));

            // is overdue ?
            if (time() > $time) $this->IsOverdue = true;
        }
    }

    public static function overdueCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];
        $time = strtotime(date("m/d/Y g:i:s a"));
        $count = 0;
        $res = $db->query("SELECT checkout FROM lodging WHERE propertyid = '$property' AND checkout < '$time' AND checkedout=0");

        // do we have something ??
        if ($res->num_rows > 0) :

            while (($row = $res->fetch_assoc()) != null) :

                // build time
                $time = mktime(12,0,1,date('n', $row['checkout']), date('j', $row['checkout']), date('Y', $row['checkout']));

                // over due
                if (time() > $time) $count++;
                
            endwhile;

        endif;

        $db->close();
        return $count;
    }

    public static function dueTodayCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $date = strtotime(date("m/d/Y"));
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];
        $res = $db->query("SELECT * FROM lodging WHERE checkout = '$date' AND checkedout = 0 AND propertyid = '$property'")->num_rows;
        $db->close();
        return $res;
    }

    public static function checkAvailability()
    {
        // @var array $lists 
        $lists = json_decode($_REQUEST['list']);

        // @var string $property
        $property = $_REQUEST['propertyid'];

        // @var Subscriber $subscriber
        $subscriber = new Subscriber();

        // get db
        $db = $subscriber->GetDB();

        // check lodging
        $query = $db->query("SELECT rooms FROM lodging WHERE propertyid = '$property' AND checkedout = 0");

        // are we good ?
        if ($query->num_rows > 0) :

            // ilterate table
            while(($row = $query->fetch_assoc()) !== null) :

                // get rooms
                $rooms = json_decode($row['rooms']);

                // run through
                foreach ($rooms as $room) :

                    // checked out
                    if ($room->Checkedout == 0) :

                        // run list
                        foreach ($lists as $list) :

                            // get room id 
                            $roomTable = $db->query("SELECT roomid FROM room WHERE `number` = '{$list->room}' AND propertyid = '$property'");

                            // do we have a record?
                            if ($roomTable->num_rows > 0) :

                                // get record
                                $roomTable = $roomTable->fetch_assoc();

                                // match room id
                                if ($roomTable['roomid'] == $room->Id) :

                                    // get checkout
                                    $checkoutInLodging = strtotime(date('d/m/Y', $room->Checkout));

                                    // get checkout from list
                                    $checkoutFromList = strtotime(date('d/m/Y', $list->checkout));
                                    
                                    // check date
                                    var_dump(20);

                                endif;

                            endif;

                        endforeach;

                    endif;
                    
                endforeach;

            endwhile;

        endif;  


        die;
    }

    // can we show this reservation?
    private static function canShowReservation($row) : bool
    {
        // @var bool $canAdd
        $canAdd = false;

        // get date
        $dateTime = new DateTime((isset($_REQUEST['dueDate']) ? $_REQUEST['dueDate'] : ''));

        // created date
        //if (date('d/m/Y', $row['created']) == $dateTime->format('d/m/Y')) $canAdd = true;
        // get last 30 days
        $last30Days = strtotime('today - 30 days');

        // manage range
        if (isset($_REQUEST['dueDate']) && isset($_REQUEST['dueDateTo']))
        {
            // can we add
            if ($canAdd === false)
            {
                // only proceed if date range exists
                if ($_REQUEST['dueDate'] != '' && $_REQUEST['dueDateTo'] != '')
                {
                    // get date time 2
                    $dateTime2 = new DateTime(date('m/d/Y', $row['checkin']));

                    // build time for range
                    $rangeTime = new DateTime($_REQUEST['dueDateTo']);

                    // check now
                    if ($dateTime2->getTimestamp() <= $rangeTime->getTimestamp() && $dateTime2->getTimestamp() >= $dateTime->getTimestamp()) $canAdd = true;
                }
                else
                {
                    if (intval($row['checkin']) >= $last30Days) $canAdd = true;
                }
            }
        }

        // return bool
        return $canAdd;
    }

    public static function occupancyReport(Subscriber $subscriber, $start=null, $stop=null)
    {
        $db = $subscriber->GetDB();
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        $queryString = "SELECT CONCAT(user.name,' ' ,user.surname) AS staff,
        lodging.*, CONCAT(customer.name,' ', customer.surname) AS fullname
        FROM user 
        JOIN lodging ON user.userid = lodging.user 
        JOIN customer ON lodging.guest = customer.customerid
        WHERE lodging.propertyid = '$property' AND lodging.checkin <= '$stop' AND lodging.checkout >= '$start'";
        // WHERE lodging.checkin >= $start AND lodging.checkout <= $stop";
        // JOIN customer ON reservation.customer = customer.customerid";

        $res = $db->query($queryString);
        $data = array();
        $i = 1; 
        while(($row = $res->fetch_assoc()) != null)
        {
            $lodging = (object)null;
            $lodging->sn = $i;
            $lodging->data = $row;
            $lodging->rooms = json_decode($row['rooms']);

            $data[] = $lodging;
            $i++;
        }

        $lodgingData = [];
        foreach ($data as $item) {
            if(count($item->rooms) > 0){
                $roomId = $item->rooms[0]->Id;
                $sql = "SELECT roomcategory.name, room.number from room 
                        JOIN roomcategory 
                        ON room.category = roomcategory.roomcategoryid
                        WHERE room.roomid = '$roomId'";

                $query = $db->query($sql);
                while(($row = $query->fetch_assoc()) != null):
                    $category = $row['name']; 
                    $number = $row['number']; 
                endwhile;
                

                $obj = (object)null;
                $obj->fullname = $item->data['fullname'];
                $obj->staff = $item->data['staff'];
                $obj->room_number = $number;
                $obj->room_category = $category;
                $obj->bill = doubleval($item->data['bills']);
                $obj->checkin_date = new WixDate($item->data['checkin']);
                $obj->checkout_date = new WixDate($item->data['checkout']);
                $obj->actual_checkoutdate = new WixDate($item->data['checkout_date']);
                $obj->created = new WixDate($item->data['created']);
                $obj->discount = doubleval($item->data['discount']);
                $obj->paidamount = doubleval($item->data['paidamount']);
                $obj->total = doubleval($item->data['total']);
                $lodgingData[] = $obj;
            }
        }
        return $lodgingData;

    }

    public static function checkinReport(Subscriber $subscriber, $start=null, $stop=null)
    {
        $db = $subscriber->GetDB();
        $property = isset($_REQUEST['propertyid']) ? $_REQUEST['propertyid'] : $_REQUEST['property'];

        // $param =  isset($start) && isset($stop) ? "AND checkin >= '$start' AND checkin <= '$stop'" : "";        
        
        $queryString = "SELECT * FROM lodging WHERE propertyid = '$property'";
        $queryString .= isset($start) && isset($stop) ? "AND checkin >= '$start' AND checkin <= '$stop'" : "";

        $res = $db->query($queryString);
        $data = array();
        $booking = null;
        while(($row = $res->fetch_assoc()) != null)
        {
            $lodging = (object)null;
            $lodging->data = $row;
            $lodging->rooms = json_decode($row['rooms']);
            $booking = $row['booking']; 

            $data[] = $lodging;
        }

        $lodgingData = [];
        $i = 1;
        foreach ($data as $item) {
            if(count($item->rooms) > 0){
                $roomId = $item->rooms[0]->Id;
                $sql = "SELECT roomcategory.name, room.number from room 
                        JOIN roomcategory 
                        ON room.category = roomcategory.roomcategoryid
                        WHERE room.roomid = '$roomId'";

                $query = $db->query($sql);
                while(($row = $query->fetch_assoc()) != null):
                    $category = $row['name']; 
                    $number = $row['number']; 
                endwhile;

                $checkin_date = new WixDate($item->data['checkin']);
                $checkout_date = new WixDate($item->data['checkout']);

                $checkIn=date_create($checkin_date->Year . '/' . $checkin_date->Month . '/' . $checkin_date->Day);
                $checkOut=date_create($checkout_date->Year . '/' . $checkout_date->Month . '/' . $checkout_date->Day);

                $nights_spent = $checkIn->diff($checkOut);

                $obj = (object)null;
                $obj->sn = $i;
                $obj->booking = $item->data['booking'];
                $obj->staff = new User($item->data['user']);
                $obj->room_number = $number;
                $obj->period = $nights_spent->d;
                $obj->room_category = $category;
                $obj->bill = doubleval($item->data['bills']);
                $obj->checkin_date = $checkin_date;
                $obj->actual_checkoutdate = new WixDate($item->data['checkout_date']);
                $obj->created = new WixDate($item->data['created']);
                $obj->discount = doubleval($item->data['discount']);
                $obj->paidamount = doubleval($item->data['paidamount']);
                $obj->total = doubleval($item->data['total']);
                $obj->payment_modes = ['Pos', 'Transfer', 'Others', 'Cash', 'Online'];
                $lodgingData[] = $obj;
                $i++;
            }
        }

        foreach ($lodgingData as $data) {
            $booking = $data->booking;

            $qu = $db->query("SELECT * from reservation WHERE booking = '$booking'");
            while(($rowData = $qu->fetch_assoc()) != null):
                $reservation_id = $rowData['reservationid']; 
                $platform = $rowData['platformName']; 
            endwhile;

            // GET REVENUE DATA
            $statement = "SELECT amount, payment_mode from revenue WHERE reservationid = '$reservation_id' OR booking_no = '$booking'";

            $revenueData = [];
            $queryRevenue = $db->query($statement);
            while(($row = $queryRevenue->fetch_assoc()) != null):
                $revenueData[] = $row;
            endwhile;

            $data->revenueData = $revenueData;
            $data->platform = $platform;
        }

        return $lodgingData;
    }

    public static function Checkout(Subscriber $subscriber, $id = null, $useReservationDate = false)
    {
        $lodging = new Lodging($subscriber);
        $identifier = isset($id) ? $id : $_REQUEST['booking'];
        $lodging->Initialize($identifier);
        $lodging->Checkedout = true;
        $todayDate = strtotime(date("m/d/Y H:i:s", time()));

        $booking = $lodging->Bookingnumber;
        
        $reservation = new Reservation($booking);
        $checkout = $reservation->Checkoutdate;

        // $test = isset($lodging->Bookingnumber) ? $lodging->Bookingnumber : $id;
        // return $identifier;
        $outdate = strtotime($checkout->Month."/".$checkout->Day."/".$checkout->Year);  
        
        // if true use reservation checkout date, else use today's date
        $out_date = $useReservationDate ? new WixDate($outdate) : new WixDate($todayDate);
        
        $lodging->Checkoutdate = $out_date;

        for($i = 0; $i < count($lodging->Rooms); $i++)
        {
            if(($lodging->Rooms[$i]->Category->Name === $_REQUEST['category']) || ($lodging->Rooms[$i]->Number == $_REQUEST['room']))
            {
                $lodging->Rooms[$i]->Checkedout = true;
                $lodging->Rooms[$i]->Checkout = $out_date;
                $lodging->Rooms[$i]->Checkouttime = $out_date;
                $lodging->User = $_REQUEST['posuser'];
                $lodging->Save();

                break;
            }
        }
    } 

    public static function SendRefundRequest($reservationid)
    {
        $reservation = new Reservation($reservationid);
                            
        // log for approval
        if (isset($_REQUEST['payment_method']) && isset($_REQUEST['message']))
        {
            $payment_method = $_REQUEST['payment_method'];
            $bankname = isset($_REQUEST['bankname']) ? $_REQUEST['bankname'] : '';
            $acc_name = isset($_REQUEST['acc_name']) ? $_REQUEST['acc_name'] : '';
            $acc_number = isset($_REQUEST['acc_number']) ? $_REQUEST['acc_number'] : '';

            if(!empty($_REQUEST['others_option']))
            {
                $payment_method = $_REQUEST['others_option'];
            }

            $reservation->RefundPaymentCondition = json_encode([
                'method'   => $payment_method,
                'message'  => $_REQUEST['message'],
                'loggedBy' => $_REQUEST['posuser'],
                'bank'     => $bankname,
                'acc_name'     => $acc_name,
                'acc_number'     => $acc_number,
            ]);
        }

        $reservation->Save();

        if ($reservation->IsOnline == 1)
        {
            // send confirmation email
            $reservation->sendConfirmationMail();
        }
    }

    public static function lodgingCanBeProcessed(Subscriber $subscriber, object &$room)
    {
        // @var boolean $CanBeProcessed
        $CanBeProcessed = false;

        // get room category and number
        $roomList = [];

        $items = explode(",", $_REQUEST['items']);

        for ($i = 0; $i < count($items); $i++) :
        
            $r = explode(":", $items[$i]);

            if (count($r) > 3)
            {
                $cat = new Roomcategory($subscriber);
                $cat->Initialize($r[0]);

                $std = new stdClass();
                $std->Number = $r[2];
                $std->Room = $cat;
                $std->RoomId = $r[0];

                array_push($roomList, $std);
            }

        endfor;

        // get yesterday timestamp
        // $lastMonth = strtotime(date('m/d/Y', strtotime('last month')));
        $yesterday = strtotime(date('m/d/Y', strtotime('yesterday')));

        // get the room
        $room = $roomList[0];

        // generate sql statement
        $sqlStatement = "SELECT * FROM `reservation` WHERE property = '{$room->Room->Property->Id}' AND checkedin = 1 AND checkedout = 0 AND (rooms LIKE '%{$room->Room->Id}%' AND rooms LIKE '%{$room->Number}%')";

        // var_dump($sqlStatement);

        // get database instance
        $db = $subscriber->GetDB();

        // run query
        $query = $db->query($sqlStatement);

        // @var int $found
        $found = 0;

        // can we run through
        if ($query->num_rows > 0) while ($row = $query->fetch_assoc()) :

            // read rooms json string
            $rooms = json_decode(stripslashes($row['rooms']));

            // array ??
            if (is_array($rooms)) :

                // get category and room number
                if ($rooms[0]->room == $room->Room->Id && $rooms[0]->number == $room->Number) $found++;

            endif;

        endwhile;

        // var_dump($found);

        // check found
        if ($found == 0) $CanBeProcessed = true;

        // return boolean
        return $CanBeProcessed;
    }
}
