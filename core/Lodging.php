<?php
/* Generated by Wixnit Class Builder
// Mar, 11/2020
// Building class for Lodging
*/

class Lodging
{
    public $Id = "";
    public $Created = 0;
    public $Guest = "";
    public $Subguest = array();
    public $Rooms = [];
    public $Checkin = 0;
    public $Checkout = 0;
    public $Days = 0;
    public $Adults = 0;
    public $Children = 0;
    public $Pet = false;
    public $Paid = false;
    public $Total = 0;
    public $Taxes = 0;
    public $Discount = 0;
    public $Paidamount = 0;
    public $Roomcategory = array();
    public $User = "";
    public $Checkouts = array();
    public $Bills = 0.0;
    public $Bookingnumber = "";
    public $Checkincount = 0;
    public $Checkoutcount = 0;
    public $Checkedout = false;

    private $subscriber = null;

    function __construct(Subscriber $subscriber)
    {
        $this->subscriber = $subscriber;
    }

    public function Initialize($arg=null)
    {
        if($arg != null)
        {
            $db = $this->subscriber->GetDB();

            $res = $db->query("SELECT * FROM lodging WHERE lodgingid='$arg'");

            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $this->Id = $row['lodgingid'];
                $this->Created = new WixDate($row['created']);
                $this->Guest = new Customer($this->subscriber);
                $this->Guest->Initialize($row['guest']);
                $this->Subguest = [];

                $this->Checkincount = Convert::ToInt($row['checkincount']);
                $this->Checkoutcount = Convert::ToInt($row['checkoutcount']);
                $this->Checkedout = Convert::ToBool($row['checkedout']);

                $guest = json_decode($row['subguest']);
                for($i = 0; $i < count($guest); $i++)
                {
                    if($guest[$i] != "")
                    {
                        $g = new Subguest($this->subscriber);
                        $g->Initialize($guest[$i]);

                        array_push($this->Subguest, $g);
                    }
                }



                $this->Rooms = [];

                $r = json_decode($row['rooms']);

                if(is_array($r))
                {
                    for($i = 0; $i < count($r); $i++)
                    {
                        $ro = new Lodgepixel($this->subscriber, $r[$i]);
                        array_push($this->Rooms, $ro);
                    }
                }



                $this->Checkin = new WixDate($row['checkin']);
                $this->Checkout = new WixDate($row['checkout']);
                $this->Days = Convert::ToInt($row['days']);
                $this->Adults = Convert::ToInt($row['adults']);
                $this->Children = Convert::ToInt($row['children']);
                $this->Pet = Convert::ToBool($row['pet']);
                $this->Paid = Convert::ToBool($row['paid']);
                $this->Total = doubleval($row['total']);
                $this->Taxes = doubleval($row['taxes']);
                $this->Discount = doubleval($row['discount']);
                $this->Paidamount = doubleval($row['paidamount']);
                $this->Bills = doubleval($row['bills']);
                $this->Bookingnumber = $row['booking'];

                $this->Roomcategory = [];
                $rcat = json_decode($row['roomcategory']);
                for($i = 0; $i < count($rcat); $i++)
                {
                    if($rcat[$i] != "")
                    {
                        $r = new Roomcategory($this->subscriber);
                        $r->Initialize($rcat[$i]);

                        array_push($this->Roomcategory, $r);
                    }
                }


                $this->User = new User($this->subscriber);
                $this->User->Initialize($row['user']);

                $this->Checkouts = [];
                $dates = json_decode($row['checkouts']);
                for($i = 0; $i < count($dates); $i++)
                {
                    if($dates[$i] != "")
                    {
                        array_push($this->Checkouts, new WixDate($dates[$i]));
                    }
                }
            }
        }
    }

    public function Save()
    {
        $db = $this->subscriber->GetDB();

        $id = $this->Id;
        $created = time();
        $guest = addslashes(is_a($this->Guest, "Customer") ? $this->Guest->Id : $this->Guest);
        $subguest = "[]";
        $rooms = "[]";
        $checkin = Convert::ToInt($this->Checkin);
        $checkout = Convert::ToInt($this->Checkout);
        $days = Convert::ToInt($this->Days);
        $adults = Convert::ToInt($this->Adults);
        $children = Convert::ToInt($this->Children);
        $pet = Convert::ToInt($this->Pet);
        $paid = Convert::ToInt($this->Paid);
        $total = floatval($this->Total);
        $taxes = floatval($this->Taxes);
        $discount = floatval($this->Discount);
        $paidamount = floatval($this->Paidamount);
        $roomcategory = addslashes(json_encode(is_a($this->Roomcategory, "Roomcategory") ? $this->Roomcategory->GetArray() : $this->Roomcategory));
        $user = addslashes(is_a($this->User, "User") ? $this->User->Id : $this->User);
        $checkouts = "[]";

        $checkincount = Convert::ToInt($this->Checkincount);
        $checkoutcount = Convert::ToInt($this->Checkoutcount);
        $checkedout = Convert::ToInt($this->Checkedout);


        $booking = addslashes($this->Bookingnumber);

        $bills = doubleval($this->Bills);


        $ck = [];
        for($i = 0; $i < count($this->Checkouts); $i++)
        {
            array_push($ck, Convert::ToInt($this->Checkouts));
        }
        $checkouts = json_encode($ck);


        $sg = [];
        for($i = 0; $i < count($this->Subguest); $i++)
        {
            array_push($sg, is_a($this->Subguest[$i], "Subguest") ? $this->Subguest[$i]->Id : $this->Subguest[$i]);
        }
        $subguest = json_encode($sg);


        $rms = [];
        for($i = 0; $i < count($this->Rooms); $i++)
        {
            array_push($rms, is_a($this->Rooms[$i], "Lodgepixel") ? $this->Rooms[$i]->Pixelate() : $this->Rooms[$i]->Id);
        }
        $rooms = json_encode($rms);


        if($res = $db->query("SELECT lodgingid FROM lodging WHERE lodgingid='$id'")->num_rows > 0)
        {
            $db->query("UPDATE lodging SET guest='$guest',subguest='$subguest',rooms='$rooms',checkin='$checkin',checkout='$checkout',days='$days',adults='$adults',children='$children',pet='$pet',paid='$paid',total='$total',taxes='$taxes',discount='$discount',paidamount='$paidamount',roomcategory='$roomcategory',user='$user',checkouts='$checkouts',bills='$bills',booking='$booking',checkincount='$checkincount',checkoutcount='$checkoutcount',checkedout='$checkedout' WHERE lodgingid = '$id'");
        }
        else
        {
            redo: ;
            $id = Random::GenerateId(16);
            if($db->query("SELECT lodgingid FROM lodging WHERE lodgingid='$id'")->num_rows > 0)
            {
                goto redo;
            }
            $this->Id = $id;
            $db->query("INSERT INTO lodging(lodgingid,created,guest,subguest,rooms,checkin,checkout,days,adults,children,pet,paid,total,taxes,discount,paidamount,roomcategory,user,checkouts,bills,booking,checkincount,checkoutcount,checkedout) VALUES ('$id','$created','$guest','$subguest','$rooms','$checkin','$checkout','$days','$adults','$children','$pet','$paid','$total','$taxes','$discount','$paidamount','$roomcategory','$user','$checkouts','$bills','$booking','$checkincount','$checkoutcount','$checkedout')");
        }
    }

    public function Delete()
    {
        $db = $this->subscriber->GetDB();

        $id = $this->Id;
        $db->query("DELETE FROM lodging WHERE lodgingid='$id'");

        //Deleting Associated Objects
        /*n			$this->Guest->Delete();

        $this->Subguest->Delete();

        $this->Rooms->Delete();

        $this->Roomcategory->Delete();

        $this->User->Delete();
        */
    }

    public static function Search(Subscriber $subscriber, $term='')
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $res = $db->query("SELECT lodgingid FROM lodging WHERE guest LIKE '%$term%' OR subguest LIKE '%$term%' OR rooms LIKE '%$term%' OR checkin LIKE '%$term%' OR checkout LIKE '%$term%' OR days LIKE '%$term%' OR adults LIKE '%$term%' OR children LIKE '%$term%' OR pet LIKE '%$term%' OR paid LIKE '%$term%' OR total LIKE '%$term%' OR taxes LIKE '%$term%' OR discount LIKE '%$term%' OR paidamount LIKE '%$term%' OR roomcategory LIKE '%$term%' OR user LIKE '%$term%' OR checkouts LIKE '%$term%'");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }

            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function Filter(Subscriber $subscriber, $term='', $field='lodgingid')
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $res = $db->query("SELECT * FROM lodging WHERE ".$field." ='$term'");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = $row['guest'];
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($i = 0; $i < count($r); $i++)
                {
                    $ro = new Room($subscriber);
                    $ro->Initialize($r[$i]);

                    array_push($ret[$i]->Rooms, $ro);
                }
            }

            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $res = $db->query("SELECT * FROM lodging ORDER BY ".$field." ".$order."");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = $row['guest'];
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }

            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function All(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $res = $db->query("SELECT * FROM lodging");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    //Hand crafted methods

    public static function inHouseCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $res = $db->query("SELECT id FROM lodging WHERE checkedout=0")->num_rows;
        $db->close();

        return $res;
    }

    public static function checkInTodayCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;
        $t = strtotime(date("m/d/Y", time()));
        $res = $db->query("SELECT id FROM lodging WHERE checkin='$t'")->num_rows;
        $db->close();

        return $res;
    }

    public static function GetGuest(Subscriber $subscriber, Customer $customer)
    {
        return new Guest($subscriber);
    }

    public static function isLodged(Subscriber $subscriber, Customer $customer)
    {
        if($customer->Id != "")
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public static function Rooms(Subscriber $subscriber, Customer $customer)
    {
        if($customer->Id != "")
        {
            $rooms = [];
            $rooms[0] = new Room($subscriber);
            $rooms[0]->Number = "101";
            return $rooms;
        }
        else
        {
            return null;
        }
    }

    public function Lodgeddays()
    {

    }

    public function LodgedByPercentage()
    {

    }

    public static function dueToday(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $start = strtotime(date("m/d/Y"));
        $stop = (($start) + ((60 * 60) * 24));

        $res = $db->query("SELECT * FROM lodging WHERE checkout >= '$start' AND checkout < '$stop'");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $ret[$i]->Rooms = [];

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function overdue(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $date = strtotime(date("m/d/Y")) + ((60 * 60) * 24);

        $res = $db->query("SELECT * FROM lodging WHERE checkout >= '$date' AND checkedout=0");

        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }

            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function toDaysCheckin(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $date = strtotime(date("m/d/Y"));

        $res = $db->query("SELECT * FROM lodging WHERE checkin = '$date'");

        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Room($subscriber);
                    $ro->Initialize($r[$j]);

                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function byPeriod(Subscriber $subscriber, $start=null, $stop=null)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        if($start == null)
        {
            $start = time();
        }
        if($stop == null)
        {
            $stop = $start + (((60 * 60) * 24) * 30);
        }

        $res = $db->query("SELECT * FROM lodging WHERE checkin >= '$start' AND <= '$stop'");

        $res = $db->query("SELECT * FROM lodging");
        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);

            //$ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            //$ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            if($ret[$i]->Guest->Id == "")
            {
                $ret[$i]->Guest = new Customer($subscriber);
                $ret[$i]->Guest->Initialize($row['guest']);
            }
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function applyFilter(Subscriber $subscriber, $filter, $duedate)
    {
        $db = $subscriber->GetDB();
        $ret = array();
        $i = 0;

        $d = new WixDate($duedate);
        $dDate = $duedate != "" ? strtotime($d->Month."/".$d->Day."/".$d->Year) : "";

        $today = strtotime(date("m/d/Y", time()));

        if($duedate == "")
        {
            if($filter === "all")
            {
                $res = $db->query("SELECT * FROM lodging ORDER BY id DESC");
            }
            else if($filter === "due-departure")
            {
                $res = $db->query("SELECT * FROM lodging WHERE checkout='$today' AND checkedout=0 ORDER BY id DESC");
            }
            else if($filter === "overdue-departure")
            {
                $res = $db->query("SELECT * FROM lodging WHERE checkout < '$today' AND checkedout=0 ORDER BY id DESC");
            }
            else if($filter === "arrived-today")
            {
                $res = $db->query("SELECT * FROM lodging WHERE checkin='$today' ORDER BY id DESC");
            }
        }
        else
        {
            $res = $db->query("SELECT * FROM lodging WHERE checkout='$dDate' ORDER BY id DESC");
        }

        while(($row = $res->fetch_assoc()) != null)
        {
            $ret[$i] = new Lodging($subscriber);
            $ret[$i]->Id = $row['lodgingid'];
            $ret[$i]->Created = new WixDate($row['created']);
            $ret[$i]->Guest = new Guest($subscriber);
            $ret[$i]->Guest->Initialize($row['guest']);

            $ret[$i]->Checkincount = Convert::ToInt($row['checkincount']);
            $ret[$i]->Checkoutcount = Convert::ToInt($row['checkoutcount']);
            $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);

            if($ret[$i]->Guest->Id == "")
            {
                $ret[$i]->Guest = new Customer($subscriber);
                $ret[$i]->Guest->Initialize($row['guest']);
            }
            $ret[$i]->Subguest = json_decode($row['subguest']);
            $ret[$i]->Rooms = [];

            $r = json_decode($row['rooms']);

            if(is_array($r))
            {
                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new Lodgepixel($subscriber, $r[$j]);
                    array_push($ret[$i]->Rooms, $ro);
                }
            }


            $ret[$i]->Checkin = new WixDate($row['checkin']);
            $ret[$i]->Checkout = new WixDate($row['checkout']);
            $ret[$i]->Days = Convert::ToInt($row['days']);
            $ret[$i]->Adults = Convert::ToInt($row['adults']);
            $ret[$i]->Children = Convert::ToInt($row['children']);
            $ret[$i]->Pet = Convert::ToBool($row['pet']);
            $ret[$i]->Paid = Convert::ToBool($row['paid']);
            $ret[$i]->Total = doubleval($row['total']);
            $ret[$i]->Taxes = doubleval($row['taxes']);
            $ret[$i]->Discount = doubleval($row['discount']);
            $ret[$i]->Paidamount = doubleval($row['paidamount']);
            $ret[$i]->Roomcategory = json_decode($row['roomcategory']);
            $ret[$i]->User = $row['user'];
            $ret[$i]->Checkouts = json_decode($row['checkouts']);
            $ret[$i]->Bills = doubleval($row['bills']);
            $ret[$i]->Bookingnumber = $row['booking'];
            $i++;
        }
        return $ret;
    }

    public static function overdueCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $date = strtotime(date("m/d/Y"));
        $res = $db->query("SELECT id FROM lodging WHERE checkout < '$date' AND checkedout=0")->num_rows;
        $db->close();
        return $res;
    }

    public static function dueTodayCount(Subscriber $subscriber)
    {
        $db = $subscriber->GetDB();
        $date = strtotime(date("m/d/Y"));
        $res = $db->query("SELECT * FROM lodging WHERE checkout = '$date'")->num_rows;
        $db->close();
        return $res;
    }
}
