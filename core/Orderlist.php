<?php
	/* Generated by Wixnit Class Builder 
	// Dec, 19/2019
	// Building class for Orderlist
	*/

	class Orderlist
	{
		public $Id = "";
		public $Created = 0;
		public $Invoice = "";
		public $Itemskey = "";
		public $Couponlist = array();
		public $Discountlist = array();
		private $Total = 0;
		private $Subtotal = 0;
		public $Discount = 0.0;
		private $Couponvalue = 0;
		public $Tax = 0;
		public $Owner = null;
		public $Channel = "online";

		private $Paid = false;
		
		private $subscriber = null;

		function __construct(Subscriber $subscriber)
		{
			$this->subscriber = $subscriber;
		}
		
		public function Initialize($arg=null)
		{
			if($arg != null)
			{
				$db = $this->subscriber->GetDB();

				$res = $db->query("SELECT * FROM orderlist WHERE orderlistid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['orderlistid'];
					$this->Created = new WixDate($row['created']);
					$this->Invoice = new Invoice($this->subscriber);
					$this->Invoice->Initialize($row['invoice']);
					$this->Couponlist = json_decode($row['couponlist']);
					$this->Discountlist = json_decode($row['discountlist']);
					$this->Total = $row['total'];
					$this->Subtotal = $row['subtotal'];
					$this->Discount = $row['discount'];
					$this->Couponvalue = $row['couponvalue'];
					$this->Tax = $row['tax'];
					$this->Owner = new Entity($row['owner']);
                    $this->Itemskey = $row['orderlistid'];

                    $this->calcCoupon();
				}
			}
		}

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$invoice = addslashes(is_a($this->Invoice, "Invoice") ? $this->Invoice->Id : $this->Invoice);
			$itemskey = addslashes($this->Itemskey);
			$couponlist = addslashes(json_encode($this->Couponlist));
			$discountlist = addslashes(json_encode($this->Discountlist));
			$total = floatval($this->Total);
			$subtotal = floatval($this->Subtotal);
			$discount = floatval($this->Discount);
			$couponvalue = floatval($this->Couponvalue);
			$tax = floatval($this->Tax);
			$owner = addslashes(is_a($this->Owner, "Entity") ? $this->Owner->Id : $this->Owner);

			if($res = $db->query("SELECT orderlistid FROM orderlist WHERE orderlistid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE orderlist SET invoice='$invoice',itemskey='$itemskey',couponlist='$couponlist',discountlist='$discountlist',total='$total',subtotal='$subtotal',discount='$discount',couponvalue='$couponvalue',tax='$tax',owner='$owner' WHERE orderlistid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT orderlistid FROM orderlist WHERE orderlistid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$this->Itemskey = $id;
				$db->query("INSERT INTO orderlist(orderlistid,created,invoice,itemskey,couponlist,discountlist,total,subtotal,discount,couponvalue,tax,owner) VALUES ('$id','$created','$invoice','$itemskey','$couponlist','$discountlist','$total','$subtotal','$discount','$couponvalue','$tax','$owner')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM orderlist WHERE orderlistid='$id'");

			//Deleting Associated Objects
			/*n			$this->Invoice->Delete();

			$this->Owner->Delete();
			*/
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT orderlistid FROM orderlist WHERE invoice LIKE '%$term%' OR itemskey LIKE '%$term%' OR couponlist LIKE '%$term%' OR discountlist LIKE '%$term%' OR total LIKE '%$term%' OR subtotal LIKE '%$term%' OR discount LIKE '%$term%' OR couponvalue LIKE '%$term%' OR tax LIKE '%$term%' OR owner LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Orderlist($row['orderlistid']);
				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='orderlistid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT orderlistid FROM orderlist WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Orderlist($row['orderlistid']);
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT orderlistid FROM orderlist ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Orderlist($row['orderlistid']);
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM orderlist");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Orderlist();
				$ret[$i]->Id = $row['orderlistid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Invoice = new Invoice($row['invoice']);
				$ret[$i]->Itemskey = $row['itemskey'];
				$ret[$i]->Couponlist = json_decode($row['couponlist']);
				$ret[$i]->Discountlist = json_decode($row['discountlist']);
				$ret[$i]->Total = $row['total'];
				$ret[$i]->Subtotal = $row['subtotal'];
				$ret[$i]->Discount = $row['discount'];
				$ret[$i]->Couponvalue = $row['couponvalue'];
				$ret[$i]->Tax = $row['tax'];
				$ret[$i]->Owner = new Entity($row['owner']);
				$i++;
			}
			return $ret;
		}

		public function GetTotal()
		{
		    $list = $this->Getitems();
		    $this->Total = 0;
		    for($i = 0; $i < count($list); $i++)
            {
                $this->Total += $list[$i]->Total();
            }
		    $this->Save();
			return $this->Total;
		}

		public function GetSubtotal()
		{
			return $this->Subtotal;
		}

		public function GetDiscount()
		{
			return $this->Discount;
		}

		public function GetCouponvalue()
		{
			return $this->Couponvalue;
		}

		public function TotalDiscount()
        {
            $tot = $this->GetTotal();
            return ($this->Discount + $this->Couponvalue) > $tot ? $tot : ($this->Discount + $this->Couponvalue);
        }

		public function GetTax()
		{
            $list = $this->Getitems();
            $this->Tax = 0;
            for($i = 0; $i < count($list); $i++)
            {
                $this->Tax += $list[$i]->CalcTaxes();
            }
            $this->Save();
            return $this->Tax;
		}
		
		
		//Hand crafted methods
		public function Raise()
		{
			
		}
		
		public function Cancel()
		{
			
		}
		
		public function Additem($item)
		{
			$item->Itemkey = $this->Itemskey;

			if($item->Type == "room_order")
            {
                $d = $item->Checkoutdate->getValue() - $item->Checkindate->getValue();
                $days = ($d / ((60 * 60) * 24));
                $this->Total += ($item->Roomcategory->Price * $days);

                if($item->Guestcount > $item->Roomcategory->Baseoccupancy)
                {
                    $this->Total += ($item->Roomcategory->Extraguestprice * ($item->Guestcount - $item->Roomcategory->Baseoccupancy)) * $days;
                }
            }
			if(is_a($item, "Foodorder"))
            {
                $this->Total += ($item->Food->Price * $item->Quantity);
            }
            if(is_a($item, "Drinkorder"))
            {
                $this->Total += ($item->Drink->Price * $item->Quantity);
            }
            if(is_a($item, "Pastryorder"))
            {
                $this->Total += ($item->Pastry->Price * $item->Quantity);
            }
            if(is_a($item, "Laundryorder"))
            {
                $this->Total += ($item->Laundry->Price * $item->Quantity);
            }
            if(is_a($item, "Poolorder"))
            {
                $this->Total += ($item->Pool->Price * $item->Quantity);
            }
            if(is_a($item, "Servicesorder"))
            {
                $this->Total += ($item->Food->Price * $item->Quantity);
            }
			$item->Save();
			$this->Save();
		}
		
		public function Removeitem($item)
		{
            $list = $this->Getitems();
            $id = is_a($item, "Order") ? $item->Id : $item;
            for($i = 0; $i < count($list); $i++)
            {
                if($list[$i]->Id == $id)
                {
                    $list[$i]->Delete();
                }
            }
		}

		public function Applycoupon(Coupon $coupon)
		{
		    $ret = false;

            $module = new Modules($this->subscriber);

            if($module->Discount)
            {
                if(!$coupon->Used)
                {
                    if((!$coupon->Expires) || ($coupon->Expirydate < time()))
                    {
                        if(!in_array($coupon->Id, $this->Couponlist))
                        {
                            $items = Items::Retrieve($this->subscriber, $this->Itemskey);

                            for($i = 0; $i < count($items); $i++)
                            {
                                if($items[$i]->Type == "room_order")
                                {
                                    if(in_array($items[$i]->Roomcategory->Id, $coupon->Booking))
                                    {
                                        if($coupon->Bypercentage)
                                        {
                                            $this->Couponvalue += ((doubleval($coupon->Value) / 100.0) * $items[$i]->Total());
                                        }
                                        else
                                        {
                                            $this->Couponvalue += (floatval($coupon->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupon->Value);
                                        }
                                        $ret = true;
                                    }
                                }
                                if($items[$i]->Type == "food_order")
                                {
                                    if(in_array($items[$i]->Food->Id, $coupon->Food))
                                    {
                                        if($coupon->Bypercentage)
                                        {
                                            $this->Couponvalue += ((doubleval($coupon->Value) / 100.0) * $items[$i]->Total());
                                        }
                                        else
                                        {
                                            $this->Couponvalue += (floatval($coupon->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupon->Value);
                                        }
                                        $ret = true;
                                    }
                                }
                                if($items[$i]->Type == "drink_order")
                                {
                                    if(in_array($items[$i]->Drink->Id, $coupon->Drinks))
                                    {
                                        if($coupon->Bypercentage)
                                        {
                                            $this->Couponvalue += ((doubleval($coupon->Value) / 100.0) * $items[$i]->Total());
                                        }
                                        else
                                        {
                                            $this->Couponvalue += (floatval($coupon->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupon->Value);
                                        }
                                        $ret = true;
                                    }
                                }
                                if($items[$i]->Type == "pastry_order")
                                {
                                    if(in_array($items[$i]->Pastry->Id, $coupon->Pastries))
                                    {
                                        if($coupon->Bypercentage)
                                        {
                                            $this->Couponvalue += ((doubleval($coupon->Value) / 100.0) * $items[$i]->Total());
                                        }
                                        else
                                        {
                                            $this->Couponvalue += (floatval($coupon->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupon->Value);
                                        }
                                        $ret = true;
                                    }
                                }
                                if($items[$i]->Type == "laundry_order")
                                {
                                    if(in_array($items[$i]->Laundry->Id, $coupon->Laundry))
                                    {
                                        if($coupon->Bypercentage)
                                        {
                                            $this->Couponvalue += ((doubleval($coupon->Value) / 100.0) * $items[$i]->Total());
                                        }
                                        else
                                        {
                                            $this->Couponvalue += (floatval($coupon->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupon->Value);
                                        }
                                        $ret = true;
                                    }
                                }
                                if($items[$i]->Type == "pool_order")
                                {
                                    if(in_array($items[$i]->Pool->Id, $coupon->Pool))
                                    {
                                        if($coupon->Bypercentage)
                                        {
                                            $this->Couponvalue += ((doubleval($coupon->Value) / 100.0) * $items[$i]->Total());
                                        }
                                        else
                                        {
                                            $this->Couponvalue += (floatval($coupon->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupon->Value);
                                        }
                                        $ret = true;
                                    }
                                }
                            }
                            if($ret == true)
                            {
                                array_push($this->Couponlist, $coupon->Id);
                                $this->Save();
                            }

                            return $ret ? Coupon::Added : false;
                        }
                        else
                        {
                            return Coupon::Added;
                        }
                    }
                    else
                    {
                        return Coupon::Expired;
                    }
                }
                else
                {
                    return Coupon::Used;
                }
            }
            else
            {
                return Coupon::Added;
            }
		}
		
		public function Removecoupon($coupon)
		{
			$id = is_a($coupon, "Coupon") ? $coupon->Id : $coupon;

			$coupons = $this->Couponlist;

			$this->Couponlist = [];

			for($i = 0; $i < count($coupons); $i++)
            {
                if($coupons[$i] != $id)
                {
                    array_push($this->Couponlist, $coupons[$i]);
                }
            }
			$this->Save();
			$this->calcCoupon();
		}
		
		public function Applydiscount(Discount $discount)
		{
			
		}
		
		public function Removediscount(Discount $discount)
		{

		}
		
		public function Hasroom()
		{
			$items = Items::Retrieve($this->subscriber, $this->Itemskey);
			
			for($i = 0; $i < count($items); $i++)
			{
				if($items[$i]->Type == "room_order")
				{
					return true;
				}
			}
			return false;
		}

        public function Getroomorders()
        {
            $ret = [];
            $items = Items::Retrieve($this->subscriber, $this->Itemskey);

            for($i = 0; $i < count($items); $i++)
            {
                if($items[$i]->Type == "room_order")
                {
                    array_push($ret, $items[$i]);
                }
            }
            return $ret;
        }

		public function Getcouponlist()
		{
			$ret = array();
			
			for($i = 0; $i < count($this->Couponlist); $i++)
			{
				$coup = new Coupon($this->subscriber);
				$coup->Initialize($this->Couponlist[$i]);
				array_push($ret, $coup);
			}
			return $ret;
		}
		
		public function Getdiscountlist()
		{
			$ret = array();
			
			for($i = 0; $i < count($this->Discountlist); $i++)
			{
				$discount = new Discount($this->subscriber);
				$discount->Initialize($this->Discountlist[$i]);
				array_push($ret, $discount);
			}
			return $ret;
		}
		
		public function Getitems()
		{
			return Items::Retrieve($this->subscriber, $this->Itemskey);
		}
		
		public function Getitemkey()
		{
			return $this->Itemskey;
		}

		public function Online()
        {
            if($this->Channel == "online")
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public function Offline()
        {
            if($this->Channel == "online")
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public function Lodgingrange()
        {
            $spanstart = 0;
            $spanstop = 0;

            $items = Items::Retrieve($this->subscriber, $this->Itemskey);

            for($i = 0; $i < count($items); $i++)
            {
                if($items[$i]->Type == "room_order")
                {
                    if(($items[$i]->Checkindate->getValue() < $spanstart) || ($spanstart == 0))
                    {
                        $spanstart = $items[$i]->Checkindate->getValue();
                    }
                    if(($items[$i]->Checkoutdate->getValue() > $spanstop) || ($spanstop == 0))
                    {
                        $spanstop = $items[$i]->Checkoutdate->getValue();
                    }
                }
            }
            return new Timespan($spanstart, $spanstop);
        }


        private function calcCoupon()
        {
            $this->Couponvalue = 0;

            $items = Items::Retrieve($this->subscriber, $this->Itemskey);

            $coupons = $this->Getcouponlist();

            $module = new Modules($this->subscriber);

            if($module->Discount)
            {
                for($j = 0; $j < count($coupons); $j++)
                {
                    $ret = false;
                    for($i = 0; $i < count($items); $i++)
                    {
                        if($items[$i]->Type == "room_order")
                        {
                            if(in_array($items[$i]->Roomcategory->Id, $coupons[$j]->Booking))
                            {
                                if($coupons[$j]->Bypercentage)
                                {
                                    $this->Couponvalue += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                                }
                                else
                                {
                                    $this->Couponvalue += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                                }
                                $ret = true;
                            }
                        }
                        if($items[$i]->Type == "food_order")
                        {
                            if(in_array($items[$i]->Food->Id, $coupons[$j]->Food))
                            {
                                if($coupons[$j]->Bypercentage)
                                {
                                    $this->Couponvalue += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                                }
                                else
                                {
                                    $this->Couponvalue += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                                }
                                $ret = true;
                            }
                        }
                        if($items[$i]->Type == "drink_order")
                        {
                            if(in_array($items[$i]->Drink->Id, $coupons[$j]->Drinks))
                            {
                                if($coupons[$j]->Bypercentage)
                                {
                                    $this->Couponvalue += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                                }
                                else
                                {
                                    $this->Couponvalue += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                                }
                                $ret = true;
                            }
                        }
                        if($items[$i]->Type == "pastry_order")
                        {
                            if(in_array($items[$i]->Pastry->Id, $coupons[$j]->Pastries))
                            {
                                if($coupons[$j]->Bypercentage)
                                {
                                    $this->Couponvalue += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                                }
                                else
                                {
                                    $this->Couponvalue += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                                }
                                $ret = true;
                            }
                        }
                        if($items[$i]->Type == "laundry_order")
                        {
                            if(in_array($items[$i]->Laundry->Id, $coupons[$j]->Laundry))
                            {
                                if($coupons[$j]->Bypercentage)
                                {
                                    $this->Couponvalue += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                                }
                                else
                                {
                                    $this->Couponvalue += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                                }
                                $ret = true;
                            }
                        }
                        if($items[$i]->Type == "pool_order")
                        {
                            if(in_array($items[$i]->Pool->Id, $coupons[$j]->pool))
                            {
                                if($coupons[$j]->Bypercentage)
                                {
                                    $this->Couponvalue += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                                }
                                else
                                {
                                    $this->Couponvalue += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                                }
                                $ret = true;
                            }
                        }
                    }
                    if($ret == false)
                    {
                        $coupons[$j] = null;
                    }
                }

                $this->Couponlist = [];

                for($h = 0; $h < count($coupons); $h++)
                {
                    if($coupons[$h] != null)
                    {
                        array_push($this->Couponlist,  $coupons[$h]->Id);
                    }
                }
                if(count($this->Couponlist) != count($coupons))
                {
                    $this->Save();
                }
            }
        }

        public function toReservation(Customer $customer)
        {
            $ret = null;

            $settings = new Site($this->subscriber);

            if(($settings->Nopayreservation) || (!$settings->Payonline))
            {
                $reservation = new Reservation($this->subscriber);
                $reservation->Customer = $customer;
                $reservation->Paid = $this->Paid;

                if($this->Paid)
                {
                    $reservation->Paidamount = (($this->GetTotal() + $this->GetTax()) - $this->TotalDiscount());
                }


                $period = $this->Lodgingrange();
                $reservation->Arrival = $period->Start;
                $reservation->Departure = $period->Stop;

                $items = $this->Getitems();

                for($i = 0; $i < count($items); $i++)
                {
                    if($items[$i]->Type === "room_order")
                    {
                        $room = new Roomreservation($this->subscriber);
                        $room->Checkin = $items[$i]->Checkindate;
                        $room->Checkout = $items[$i]->Checkoutdate;
                        $room->Roomcategory = $items[$i]->Roomcategory;
                        $room->Customer = $customer;
                        $room->Price = $items[$i]->Roomcategory->Price;
                        $room->Period = Roomorder::Days($items[$i]);
                        $room->Paid = $this->Paid;
                        $room->Guestcount = $items[$i]->Guestcount;
                        $room->Save();

                        array_push($reservation->Roomreservation, $room);
                    }
                    if($items[$i]->Type == "food_order")
                    {
                        $food = new Foodreservation($this->subscriber);
                        $food->Paid = $this->Paid;
                        $food->Price = $items[$i]->Food->Price;
                        $food->Quantity = $items[$i]->Quantity;
                        $food->Food = $items[$i]->Food;
                        $food->Customer = $customer;
                        $food->Tax = $items[$i]->Food->Tax;
                        $food->Ordermin = $items[$i]->Ordermin;
                        $food->Orderday = $items[$i]->Orderdate;
                        $food->Orderhour = $items[$i]->Orderhour;
                        $food->Ordergmt = $items[$i]->Ordergmt;
                        $food->Save();

                        array_push($reservation->Foodreservation, $food);

                        ////TODO:
                        /// Create a food order schedule here for the order
                    }
                    if($items[$i]->Type == "drink_order")
                    {
                        $drink = new Drinkreservation($this->subscriber);
                        $drink->Paid = $this->Paid;
                        $drink->Price = $items[$i]->Drink->Price;
                        $drink->Quantity = $items[$i]->Quantity;
                        $drink->Drink = $items[$i]->Drink;
                        $drink->Customer = $customer;
                        $drink->Tax = $items[$i]->Drink->Tax;
                        $drink->Ordermin = $items[$i]->Ordermin;
                        $drink->Orderday = $items[$i]->Orderdate;
                        $drink->Orderhour = $items[$i]->Orderhour;
                        $drink->Ordergmt = $items[$i]->Ordergmt;
                        $drink->Save();

                        array_push($reservation->Drinkreservation, $drink);

                        ////TODO:
                        /// Create a drink order schedule here for the order
                    }
                    if($items[$i]->Type == "pastry_order")
                    {
                        $pastry = new Pastryreservation($this->subscriber);
                        $pastry->Paid = $this->Paid;
                        $pastry->Price = $items[$i]->Pastry->Price;
                        $pastry->Quantity = $items[$i]->Quantity;
                        $pastry->Pastry = $items[$i]->Pastry;
                        $pastry->Customer = $customer;
                        $pastry->Tax = $items[$i]->Pastry->Tax;
                        $pastry->Ordermin = $items[$i]->Ordermin;
                        $pastry->Orderday = $items[$i]->Orderdate;
                        $pastry->Orderhour = $items[$i]->Orderhour;
                        $pastry->Ordergmt = $items[$i]->Ordergmt;
                        $pastry->Save();

                        array_push($reservation->Pastryreservation, $pastry);

                        ////TODO:
                        /// Create a pastry order schedule here for the order
                    }
                }
                $reservation->Subtotal = $this->GetTotal();
                $reservation->Discount = $this->GetDiscount();
                $reservation->Tax = $this->GetTax();
                $reservation->Coupon = $this->GetCouponvalue();
                $reservation->Total = (($reservation->Subtotal + $reservation->Tax) - ($reservation->Coupon + $reservation->Discount));

                $reservation->Save();


                //Check and add coupons and discount to history listing

                $couponpixels = $this->couponPixels();

                for($i = 0; $i < count($couponpixels); $i++)
                {
                    $history = new Couponhistory($this->subscriber);
                    $history->Coupon = $couponpixels[$i]->Coupon;
                    $history->User = $customer;
                    $history->Value = $couponpixels[$i]->Value;
                    $history->Amount = $couponpixels[$i]->Amount;
                    $history->Onservices = $couponpixels[$i]->Services;
                    $history->Onroom = $couponpixels[$i]->Room;
                    $history->Onpool = $couponpixels[$i]->Pool;
                    $history->Onpastry = $couponpixels[$i]->Pastry;
                    $history->Onlaundry = $couponpixels[$i]->Laundry;
                    $history->Onfood = $couponpixels[$i]->Food;
                    $history->Ondrinks = $couponpixels[$i]->Drinks;
                    $history->Bypercentage = $couponpixels[$i]->Percentage;
                    $history->Save();

                    $couponpixels[$i]->Coupon->Usecount --;
                    if($couponpixels[$i]->Coupon->Usecount <= 0)
                    {
                        $couponpixels[$i]->Coupon->Used = true;
                    }
                    $couponpixels[$i]->Coupon->Save();
                }


                $this->Emptylist();

                // -------- Propergating customer reserved event-----------------

                $context = Context::Create($customer);
                $event = new Event($this->subscriber, Event::CustomerCompletesReservation, $context);
                Event::Fire($event);

                $ret = $reservation;
            }
            return $ret;
        }

        public function orderNow($customer)
        {
            $ret = null;

            $settings = new Site($this->subscriber);


            $food = new Kitchenorder($this->subscriber);
            $drinks = new Barorder($this->subscriber);
            $pastries = new Bakeryorder($this->subscriber);

            $food->Paid = $this->Paid;
            $drinks->Paid = $this->Paid;
            $pastries->Paid = $this->Paid;

            $food->Customer = $customer;
            $drinks->Customer = $customer;
            $pastries->Customer = $customer;


            $foodsettings = new Kitchensettings($this->subscriber);
            $barsettings = new Barsettings($this->subscriber);
            $pastrysettings = new Pastrysettings($this->subscriber);


            $items = $this->Getitems();

            for($i = 0; $i < count($items); $i++)
            {
                if($items[$i]->Type == "food_order")
                {
                    $pixel = new Foodpixel();
                    $pixel->Food = $items[$i]->Food;
                    $pixel->Price = $items[$i]->Food->Price;
                    $pixel->Quantity = $items[$i]->Quantity;
                    $pixel->Tax = Foodorder::CalculateTaxes($items[$i], $foodsettings->Compundtax);

                    $food->Total += doubleval($items[$i]->Food->Price * $items[$i]->Quantity);
                    $food->Taxes += $pixel->Tax;

                    array_push($food->Foodpixel, $pixel);
                }
                if($items[$i]->Type == "drink_order")
                {
                    $pixel = new Drinkpixel();
                    $pixel->Drink = $items[$i]->Drink;
                    $pixel->Price = $items[$i]->Drink->Price;
                    $pixel->Quantity = $items[$i]->Quantity;
                    $pixel->Tax = Drinkorder::CalculateTaxes($items[$i], $barsettings->Compundtax);

                    $drinks->Total += doubleval($items[$i]->Drink->Price * $items[$i]->Quantity);
                    $drinks->Taxes += $pixel->Tax;

                    array_push($drinks->Drinkpixel, $pixel);
                }
                if($items[$i]->Type == "pastry_order")
                {
                    $pixel = new Pastrypixel($this->subscriber);
                    $pixel->Pastry = $items[$i]->Pastry;
                    $pixel->Price = $items[$i]->Pastry->Price;
                    $pixel->Quantity = $items[$i]->Quantity;
                    $pixel->Tax = Pastryorder::CalculateTaxes($items[$i], $pastrysettings->Compundtax);

                    $pastries->Total += doubleval($items[$i]->Pastry->Price * $items[$i]->Quantity);
                    $pastries->Taxes += $pixel->Tax;

                    array_push($pastries->Pastrypixel, $pixel);
                }
            }


            //Share discount between different food
            $divisor = 0;
            $totalDiscount = $this->TotalDiscount();
            $total = $this->GetTotal();

            if((count($food->Foodpixel) > 0) && ($food->Total > 0))
            {
                $food->Discount = (((($food->Total / $total) * 100.0)  / 100) * $totalDiscount);
            }
            if((count($drinks->Drinkpixel) > 0) && ($drinks->Total > 0))
            {
                $drinks->Discount = (((($drinks->Total / $total) * 100.0)  / 100) * $totalDiscount);
            }
            if((count($pastries->Pastrypixel) > 0) && ($pastries->Total > 0))
            {
                $pastries->Discount = (((($pastries->Total / $total) * 100.0)  / 100) * $totalDiscount);
            }


            if(count($food->Foodpixel) > 0)
            {
                $food->Save();
                $ret = true;
            }
            if(count($drinks->Drinkpixel) > 0)
            {
                $drinks->Save();
                $ret = true;
            }
            if(count($pastries->Pastrypixel) > 0)
            {
                $pastries->Save();
                $ret = true;
            }



            //Check and add coupons and discount to history listing

            $couponpixels = $this->couponPixels();

            for($i = 0; $i < count($couponpixels); $i++)
            {
                $history = new Couponhistory($this->subscriber);
                $history->Coupon = $couponpixels[$i]->Coupon;
                $history->User = $customer;
                $history->Value = $couponpixels[$i]->Value;
                $history->Amount = $couponpixels[$i]->Amount;
                $history->Onservices = $couponpixels[$i]->Services;
                $history->Onroom = $couponpixels[$i]->Room;
                $history->Onpool = $couponpixels[$i]->Pool;
                $history->Onpastry = $couponpixels[$i]->Pastry;
                $history->Onlaundry = $couponpixels[$i]->Laundry;
                $history->Onfood = $couponpixels[$i]->Food;
                $history->Ondrinks = $couponpixels[$i]->Drinks;
                $history->Bypercentage = $couponpixels[$i]->Percentage;
                $history->Save();

                $couponpixels[$i]->Coupon->Usecount --;
                if($couponpixels[$i]->Coupon->Usecount <= 0)
                {
                    $couponpixels[$i]->Coupon->Used = true;
                }
                $couponpixels[$i]->Coupon->Save();
            }


            $this->Emptylist();

            // -------- Propergating customer reserved event-----------------

            $event = Event::GuestMakesOrderWhileLodging;


            $context = Context::Create($customer);
            $event = new Event($this->subscriber, Event::GuestMakesOrderWhileLodging, $context);
            Event::Fire($event);

            if(count($food->Foodpixel) > 0)
            {
                $context = Context::Create($customer);
                $event = new Event($this->subscriber, Event::GuestOrdersFoodWhileLodging, $context);
                Event::Fire($event);
            }
            if(count($drinks->Drinkpixel) > 0)
            {
                $context = Context::Create($customer);
                $event = new Event($this->subscriber, Event::GuestOrdersDrinkWhileLodging, $context);
                Event::Fire($event);
            }
            if(count($pastries->Pastrypixel) > 0)
            {
                $context = Context::Create($customer);
                $event = new Event($this->subscriber, Event::GuestOrdersPastryWhileLodging, $context);
                Event::Fire($event);
            }


            return $ret;
        }

        public function couponPixels()
        {
            $pixels = [];

            $items = Items::Retrieve($this->subscriber, $this->Itemskey);

            $coupons = $this->Getcouponlist();

            for($j = 0; $j < count($coupons); $j++)
            {
                $pixels[$j] = new stdClass();
                $pixels[$j]->Coupon = $coupons[$j];
                $pixels[$j]->Value = $coupons[$j]->Value;
                $pixels[$j]->Amount = 0;
                $pixels[$j]->Services = 0;
                $pixels[$j]->Room = 0;
                $pixels[$j]->Pool = 0;
                $pixels[$j]->Pastry = 0;
                $pixels[$j]->Laundry = 0;
                $pixels[$j]->Food = 0;
                $pixels[$j]->Drinks = 0;
                $pixels[$j]->Percentage = $coupons[$j]->Bypercentage;


                for($i = 0; $i < count($items); $i++)
                {
                    if($items[$i]->Type == "room_order")
                    {
                        if(in_array($items[$i]->Roomcategory->Id, $coupons[$j]->Booking))
                        {
                            if($coupons[$j]->Bypercentage)
                            {
                                $pixels[$j]->Room += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                            }
                            else
                            {
                                $pixels[$j]->Room += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                            }
                            $ret = true;
                        }
                    }
                    if($items[$i]->Type == "food_order")
                    {
                        if(in_array($items[$i]->Food->Id, $coupons[$j]->Food))
                        {
                            if($coupons[$j]->Bypercentage)
                            {
                                $pixels[$j]->Food += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                            }
                            else
                            {
                                $pixels[$j]->Food += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                            }
                            $ret = true;
                        }
                    }
                    if($items[$i]->Type == "drink_order")
                    {
                        if(in_array($items[$i]->Drink->Id, $coupons[$j]->Drinks))
                        {
                            if($coupons[$j]->Bypercentage)
                            {
                                $pixels[$j]->Drinks += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                            }
                            else
                            {
                                $pixels[$j]->Drinks += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                            }
                            $ret = true;
                        }
                    }
                    if($items[$i]->Type == "pastry_order")
                    {
                        if(in_array($items[$i]->Pastry->Id, $coupons[$j]->Pastries))
                        {
                            if($coupons[$j]->Bypercentage)
                            {
                                $pixels[$j]->Pastry += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                            }
                            else
                            {
                                $pixels[$j]->Pastry += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                            }
                            $ret = true;
                        }
                    }
                    if($items[$i]->Type == "laundry_order")
                    {
                        if(in_array($items[$i]->Laundry->Id, $coupons[$j]->Laundry))
                        {
                            if($coupons[$j]->Bypercentage)
                            {
                                $pixels[$j]->Laundry += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                            }
                            else
                            {
                                $pixels[$j]->Laundry += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                            }
                            $ret = true;
                        }
                    }
                    if($items[$i]->Type == "pool_order")
                    {
                        if(in_array($items[$i]->Pool->Id, $coupons[$j]->pool))
                        {
                            if($coupons[$j]->Bypercentage)
                            {
                                $pixels[$j]->Pool += ((doubleval($coupons[$j]->Value) / 100.0) * $items[$i]->Total());
                            }
                            else
                            {
                                $pixels[$j]->Pool += (floatval($coupons[$j]->Value) > $items[$i]->Total()) ? $items[$i]->Total() : floatval($coupons[$j]->Value);
                            }
                            $ret = true;
                        }
                    }
                    $pixels[$j]->Amount = $pixels[$j]->Pool + $pixels[$j]->Laundry + $pixels[$j]->Room + $pixels[$j]->Drinks + $pixels[$j]->Food + $pixels[$j]->Pastry;
                }
            }
            return $pixels;
        }

        public function Emptylist()
        {
            $items = Items::Retrieve($this->subscriber, $this->Itemskey);

            for($i = 0; $i < count($items); $i++)
            {
                $items[$i]->Delete();
            }
            $this->Delete();
            return true;
        }

        public function setPaid($status=false)
        {
            $this->Paid = $status;
        }
	}
