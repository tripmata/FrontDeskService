<?php

	/* Generated by Wixnit Class Builder 
	// May, 26/2020
	// Building class for Reservation
	*/

	class Reservation
	{
        use Decrypt;
        
		public $Id = "";
		public $Created = 0;
		public $Property = "";
		public $Customer = "";
		public $Checkindate = 0;
		public $Checkoutdate = 0;
		public $Rooms = array();
		public $Total = 0;
		public $Discount = 0;
		public $Paidamount = 0;
		public $Children = 0;
		public $Adult = 0;
		public $Paid = false;
		public $Request = "";
		public $Bookingnumber = "";
		public $Activated = false;
		public $Checkedin =false;
		public $Checkedout = false;
		public $Period = 0;
		
		public $Noshow = 0;

        public $Status = 0;
        public $CanMarkNoShow = false;
        public $UnconfirmedNoShow = 0;
        public $IsOnline = 0;
        public $RefundPaymentCondition = '';
        public $PlatformName = '';
        public $ArrivalTime = '';
        public $GuestName = '';
        public $GuestEmail = '';
        public $Old_entry = "";
		public $Updated_by = "";


		public $Cancelled = false;

		function __construct($arg=null)
		{
			if($arg != null)
			{
				$db = DB::GetDB();

				$res = $db->query("SELECT * FROM reservation WHERE reservationid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['reservationid'];
					$this->Created = new WixDate($row['created']);
					$this->Property = new Property($row['property']);
					$this->Customer = new Customer($row['customer']);
					$this->Checkindate = new WixDate($row['checkindate']);
					$this->Checkoutdate = new WixDate($row['checkoutdate']);
					$this->Updated_by = new User($row['updated_by']);
					
                    $this->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));

                    $this->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($i = 0; $i < count($r); $i++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($this->Property->Databasename, $this->Property->DatabaseUser, $this->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$i]->room);
                        $ro->Number = $r[$i]->number;
                        
                        array_push($this->Rooms, $ro);
                    }

					$this->Old_entry = $row['old_entry'];
					$this->Total = $row['total'];
					$this->Discount = $row['discount'];
					$this->Paidamount = $row['paidamount'];
					$this->Children = $row['children'];
					$this->Adult = $row['adult'];
					$this->Paid = Convert::ToBool($row['paid']);
					$this->Request = $row['request'];
					$this->Bookingnumber = $row['booking'];
					$this->Activated = Convert::ToBool($row['activated']);
                    $this->Checkedin = Convert::ToBool($row['checkedin']);
                    $this->Checkedout = Convert::ToBool($row['checkedout']);
                    $this->CanMarkNoShow = self::canMarkAsNoShow($row);
                    $this->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    $this->IsOnline = intval($row['isonline']);
                    $this->RefundPaymentCondition = $row['refundPaymentCondition'];
                    $this->PlatformName = $row['platformName'];
                    $this->ArrivalTime = $row['checkin_time'];
                    $this->getGuestInfo($row);

					if ((($this->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($this->Activated === false))
                    {
                        $this->Status = 3;
                    }
					elseif (($this->Activated === true) && (($this->Checkoutdate->getValue() + (($this->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $this->Status = 1;
                    }
					elseif ((($this->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($this->Activated === true))
                    {
                        $this->Status = 2;
                    }

					$this->Period = (($this->Checkoutdate->getValue() - $this->Checkindate->getValue()) / ((60 * 60) * 24));
				}
			}
		}

		public function Save()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$created = time();
			$property = addslashes(is_a($this->Property, "Property") ? $this->Property->Id : $this->Property);
			$customer = addslashes((is_a($this->Customer, "Customer") || is_a($this->Customer, "CustomerByProperty")) ? $this->Customer->Id : $this->Customer);
			$checkindate = Convert::ToInt($this->Checkindate);
			$checkoutdate = Convert::ToInt($this->Checkoutdate);

			$total = floatval($this->Total);
			$discount = floatval($this->Discount);
			$paidamount = floatval($this->Paidamount);
			$children = Convert::ToInt($this->Children);
			$adult = Convert::ToInt($this->Adult);
			$paid = Convert::ToInt($this->Paid);
			$request = addslashes($this->Request);
			$booking = $this->Bookingnumber;
			$activated = Convert::ToInt($this->Activated);

			$checkedin = Convert::ToInt($this->Checkedin);
			$checkedout = Convert::ToInt($this->Checkedout);
			
            $noshow = Convert::ToInt($this->Noshow);

            // update no show flag
            $noshow = $noshow == 1 ? 2 : $noshow;
            $refundCondition = addslashes($this->RefundPaymentCondition);
            $extra = '';
            $platform = addslashes($this->PlatformName);
            $arrival = addslashes($this->ArrivalTime);

            // payment not made
            if ($this->IsOnline == 0 && $paidamount <= 0 && $noshow == 2) $noshow = 1;

            // not online
            if ($this->IsOnline == 0 && $paidamount > 0 && $noshow == 2) $extra = ', isConfirmedByGuest = 1 ';

			if ($booking == "")
            {
                $booking = strtoupper(Random::GenerateId(10));
                while($db->query("SELECT reservationid FROM reservation WHERE booking='$booking'")->num_rows > 0)
                {
                    $booking = strtoupper(Random::GenerateId(10));
                }
                $this->Bookingnumber = $booking;
            }

			$cancelled = Convert::ToInt($this->Cancelled);

			$rms = [];
			$r = $this->Rooms;
			for($i = 0; $i < count($r); $i++)
            {
                $std = new stdClass();
                $std->room = $r[$i]->Room->Id;
                $std->number = $r[$i]->Number;

                array_push($rms, $std);
            }
			$rooms = json_encode($rms);

			if ($res = $db->query("SELECT reservationid FROM reservation WHERE reservationid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE reservation SET property='$property',customer='$customer',checkindate='$checkindate',checkoutdate='$checkoutdate',rooms='$rooms',total='$total',discount='$discount',paidamount='$paidamount',children='$children',adult='$adult',paid='$paid',request='$request',booking='$booking',activated='$activated',checkedin='$checkedin',checkedout='$checkedout',noshow='$noshow',cancelled='$cancelled',refundPaymentCondition='$refundCondition',platformName='$platform',checkin_time = '$arrival' $extra WHERE reservationid = '$id'");
			}
			else
			{
                redo: ;
                $id = Random::GenerateId(16);
                if($db->query("SELECT reservationid FROM reservation WHERE reservationid='$id'")->num_rows > 0)
                {
                    goto redo;
                }
                $this->Id = $id;
                $db->query("INSERT INTO reservation(reservationid,created,property,customer,checkindate,checkoutdate,rooms,total,discount,paidamount,children,adult,paid,request,booking,activated,checkedin,checkedout,noshow,cancelled,platformName,checkin_time) VALUES ('$id','$created','$property','$customer','$checkindate','$checkoutdate','$rooms','$total','$discount','$paidamount','$children','$adult','$paid','$request','$booking','$activated','$checkedin','$checkedout','$noshow','$cancelled','$platform','$arrival')");
            }
		}

		public function Delete()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM reservation WHERE reservationid='$id'");

			//Deleting Associated Objects
			/*n			$this->Property->Delete();
			$this->Customer->Delete();
			$this->Rooms->Delete();
			*/
        }
        
        public static function checkIfCheckedOut(array $row, $db) : int
        {
            // @var int $checkedOut 
            $checkedOut = intval($row['checkedout']);

            // check lodging
            if ($checkedOut == 0)
            {
                // @var string $bookingNumber
                $bookingNumber = $row['booking'];

                // @var mixed $query
                $query = $db->query("SELECT checkedout FROM lodging WHERE booking = '$bookingNumber' AND checkedout = 1");

                // Checked out
                if ($query->num_rows > 0) $checkedOut = 1;
            }

            // return int 
            return $checkedOut;
        }

		public static function Search($property, $term='')
		{
			// get db
            $db = DB::GetDB();

            // get array
            $ret = array();
    
            // check customer information
            $res = $db->query("SELECT * FROM customer WHERE email LIKE '%$term%' OR `name` LIKE '%$term%' OR surname LIKE '%$term%' OR phone LIKE '%$term%'");
    
            // create function
            $searchFunction = function(string $term) use ($property, $db, &$ret)
            {
                $i = 0;
    
                $id = is_a($property, "Property") ? $property->Id : $property;
    
                $res = $db->query("SELECT * FROM reservation WHERE customer LIKE '%$term%' OR checkindate LIKE '%$term%' OR checkoutdate LIKE '%$term%' OR rooms LIKE '%$term%' OR total LIKE '%$term%' OR discount LIKE '%$term%' OR paid LIKE '%$term%' OR children LIKE '%$term%' OR adult LIKE '%$term%' OR request LIKE '%$term%' OR booking LIKE '%$term%' ORDER BY id DESC");
                while(($row = $res->fetch_assoc()) != null)
                {
                    if ($row['property'] == $id) :
    
                        $ret[$i] = new Reservation();
                        $ret[$i]->Id = $row['reservationid'];
                        $ret[$i]->Created = new WixDate($row['created']);
                        $ret[$i]->Property = new Property($row['property']);
                        $ret[$i]->Customer = new Customer($row['customer']);
                        $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                        $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                        $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
    
                        $ret[$i]->Rooms = [];
                        $r = json_decode($row['rooms']);
    
                        for($j = 0; $j < count($r); $j++)
                        {
                            $ro = new stdClass();
                            $ro->Room = new Roomcategory(new Subscriber($property->Databasename, $property->DatabaseUser, $property->DatabasePassword));
                            $ro->Room->Initialize($r[$j]->room);
                            $ro->Number = $r[$j]->number;
    
                            array_push($ret[$i]->Rooms, $ro);
                        }
    
                        $ret[$i]->Total = $row['total'];
                        $ret[$i]->Discount = $row['discount'];
                        $ret[$i]->Paidamount = $row['paidamount'];
                        $ret[$i]->Children = $row['children'];
                        $ret[$i]->Adult = $row['adult'];
                        $ret[$i]->Paid = Convert::ToBool($row['paid']);
                        $ret[$i]->Request = $row['request'];
                        $ret[$i]->Bookingnumber = $row['booking'];
                        $ret[$i]->Activated = Convert::ToBool($row['activated']);
                        $ret[$i]->Checkedin = intval($row['checkedin']);
                        $ret[$i]->Checkedout = self::checkIfCheckedOut($row, $db);
                        $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                        $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                        $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                        $ret[$i]->PlatformName = $row['platformName'];
                        $ret[$i]->ArrivalTime = $row['checkin_time'];
                        $ret[$i]->getGuestInfo($row);
    
                        if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                        {
                            $ret[$i]->Status = 3;
                        }
                        else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                        {
                            $ret[$i]->Status = 1;
                        }
                        else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                        {
                            $ret[$i]->Status = 2;
                        }
                        $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                        $i++;
                    
                    endif;
                }
            };
    
            // check fullname
            if ($res->num_rows == 0)
            {
                $termArray = explode(' ', trim($term));
    
                // check length
                if (count($termArray) == 2)
                {
                    // get first name last name
                    list($name, $lastname) = $termArray;
    
                    // check now
                    $res = $db->query("SELECT * FROM customer WHERE `name` LIKE '%$name%' OR surname LIKE '%$lastname%'");
                }
            }
    
            // Check now
            if ($res->num_rows > 0)
            {
                // run loop
                while (($row = $res->fetch_assoc()) != null)
                {
                    $searchFunction($row['customerid']);
                }
            }
            else
            {
                $searchFunction($term);
            }
    
            // return array
            return $ret;
		}

		public static function Filter($term='', $field='reservationid')
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            $property = isset($_REQUEST['property']) ? $_REQUEST['property'] : $_REQUEST['propertyid'];

			$res = $db->query("SELECT reservationid FROM reservation WHERE ".$field." ='$term' AND property = '$property'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function Order($field='id', $order='DESC')
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            $property = isset($_REQUEST['property']) ? $_REQUEST['property'] : $_REQUEST['propertyid'];

			$res = $db->query("SELECT reservationid FROM reservation WHERE property = '$property' ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function All()
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            $property = isset($_REQUEST['property']) ? $_REQUEST['property'] : $_REQUEST['propertyid'];

			$res = $db->query("SELECT * FROM reservation WHERE property = '$property' AND cancelled");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Reservation();
				$ret[$i]->Id = $row['reservationid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Property = $row['property'];
				$ret[$i]->Customer = $row['customer'];
				$ret[$i]->Checkindate = $row['checkindate'];
				$ret[$i]->Checkoutdate = $row['checkoutdate'];
				
				
				$ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
				
				$ret[$i]->Total = $row['total'];
				$ret[$i]->Discount = $row['discount'];
				$ret[$i]->Paidamount = $row['paidamount'];
				$ret[$i]->Children = $row['children'];
				$ret[$i]->Adult = $row['adult'];
				$ret[$i]->Paid = Convert::ToBool($row['paid']);
				$ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

        public static function ByBookingNUmber($booking)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            $res = $db->query("SELECT * FROM reservation WHERE booking='$booking'");
            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $ret = new Reservation();
                $ret->Id = $row['reservationid'];
                $ret->Created = new WixDate($row['created']);
                $ret->Property = new Property($row['property']);
                $ret->Customer = new Customer($GLOBALS['subscriber']);
                $ret->Customer->Initialize($row['customer']);
                $ret->Checkindate = new WixDate($row['checkindate']);
                $ret->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret->Property->Databasename, $ret->Property->DatabaseUser, $ret->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$i]->number;
                    
                    array_push($ret->Rooms, $ro);
                }
                
                $ret->Total = $row['total'];
                $ret->Discount = $row['discount'];
                $ret->Paidamount = $row['paidamount'];
                $ret->Children = $row['children'];
                $ret->Adult = $row['adult'];
                $ret->Paid = Convert::ToBool($row['paid']);
                $ret->Request = $row['request'];
                $ret->Bookingnumber = $row['booking'];
                $ret->Activated = Convert::ToBool($row['activated']);
                $ret->Checkedin = Convert::ToBool($row['checkedin']);
                $ret->Checkedout = Convert::ToBool($row['checkedout']);
                $ret->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret->Cancelled = Convert::ToBool($row['cancelled']);
                $ret->IsOnline = intval($row['isonline']);
                $ret->PlatformName = $row['platformName'];
                $ret->ArrivalTime = $row['checkin_time'];
                $ret->getGuestInfo($row);

                if((($ret->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret->Activated === false))
                {
                    $ret->Status = 3;
                }
                else if(($ret->Activated === true) && (($ret->Checkoutdate->getValue() + (($ret->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret->Status = 1;
                }
                else if((($ret->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret->Activated === true))
                {
                    $ret->Status = 2;
                }
                $ret->Period = (($ret->Checkoutdate->getValue() - $ret->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function ByCustomer($customer)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($customer, "Customer") ? $customer->Id : $customer;

            $res = $db->query("SELECT * FROM reservation WHERE customer='$id' ORDER BY id DESC");
            
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function ByProperty($property)
        {
            $db = DB::GetDB();
            $ret = [];
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id'");
            
            while(($row = $res->fetch_assoc()) != null)
            {
                try{

                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
            
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
            
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                }
                catch(Exception $e)
                {
                    
                }
                $i++;
            }
            return $ret;
        }

        public static function Pending($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0");
             while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;

                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
            
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];


                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function Abandoned($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND noshow=1 OR noshow =2");
             while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function DueToday($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $start = strtotime(date("m/d/Y"));
            $stop = (($start) + ((60 * 60) * 24));

            $res = $db->query("SELECT * FROM reservation WHERE checkedin=0 AND (checkindate >= '$start' AND checkindate < '$stop') AND paid = 0 AND cancelled = 0");
            while(($row = $res->fetch_assoc()) != null)
            {
                if ($row['property'] == $id) :
                    
                    $ret[$i] = new Reservation();
                    $ret[$i]->Id = $row['reservationid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Property = new Property($row['property']);
                    $ret[$i]->Customer = new CustomerByProperty($GLOBALS['subscriber']);
                    $ret[$i]->Customer->Initialize($row['customer']);
                    $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                    $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                    $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                    
                    $ret[$i]->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$j]->room);
                        $ro->Number = $r[$j]->number;
                        
                        array_push($ret[$i]->Rooms, $ro);
                    }
                    
                    $ret[$i]->Total = $row['total'];
                    $ret[$i]->Discount = $row['discount'];
                    $ret[$i]->Paidamount = $row['paidamount'];
                    $ret[$i]->Children = $row['children'];
                    $ret[$i]->Adult = $row['adult'];
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Request = $row['request'];
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->Activated = Convert::ToBool($row['activated']);
                    $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                    $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                    $ret[$i]->Noshow = Convert::ToBool($row['noshow']);
                    $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                    $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                    $ret[$i]->IsOnline = intval($row['isonline']);
                    $ret[$i]->PlatformName = $row['platformName'];
                    $ret[$i]->ArrivalTime = $row['checkin_time'];
                    $ret[$i]->getGuestInfo($row);

                    if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                    {
                        $ret[$i]->Status = 3;
                    }
                    else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $ret[$i]->Status = 1;
                    }
                    else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                    {
                        $ret[$i]->Status = 2;
                    }
                    $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                    $i++;

                endif;
            }
            return $ret;
        }

        public static function DueTodayCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $today = intval(strtotime(date("m/d/Y", time())));

            // @var number $dueToday
            $dueToday = 0;

            // make query
            $ret = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin = 0 AND noshow = 0 AND cancelled = 0");

            // can we continue
            if ($ret->num_rows > 0)
            {
                while (($row = $ret->fetch_assoc()) !== null)
                {
                    // get date
                    $checkInDate = intval(strtotime(date('m/d/Y', $row['checkindate'])));

                    // are we good ?
                    if ($checkInDate == $today) $dueToday++;
                }
            }

            // close db
            $db->close();

            // return count
            return $dueToday;
        }

        public static function noShowCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $noShow = 0;
            $today = intval(strtotime(date("m/d/Y", time())));
            $ret = $db->query("SELECT * FROM reservation WHERE property='$id' AND noshow=1 AND checkedin=0");

            // can we continue
            if ($ret->num_rows > 0)
            {
                while (($row = $ret->fetch_assoc()) !== null)
                {
                    // get date
                    $checkInDate = intval(strtotime(date('m/d/Y', $row['checkindate'])));

                    // are we good ?
                    if ($checkInDate == $today) $noShow++;
                }
            }

            $db->close();
            return $noShow;
        }

        public static function PaidReservation($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0 AND paid=1");
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function UnpaidReservation($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0 AND paid=0");
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function get($property, $reservationid)
        {
            $db = DB::GetDB();
            $ret = new Reservation();
            $pid = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE reservationid='$reservationid' AND property='$pid'");

            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $ret->Id = $row['reservationid'];
                $ret->Created = new WixDate($row['created']);
                $ret->Property = new Property($row['property']);
                $ret->Customer = new Customer($row['customer']);
                $ret->Checkindate = new WixDate($row['checkindate']);
                $ret->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;
                $ret->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret->Property->Databasename, $ret->Property->DatabaseUser, $ret->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret->Rooms, $ro);
                }


                $ret->Total = $row['total'];
                $ret->Discount = $row['discount'];
                $ret->Paidamount = $row['paidamount'];
                $ret->Children = $row['children'];
                $ret->Adult = $row['adult'];
                $ret->Paid = Convert::ToBool($row['paid']);
                $ret->Request = $row['request'];
                $ret->Bookingnumber = $row['booking'];
                $ret->Activated = Convert::ToBool($row['activated']);
                $ret->Checkedin = Convert::ToBool($row['checkedin']);
                $ret->Checkedout = Convert::ToBool($row['checkedout']);
                $ret->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret->Cancelled = Convert::ToBool($row['cancelled']);
                $ret->IsOnline = intval($row['isonline']);
                $ret->PlatformName = $row['platformName'];
                $ret->ArrivalTime = $row['checkin_time'];

                if((($ret->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret->Activated === false))
                {
                    $ret->Status = 3;
                }
                else if(($ret->Activated === true) && (($ret->Checkoutdate->getValue() + (($ret->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret->Status = 1;
                }
                else if((($ret->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret->Activated === true))
                {
                    $ret->Status = 2;
                }
                $ret->Period = (($ret->Checkoutdate->getValue() - $ret->Checkindate->getValue()) / ((60 * 60) * 24));
            }
            return $ret;
        }

        public static function ReservationCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $res = $db->query("SELECT * FROM reservation WHERE property='$id'")->num_rows;
            return $res;
        }

        public static function ByPeriod($property, $start=null, $stop=null)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            // can we fetch for this month only
            $fetchForThisMonth = $start == FETCH_FOR_THIS_MONTH_ONLY ? true : false;

            // update start
            $start = ($fetchForThisMonth) ? null : $start;

            if($start == null)
            {
                $start = time();
            }

            if($stop == null)
            {
                $stop = $start + (((60 * 60) * 24) * 30);
            }

            $id = is_a($property, "Property") ? $property->Id : $property;

            // build query string
            $queryString = "SELECT * FROM reservation WHERE property='$id'";

            // get the first day of this month
            $dayStart = strtotime(date('m') . '/1/' . date('Y'));

            // get next month
            $nextMonth = intval(date('m', strtotime('+1 month')));

            // get year for next month
            $nextMonthYear = $nextMonth < intval(date('m')) ? (intval(date('Y')) + 1) : intval(date('Y'));

            // get the last day of next month
            $dayEnd = strtotime( $nextMonth . '/' . date('t', strtotime('+1 month')) . '/' . $nextMonthYear);

            // can we fetch for this month only
            $queryString .= ($fetchForThisMonth) ? "AND (checkindate >= '$dayStart' AND checkindate <= '$dayEnd') AND checkedout = 0 AND (noshow = 0 OR noshow = 2)" : '';
            
            // make query request
            $res = $db->query($queryString);
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;

                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($property->Databasename, $property->DatabaseUser, $property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;

                    array_push($ret[$i]->Rooms, $ro);
                }

                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = intval($row['checkedin']);
                $ret[$i]->Checkedout = intval($row['checkedout']);
                $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                $ret[$i]->IsOnline = intval($row['isonline']);
                $ret[$i]->PlatformName = $row['platformName'];
                $ret[$i]->ArrivalTime = $row['checkin_time'];
                $ret[$i]->getGuestInfo($row);
                

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        // can we show this reservation?
        private static function canShowReservation($row) : bool
        {
            // @var bool $canAdd
            $canAdd = false;

            // get date
            $dateTime = new DateTime((isset($_REQUEST['dueDate']) ? $_REQUEST['dueDate'] : ''));

            // created date
            //if (date('d/m/Y', $row['created']) == $dateTime->format('d/m/Y')) $canAdd = true;

            // check check in date
            if (date('m/d/Y', $row['checkindate']) == $dateTime->format('m/d/Y')) $canAdd = true;

            // can we continue
            if (isset($_REQUEST['dueDate']) && ($_REQUEST['dueDate'] == '' && $canAdd === false)) 
            {   
                // if (isset($_REQUEST['tab']) && $_REQUEST['tab'] == 'all') $canAdd = true;
            }

            // get last 30 days
            $last30Days = strtotime('today - 30 days');

            // manage range
            if (isset($_REQUEST['dueDate']) && isset($_REQUEST['dueDateTo']))
            {
                // can we add
                if ($canAdd === false)
                {
                    // only proceed if date range exists
                    if ($_REQUEST['dueDate'] != '' && $_REQUEST['dueDateTo'] != '')
                    {
                        // get date time 2
                        $dateTime2 = new DateTime(date('m/d/Y', $row['checkindate']));

                        // build time for range
                        $rangeTime = new DateTime($_REQUEST['dueDateTo']);

                        // check now
                        if ($dateTime2->getTimestamp() <= $rangeTime->getTimestamp() && $dateTime2->getTimestamp() >= $dateTime->getTimestamp()) $canAdd = true;
                    }
                    else
                    {
                        $today = intval(strtotime(date('m/d/Y')));

                        //if (intval($row['checkindate']) >= $last30Days) $canAdd = true;
                        if (intval($row['checkindate']) == $today) $canAdd = true;
                    }
                }
            }

            // return bool
            return $canAdd;
        }

        public static function applyFilter($property, $filter, $duedate, $source, $payment)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            $d = new WixDate($duedate);
            $dDate = $duedate != "" ? strtotime($d->Month."/".$d->Day."/".$d->Year) : "";

            $id = is_a($property, "Property") ? $property->Id : $property;
            $date = strtotime(date('d/M/Y'));

            $time = mktime(12,0,1,date('n'),date('j'),date('Y'));
            
            if($filter === 'all' && $payment === "paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND paid=1 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND paid=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND paid=1 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === 'all' && $payment === ""){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === 'all' && $payment === "unpaid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0  AND paid=0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0  AND paid=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0  AND paid=0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === 'all' && $payment === "partial-paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND paidamount < total AND discount = 0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND paidamount < total AND discount = 0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "abandoned" && $payment === ""){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "abandoned" && $payment === "paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND paid=1 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND paid=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND paid=1 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "abandoned" && $payment === "unpaid"){
                // $sourceVal = $source === '' ? null : ($source == 'walkin' ? $source : '');
                // if($sourceVal === null){
                //     $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0  AND paid=0 ORDER BY id DESC");            
                // }else{
                //     $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0  AND paid=0 AND platformName='$sourceVal' ORDER BY id DESC");            
                // }

                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND paid=0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND paid=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND (noshow=1 OR noshow=2) AND paid=0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "abandoned" && $payment === "partial-paid"){               
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND paidamount < total AND discount = 0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND paidamount < total AND discount = 0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "checkedin" && $payment === ""){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "checkedin" && $payment === "paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paid=1 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paid=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paid=1 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "checkedin" && $payment === "unpaid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paid=0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paid=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paid=0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "checkedin" && $payment === "partial-paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paidamount < total AND discount = 0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=1 AND paidamount < total AND discount = 0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "cancelled" && $payment === ""){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "cancelled" && $payment === "paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paid=1 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paid=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paid=1 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "cancelled" && $payment === "unpaid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paid=0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paid=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paid=0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "cancelled" && $payment === "partial-paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paidamount < total AND discount = 0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=1 AND paidamount < total AND discount = 0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "overdue" && $payment === ""){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND platformName='$source' ORDER BY id DESC");
                }
            }else if($filter === "overdue" && $payment === "paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND (platformName='' OR platformName=null OR platformName='walkin') AND paid=1 ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND paid=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND platformName='$source' AND paid=1 ORDER BY id DESC");
                }
            }else if($filter === "overdue" && $payment === "unpaid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND (platformName='' OR platformName=null OR platformName='walkin') AND paid=0 ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND paid=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND platformName='$source' AND paid=0 ORDER BY id DESC");
                }
            }else if($filter === "overdue" && $payment === "partial-paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND (platformName='' OR platformName=null OR platformName='walkin') AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate < '$time' AND checkedin=0 AND platformName='$source' AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }
            }else if($filter === "future-checkin" && $payment === ""){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND (platformName='' OR platformName=null OR platformName='walkin') ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND platformName='$source' ORDER BY id DESC");
                }                
            }else if($filter === "future-checkin" && $payment === "paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND (platformName='' OR platformName=null OR platformName='walkin') AND paid=1 ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND paid=1 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND platformName='$source' AND paid=1 ORDER BY id DESC");
                }                
            }else if($filter === "future-checkin" && $payment === "unpaid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND (platformName='' OR platformName=null OR platformName='walkin') AND paid=0 ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND paid=0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND platformName='$source' AND paid=0 ORDER BY id DESC");
                }                
            }else if($filter === "future-checkin" && $payment === "partial-paid"){
                if($source === 'walkin'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND (platformName='' OR platformName=null OR platformName='walkin') AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else if($source === 'all'){
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }else{
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkindate > '$time' AND platformName='$source' AND paidamount < total AND discount = 0 ORDER BY id DESC");
                }                
            }
            

            // get date
            $dateTime = new DateTime($duedate);

            while(($row = $res->fetch_assoc()) != null)
            {
                // show reservation for today
                if (self::canShowReservation($row)) :

                    $ret[$i] = new Reservation();
                    $ret[$i]->Id = $row['reservationid'];
                    $ret[$i]->Created = new WixDate($row['created']);
                    $ret[$i]->Property = new Property($row['property']);
                    $ret[$i]->Customer = new Customer($row['customer']);
                    $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                    $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                    $ret[$i]->UnconfirmedNoShow = $row['noshow'] == 2 ? 1 : 0;

                    $bookingid = $row['booking'];
                    $test = $db->query("SELECT checkout, checkin FROM lodging WHERE booking='$bookingid'");
                    $test2 = $test->fetch_assoc();
                    $ret[$i]->test = $test2;


                    $ret[$i]->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($j = 0; $j < count($r); $j++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($property->Databasename, $property->DatabaseUser, $property->DatabasePassword));
                        $ro->Room->Initialize($r[$j]->room);
                        $ro->Number = $r[$j]->number;

                        array_push($ret[$i]->Rooms, $ro);
                    }

                    $ret[$i]->Total = $row['total'];
                    $ret[$i]->Discount = $row['discount'];
                    $ret[$i]->Paidamount = $row['paidamount'];
                    $ret[$i]->Children = $row['children'];
                    $ret[$i]->Adult = $row['adult'];
                    $ret[$i]->Paid = Convert::ToBool($row['paid']);
                    $ret[$i]->Request = $row['request'];
                    $ret[$i]->Bookingnumber = $row['booking'];
                    $ret[$i]->Activated = Convert::ToBool($row['activated']);
                    $ret[$i]->Checkedin = intval($row['checkedin']);
                    $ret[$i]->Checkedout = self::checkIfCheckedOut($row, $db);
                    $ret[$i]->Noshow = ($row['noshow'] == 2 ? false : Convert::ToBool($row['noshow']));
                    $ret[$i]->CanMarkNoShow = self::canMarkAsNoShow($row);
                    $ret[$i]->Cancelled = Convert::ToBool($row['cancelled']);
                    $ret[$i]->IsOnline = intval($row['isonline']);
                    $ret[$i]->PlatformName = $row['platformName'];
                    $ret[$i]->ArrivalTime = $row['checkin_time'];
                    $ret[$i]->getGuestInfo($row);

                    if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                    {
                        $ret[$i]->Status = 3;
                    }
                    else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $ret[$i]->Status = 1;
                    }
                    else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                    {
                        $ret[$i]->Status = 2;
                    }
                    $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                    $i++;

                endif; 
            }
            return $ret;
        }

        // send confirmation email to customer
        public function sendConfirmationMail()
        {
            // send message to activate account
            $subscriber = new Subscriber();
            $mail = new Mail($subscriber);
            $template = new Messagetemplate($subscriber);
            $template->Initialize('18atvh6p7f7ub5f9');
            $mail->Body = $template->Body;

            // get customer
            $customer = $this->Customer;

            // add full name
            $mail->Body = str_replace('{contact}', ucwords($customer->Name . ' ' . $customer->Surname), $mail->Body);

            // get url
            $url = rtrim(Configuration::url()->domain, '/') . '/worker.php?job=confirm%20noshow&id='. $this->Id;

            // build link
            $link = '<a href="'.$url.'">Confirm Property Action</a>';

            // add link
            $mail->Body = str_replace('{link}', $link, $mail->Body);

            // build date
            $date = $this->Checkindate->Day . '/' . $this->Checkindate->Month . '/' . $this->Checkindate->Year;

            // replace date
            $mail->Body = str_replace('{date}', $date, $mail->Body);

            // replace property
            $mail->Body = str_replace('{property}', $this->Property->Name, $mail->Body);

            // continue
            $mail->From = $template->From;
            $mail->FromName = $template->Fromname;
            $mail->Subject = $template->Subject;
            $mail->ReplyTo = $template->Replyto;
            $mail->ReplyToName = $template->Fromname;
            $mail->isHTML = 'true';
            $mail->To = $customer->Email;
            $mail->ToName = ucwords($customer->Name . ' ' . $customer->Surname);

            // send mail
            Mail::send($subscriber, $mail);
        }

        // get a guest information
        public function getGuestInfo(array $row)
        {
            $db = DB::GetDB();

            // check reservation log
            $query = $db->query("SELECT booking_info FROM reservation_log WHERE reservationid = '$this->Id'");

            // are we good 
            if ($query->num_rows > 0) :

                // fetch all
                $record = $query->fetch_assoc();

                // decrypt
                $data = unserialize($this->decrypt($record['booking_info']));

                // is an array
                if (is_array($data)) :

                    // check guest_email
                    if (isset($data['guest_email'])) $this->GuestEmail = $data['guest_email'];

                    // check full name
                    if (isset($data['fullname'])) $this->GuestName = $data['fullname'];

                endif;

            endif;
        }

        // check if reservation can be mark as no show
        private static function canMarkAsNoShow(array $row) : bool 
        {
            // @var bool $canMark
            $canMark = false;

            // not checked in and out, include noshow
            if ($row['checkedout'] == 0 && $row['checkedin'] == 0 && $row['noshow'] == 0)
            {
                // not canceled
                if ($row['cancelled'] == 0)
                {
                    // get checkin
                    $checkinDate = date('d/M/Y', $row['checkindate']);

                    // are we clear for today?
                    if ($checkinDate == date('d/M/Y') || time() >= intval($row['checkindate']))
                    {
                        // get property checkin rule
                        $db = DB::GetDB();

                        // @var string $propertyId
                        $propertyId = $row['property'];

                        // fetch property
                        $property = $db->query("SELECT * FROM property WHERE propertyid = '{$propertyId}'");

                        // are we good ??
                        if ($property->num_rows > 0)
                        {
                            // fetch info
                            $property = $property->fetch_assoc();

                            // format checkin hour
                            $checkinHour = intval($property['checkinh']);

                            // format hour
                            if ($checkinHour < 12) $checkinHour += 12;

                            // get today
                            $month = date('n');
                            $day = date('j');
                            $year = date('Y');

                            // make time
                            $checkInTime = mktime($checkinHour, $property['checkinm'], 0, $month, $day, $year);

                            // build current time
                            $currentTime = mktime(date('H'), date('i'), date('s'), $month, $day, $year);

                            // passed time??
                            if ($currentTime > $checkInTime) $canMark = true;

                            // use default 
                            //if (time() >= intval($row['checkindate'])) $canMark = true;
                            if ($canMark == false)
                            {
                                // get current day
                                $currentDay = strtotime(date('m/d/Y', time()));

                                // get check in day
                                $checkInDay = strtotime(date('m/d/Y', $row['checkindate']));

                                // compare
                                if ($currentDay > $checkInDay) $canMark = true;
                            }
                        }
                    }
                    elseif (time() >= intval($row['checkindate']))
                    {
                        $canMark = true;
                    }
                }
            }

            // return bool
            return $canMark;
        }

        public static function moveReservationToLodging(Subscriber $subscriber, $property)
        {
            
            $lodging = new Lodging($subscriber);
            $reservation = new Reservation($_REQUEST['id']);

            $reservation->Checkedin = true;
            $reservation->Activated = true;
            $reservation->Noshow = false;
            $reservation->ArrivalTime = date('g:i a');

            $reservation->Save();

            $checkin = $reservation->Checkindate;
            $checkout = $reservation->Checkoutdate;

            // format reservation checkin and checkout date
            $indate = strtotime($checkin->Month."/".$checkin->Day."/".$checkin->Year);
			$outdate = strtotime($checkout->Month."/".$checkout->Day."/".$checkout->Year);  
            $lodging->Checkin = $indate;
            $lodging->Checkout = $outdate;

            $lodging->Guest = $reservation->Customer;
            $lodging->Bookingnumber = $reservation->Bookingnumber;
            $lodging->Children = Convert::ToInt($reservation->Children);
            $lodging->Adults = Convert::ToInt($reservation->Adult);
            
            $lodging->Discount = $reservation->Discount;
            $lodging->Taxes = doubleval(0);
            $lodging->Total = $reservation->Total;
            $lodging->PlatformName = $reservation->PlatformName;           
            $lodging->User = $_REQUEST['user_id'];
            $lodging->ReservationID = $reservation->Id; 
            
            // save customer
            if ( ($reservation->Customer->Phone != '' && !CustomerByProperty::PhoneExist($reservation->Customer->Phone)) && 
            ($reservation->Customer->Email != '' && !CustomerByProperty::EmailExist($reservation->Customer->Email)) )
            {
                $customer = new CustomerByProperty(new Subscriber());
                $customer->Email = $reservation->Customer->Email;
                $customer->Id = $reservation->Customer->Id;
                $customer->Phone = $reservation->Customer->Phone;
                $customer->fetchCustomerIdBeforeSaving(CustomerByProperty::SAVE_ON_CHECKIN);
            }

            $paid = $reservation->Paid;

            if ($paid == false)
            {
                // save into revenue
                Revenue::SaveFromArray([
                    'amount'    => $reservation->Paidamount,
                    'property'  => $property,
                    'mode'      => $_REQUEST['method'],
                    'customer'  => $customer->Id,
                    'code'      => 'lodging',
                    'remark'    => 'Lodging from frontdesk',
                    'userid'    => $_REQUEST['posuser'],
                    'resid'     => $reservation->Id
                ]);

                // get db instance
                $db = DB::GetDB();

                // update paid amount manually
                $db->query("UPDATE reservation SET paidamount = '{$reservation->Paidamount}' WHERE reservationid = '{$reservation->Id}'");
            }

            if ($reservation->Paidamount > 0)
            {
                $lodging->Paidamount = $reservation->Paidamount;
                $lodging->Paid = true;
            }
            
            $number = $_REQUEST['room'];
            $db = $subscriber->GetDB();

            $roomId = $db->query("SELECT roomid FROM room WHERE `number` = '$number'"); 
            if ($roomId->num_rows > 0):
                // fetch result
                $roomId = $roomId->fetch_assoc()['roomid'];                
            endif;

            
            $pixel = new Lodgepixel($subscriber, new stdClass());
            $roomCat = Room::Filter($subscriber, $roomId, 'roomid');
            
            $rooms = [];
            $rCat = null;

            for($j = 0; $j < count($roomCat); $j++)
            {
                if($roomCat[$j]->Number == $_REQUEST['room'])
                {
                    $pixel->Id = $roomCat[$j]->Id;
                    $rCat = $roomCat[$j]->Category;
                    $pixel->Number = $_REQUEST['room'];
                    $pixel->Category = $rCat;
                    $cc = new WixDate(Convert::ToInt($indate));
                    $cch = strtotime($cc->Month."/".$cc->Day."/".$cc->Year);
                    
                    // if($cch < strtotime(date("m/d/Y")))
                    // {
                    //     if (is_object($rCat)) {                            
                    //         $price = (round(strtotime(date("m/d/Y")) - $cch) / ((60 * 60) * 24)) * doubleval($rCat->Price);
                    //         $lodging->Total = doubleval($lodging->Total - $price);
                    //     }
                    // }

                    $checkin = new WixDate($indate);
                    $checkout = new WixDate(Convert::ToInt($outdate));

                    $pixel->Checkin = new WixDate(strtotime($checkin->Month."/".$checkin->Day."/".$checkin->Year));
                    $pixel->Checkout = new WixDate(strtotime($checkout->Month."/".$checkout->Day."/".$checkout->Year));

                    $lodging->Checkin = $checkin;
                    $lodging->Checkout = $checkout;

                    array_push($rooms, $pixel);
                }
            }

            $lodging->Rooms = $rooms;
            $lodging->Checkincount = count($rooms);
            $lodging->Save();


            // $obj = (object)null;
            // $obj->lodging = $lodging;
            // $obj->reservation = $reservation;
            // $obj->roomCat = $roomCat;
            // $obj->pixel = $pixel;
            
            
            // return $obj;
            return true;
        }
    }
    