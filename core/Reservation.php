<?php
	/* Generated by Wixnit Class Builder 
	// May, 26/2020
	// Building class for Reservation
	*/

	class Reservation
	{
		public $Id = "";
		public $Created = 0;
		public $Property = "";
		public $Customer = "";
		public $Checkindate = 0;
		public $Checkoutdate = 0;
		public $Rooms = array();
		public $Total = 0;
		public $Discount = 0;
		public $Paidamount = 0;
		public $Children = 0;
		public $Adult = 0;
		public $Paid = false;
		public $Request = "";
		public $Bookingnumber = "";
		public $Activated = false;
		public $Checkedin =false;
		public $Checkedout = false;
		public $Period = 0;
		
		public $Noshow = 0;

		public $Status = 0;


		public $Cancelled = false;

		function __construct($arg=null)
		{
			if($arg != null)
			{
				$db = DB::GetDB();

				$res = $db->query("SELECT * FROM reservation WHERE reservationid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['reservationid'];
					$this->Created = new WixDate($row['created']);
					$this->Property = new Property($row['property']);
					$this->Customer = new Customer($row['customer']);
					$this->Checkindate = new WixDate($row['checkindate']);
					$this->Checkoutdate = new WixDate($row['checkoutdate']);
					
					$this->Noshow = Convert::ToBool($row['noshow']);

                    $this->Rooms = [];
                    $r = json_decode($row['rooms']);

                    for($i = 0; $i < count($r); $i++)
                    {
                        $ro = new stdClass();
                        $ro->Room = new Roomcategory(new Subscriber($this->Property->Databasename, $this->Property->DatabaseUser, $this->Property->DatabasePassword));
                        $ro->Room->Initialize($r[$i]->room);
                        $ro->Number = $r[$i]->number;
                        
                        array_push($this->Rooms, $ro);
                    }

					$this->Total = $row['total'];
					$this->Discount = $row['discount'];
					$this->Paidamount = $row['paidamount'];
					$this->Children = $row['children'];
					$this->Adult = $row['adult'];
					$this->Paid = Convert::ToBool($row['paid']);
					$this->Request = $row['request'];
					$this->Bookingnumber = $row['booking'];
					$this->Activated = Convert::ToBool($row['activated']);
                    $this->Checkedin = Convert::ToBool($row['checkedin']);
                    $this->Checkedout = Convert::ToBool($row['checkedout']);

					if((($this->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($this->Activated === false))
                    {
                        $this->Status = 3;
                    }
					else if(($this->Activated === true) && (($this->Checkoutdate->getValue() + (($this->Property->Checkouth + 1) * (60 * 60))) < time()))
                    {
                        $this->Status = 1;
                    }
					else if((($this->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($this->Activated === true))
                    {
                        $this->Status = 2;
                    }
					$this->Period = (($this->Checkoutdate->getValue() - $this->Checkindate->getValue()) / ((60 * 60) * 24));
				}
			}
		}

		public function Save()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$created = time();
			$property = addslashes(is_a($this->Property, "Property") ? $this->Property->Id : $this->Property);
			$customer = addslashes(is_a($this->Customer, "Customer") ? $this->Customer->Id : $this->Customer);
			$checkindate = Convert::ToInt($this->Checkindate);
			$checkoutdate = Convert::ToInt($this->Checkoutdate);

			$total = floatval($this->Total);
			$discount = floatval($this->Discount);
			$paidamount = floatval($this->Paidamount);
			$children = Convert::ToInt($this->Children);
			$adult = Convert::ToInt($this->Adult);
			$paid = Convert::ToInt($this->Paid);
			$request = addslashes($this->Request);
			$booking = $this->Bookingnumber;
			$activated = Convert::ToInt($this->Activated);

			$checkedin = Convert::ToInt($this->Checkedin);
			$checkedout = Convert::ToInt($this->Checkedout);
			
			$noshow = Convert::ToInt($this->Noshow);

			if($booking == "")
            {
                $booking = strtoupper(Random::GenerateId(10));
                while($db->query("SELECT reservationid FROM reservation WHERE booking='$booking'")->num_rows > 0)
                {
                    $booking = strtoupper(Random::GenerateId(10));
                }
                $this->Bookingnumber = $booking;
            }

			$cancelled = Convert::ToInt($this->Cancelled);


			$rms = [];
			$r = $this->Rooms;
			for($i = 0; $i < count($r); $i++)
            {
                $std = new stdClass();
                $std->room = $r[$i]->Room->Id;
                $std->number = $r[$i]->Number;

                array_push($rms, $std);
            }
			$rooms = json_encode($rms);

			if($res = $db->query("SELECT reservationid FROM reservation WHERE reservationid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE reservation SET property='$property',customer='$customer',checkindate='$checkindate',checkoutdate='$checkoutdate',rooms='$rooms',total='$total',discount='$discount',paidamount='$paidamount',children='$children',adult='$adult',paid='$paid',request='$request',booking='$booking',activated='$activated',checkedin='$checkedin',checkedout='$checkedout',noshow='$noshow',cancelled='$cancelled' WHERE reservationid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT reservationid FROM reservation WHERE reservationid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO reservation(reservationid,created,property,customer,checkindate,checkoutdate,rooms,total,discount,paidamount,children,adult,paid,request,booking,activated,checkedin,checkedout,noshow,cancelled) VALUES ('$id','$created','$property','$customer','$checkindate','$checkoutdate','$rooms','$total','$discount','$paidamount','$children','$adult','$paid','$request','$booking','$activated','$checkedin','$checkedout','$noshow','$cancelled')");
			}
		}

		public function Delete()
		{
			$db = DB::GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM reservation WHERE reservationid='$id'");

			//Deleting Associated Objects
			/*n			$this->Property->Delete();

			$this->Customer->Delete();

			$this->Rooms->Delete();
			*/
		}

		public static function Search($property, $term='')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$id = is_a($property, "Property") ? $property->Id : $property;

			$res = $db->query("SELECT * FROM reservation WHERE property='$id' AND (customer LIKE '%$term%' OR checkindate LIKE '%$term%' OR checkoutdate LIKE '%$term%' OR rooms LIKE '%$term%' OR total LIKE '%$term%' OR discount LIKE '%$term%' OR paid LIKE '%$term%' OR children LIKE '%$term%' OR adult LIKE '%$term%' OR request LIKE '%$term%') ORDER BY id DESC");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }

                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function Filter($term='', $field='reservationid')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT reservationid FROM reservation WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function Order($field='id', $order='DESC')
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT reservationid FROM reservation ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = $row['property'];
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkindate = $row['checkindate'];
                $ret[$i]->Checkoutdate = $row['checkoutdate'];
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

		public static function All()
		{
			$db = DB::GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM reservation");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Reservation();
				$ret[$i]->Id = $row['reservationid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Property = $row['property'];
				$ret[$i]->Customer = $row['customer'];
				$ret[$i]->Checkindate = $row['checkindate'];
				$ret[$i]->Checkoutdate = $row['checkoutdate'];
				
				
				$ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
				
				$ret[$i]->Total = $row['total'];
				$ret[$i]->Discount = $row['discount'];
				$ret[$i]->Paidamount = $row['paidamount'];
				$ret[$i]->Children = $row['children'];
				$ret[$i]->Adult = $row['adult'];
				$ret[$i]->Paid = Convert::ToBool($row['paid']);
				$ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
				$i++;
			}
			return $ret;
		}

        public static function ByBookingNUmber($booking)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            $res = $db->query("SELECT * FROM reservation WHERE booking='$booking'");
            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $ret = new Reservation();
                $ret->Id = $row['reservationid'];
                $ret->Created = new WixDate($row['created']);
                $ret->Property = new Property($row['property']);
                $ret->Customer = new Customer($GLOBALS['subscriber']);
                $ret->Customer->Initialize($row['customer']);
                $ret->Checkindate = new WixDate($row['checkindate']);
                $ret->Checkoutdate = new WixDate($row['checkoutdate']);
                
                
                $ret->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret->Property->Databasename, $ret->Property->DatabaseUser, $ret->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$i]->number;
                    
                    array_push($ret->Rooms, $ro);
                }
                
                $ret->Total = $row['total'];
                $ret->Discount = $row['discount'];
                $ret->Paidamount = $row['paidamount'];
                $ret->Children = $row['children'];
                $ret->Adult = $row['adult'];
                $ret->Paid = Convert::ToBool($row['paid']);
                $ret->Request = $row['request'];
                $ret->Bookingnumber = $row['booking'];
                $ret->Activated = Convert::ToBool($row['activated']);
                $ret->Checkedin = Convert::ToBool($row['checkedin']);
                $ret->Checkedout = Convert::ToBool($row['checkedout']);
                $ret->Noshow = Convert::ToBool($row['noshow']);

                if((($ret->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret->Activated === false))
                {
                    $ret->Status = 3;
                }
                else if(($ret->Activated === true) && (($ret->Checkoutdate->getValue() + (($ret->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret->Status = 1;
                }
                else if((($ret->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret->Activated === true))
                {
                    $ret->Status = 2;
                }
                $ret->Period = (($ret->Checkoutdate->getValue() - $ret->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function ByCustomer($customer)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($customer, "Customer") ? $customer->Id : $customer;

            $res = $db->query("SELECT * FROM reservation WHERE customer='$id' ORDER BY id DESC");
            
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function ByProperty($property)
        {
            $db = DB::GetDB();
            $ret = [];
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id'");
            
            while(($row = $res->fetch_assoc()) != null)
            {
                try{

                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
            
            
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
            
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);


                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                }
                catch(Exception $e)
                {
                    
                }
                $i++;
            }
            return $ret;
        }

        public static function Pending($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0");
             while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
            
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
            
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function Abandoned($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND noshow=1");
             while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function DueToday($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $start = strtotime(date("m/d/Y"));
            $stop = (($start) + ((60 * 60) * 24));

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0 AND (checkindate >= '$start' AND checkindate < '$stop')");
             while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function DueTodayCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $today = strtotime(date("m/d/Y", time()));
            $ret = $db->query("SELECT id FROM reservation WHERE property='$id' AND checkindate='$today' AND checkedin=0")->num_rows;
            $db->close();
            return $ret;
        }

        public static function noShowCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $today = strtotime(date("d/m/Y"));
            $ret = $db->query("SELECT * FROM reservation WHERE property='$id' AND noshow=1 AND checkedin=0")->num_rows;
            $db->close();
            return $ret;
        }

        public static function PaidReservation($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0 AND paid=1");
             while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function UnpaidReservation($property)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND checkedin=0 AND paid=0");
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($GLOBALS['subscriber']);
                $ret[$i]->Customer->Initialize($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);
                
                
                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret[$i]->Property->Databasename, $ret[$i]->Property->DatabaseUser, $ret[$i]->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret[$i]->Rooms, $ro);
                }
                
                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = Convert::ToBool($row['checkedin']);
                $ret[$i]->Checkedout = Convert::ToBool($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function get($property, $reservationid)
        {
            $db = DB::GetDB();
            $ret = new Reservation();
            $pid = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE reservationid='$reservationid' AND property='$pid'");

            if($res->num_rows > 0)
            {
                $row = $res->fetch_assoc();

                $ret->Id = $row['reservationid'];
                $ret->Created = new WixDate($row['created']);
                $ret->Property = new Property($row['property']);
                $ret->Customer = new Customer($row['customer']);
                $ret->Checkindate = new WixDate($row['checkindate']);
                $ret->Checkoutdate = new WixDate($row['checkoutdate']);

                $ret->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($ret->Property->Databasename, $ret->Property->DatabaseUser, $ret->Property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;
                    
                    array_push($ret->Rooms, $ro);
                }


                $ret->Total = $row['total'];
                $ret->Discount = $row['discount'];
                $ret->Paidamount = $row['paidamount'];
                $ret->Children = $row['children'];
                $ret->Adult = $row['adult'];
                $ret->Paid = Convert::ToBool($row['paid']);
                $ret->Request = $row['request'];
                $ret->Bookingnumber = $row['booking'];
                $ret->Activated = Convert::ToBool($row['activated']);
                $ret->Checkedin = Convert::ToBool($row['checkedin']);
                $ret->Checkedout = Convert::ToBool($row['checkedout']);
                $ret->Noshow = Convert::ToBool($row['noshow']);

                if((($ret->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret->Activated === false))
                {
                    $ret->Status = 3;
                }
                else if(($ret->Activated === true) && (($ret->Checkoutdate->getValue() + (($ret->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret->Status = 1;
                }
                else if((($ret->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret->Activated === true))
                {
                    $ret->Status = 2;
                }
                $ret->Period = (($ret->Checkoutdate->getValue() - $ret->Checkindate->getValue()) / ((60 * 60) * 24));
            }
            return $ret;
        }

        public static function ReservationCount($property)
        {
            $db = DB::GetDB();
            $id = is_a($property, "Property") ? $property->Id : $property;
            $res = $db->query("SELECT * FROM reservation WHERE property='$id'")->num_rows;
            return $res;
        }

        public static function ByPeriod($property, $start=null, $stop=null)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            if($start == null)
            {
                $start = time();
            }
            if($stop == null)
            {
                $stop = $start + (((60 * 60) * 24) * 30);
            }

            $id = is_a($property, "Property") ? $property->Id : $property;

            $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0");
            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);


                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($property->Databasename, $property->DatabaseUser, $property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;

                    array_push($ret[$i]->Rooms, $ro);
                }

                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = intval($row['checkedin']);
                $ret[$i]->Checkedout = intval($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }

        public static function applyFilter($property, $filter, $duedate)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;

            $d = new WixDate($duedate);
            $dDate = $duedate != "" ? strtotime($d->Month."/".$d->Day."/".$d->Year) : "";

            $id = is_a($property, "Property") ? $property->Id : $property;

            if($duedate == "")
            {
                if($filter === "all")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 ORDER BY id DESC");
                }
                else if($filter === "paid")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND paid=1 ORDER BY id DESC");
                }
                else if($filter === "unpaid")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND paid=0 ORDER BY id DESC");
                }
                else if($filter === "abandoned")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND noshow=1 ORDER BY id DESC");
                }
            }
            else
            {
                if($filter === "all")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND checkindate='$dDate' ORDER BY id DESC");
                }
                else if($filter === "paid")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND paid=1 AND checkindate='$dDate' ORDER BY id DESC");
                }
                else if($filter === "unpaid")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND paid=0 AND checkindate='$dDate' ORDER BY id DESC");
                }
                else if($filter === "abandoned")
                {
                    $res = $db->query("SELECT * FROM reservation WHERE property='$id' AND cancelled=0 AND checkedin=0 AND noshow=1 AND checkindate='$dDate' ORDER BY id DESC");
                }
            }


            while(($row = $res->fetch_assoc()) != null)
            {
                $ret[$i] = new Reservation();
                $ret[$i]->Id = $row['reservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Property = new Property($row['property']);
                $ret[$i]->Customer = new Customer($row['customer']);
                $ret[$i]->Checkindate = new WixDate($row['checkindate']);
                $ret[$i]->Checkoutdate = new WixDate($row['checkoutdate']);


                $ret[$i]->Rooms = [];
                $r = json_decode($row['rooms']);

                for($j = 0; $j < count($r); $j++)
                {
                    $ro = new stdClass();
                    $ro->Room = new Roomcategory(new Subscriber($property->Databasename, $property->DatabaseUser, $property->DatabasePassword));
                    $ro->Room->Initialize($r[$j]->room);
                    $ro->Number = $r[$j]->number;

                    array_push($ret[$i]->Rooms, $ro);
                }

                $ret[$i]->Total = $row['total'];
                $ret[$i]->Discount = $row['discount'];
                $ret[$i]->Paidamount = $row['paidamount'];
                $ret[$i]->Children = $row['children'];
                $ret[$i]->Adult = $row['adult'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Request = $row['request'];
                $ret[$i]->Bookingnumber = $row['booking'];
                $ret[$i]->Activated = Convert::ToBool($row['activated']);
                $ret[$i]->Checkedin = intval($row['checkedin']);
                $ret[$i]->Checkedout = intval($row['checkedout']);
                $ret[$i]->Noshow = Convert::ToBool($row['noshow']);

                if((($ret[$i]->Checkindate->getValue() + (24 * (60 * 60))) > time()) && ($ret[$i]->Activated === false))
                {
                    $ret[$i]->Status = 3;
                }
                else if(($ret[$i]->Activated === true) && (($ret[$i]->Checkoutdate->getValue() + (($ret[$i]->Property->Checkouth + 1) * (60 * 60))) < time()))
                {
                    $ret[$i]->Status = 1;
                }
                else if((($ret[$i]->Checkoutdate->getValue() + (24 * (60 * 60))) < time()) && ($ret[$i]->Activated === true))
                {
                    $ret[$i]->Status = 2;
                }
                $ret[$i]->Period = (($ret[$i]->Checkoutdate->getValue() - $ret[$i]->Checkindate->getValue()) / ((60 * 60) * 24));
                $i++;
            }
            return $ret;
        }
    }
