<?php
	/* Generated by Wixnit Class Builder 
	// Dec, 31/2020
	// Building class for Revenue
	*/

	class Revenue
	{
        public $Id;
        public $Created;
        public $Amount;
        public $Property;
        public $PaymentMode;
        public $Customer = [];
        public $PaymentCode = '';
        public $Remark = '';
        public $UserId = [];
        public $CommissionEarned = 0;
        public $ReservationId = '';

        private $subscriber = null;

        function __construct(Subscriber $subscriber)
		{
            $this->subscriber = $subscriber;
        }
        
        public function Initialize($arg=null)
        {
            if ($arg != null)
            {
                $db = $this->subscriber->GetDB();

                $res = $db->query("SELECT * FROM revenue WHERE revenueid='$arg'");

                if ($res->num_rows > 0) $this->InitializeWithRow($res->fetch_assoc());
            }
        }

        public function InitializeWithRow(array $row)
        {
            $this->Id = $row['revenueid'];
            $this->Created = new WixDate($row['created']);
            $this->Amount = doubleval($row['amount']);
            $this->Property = new Property($row['propertyid']);
            $this->PaymentMode = $row['payment_mode'];
            $this->Customer = new Customer($row['customerid']);
            $this->PaymentCode = $row['payment_code'];
            $this->Remark = $row['remark'];
            $this->UserId = new User($row['userid']);
            $this->CommissionEarned = doubleval($row['commission_earned']);
            $this->ReservationId = $row['reservationid'];
        }

        public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$amount = doubleval($this->Amount);
			$property = addslashes(is_a($this->Property, "Property") ? $this->Property->Id : $this->Property);
			$paymentMode = addslashes($this->PaymentMode);
			$customerid = addslashes(is_a($this->Customer, "Customer") ? $this->Customer->Id : $this->Customer);
			$paymentCode = addslashes($this->PaymentCode);
            $remark = addslashes($this->Remark);
            $userid = addslashes(is_a($this->UserId, "UserId") ? $this->UserId->Id : $this->UserId);
            $commissionEarned = doubleval($this->CommissionEarned);
            $reservationid = addslashes($this->ReservationId);

			if($res = $db->query("SELECT revenueid FROM revenue WHERE revenueid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE revenue SET amount='$amount',propertyid='$property',payment_mode='$paymentMode',customerid='$customerid',payment_code='$paymentCode',remark='$remark',userid='$userid',commission_earned = '$commissionEarned',reservationid = '$reservationid' WHERE id = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT revenueid FROM revenue WHERE revenueid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO revenue (revenueid,created,amount,propertyid,payment_mode,customerid,payment_code,remark,userid,commission_earned,reservationid) VALUES ('$id','$created','$amount','$property','$paymentMode','$customerid','$paymentCode','$remark','$userid','$commissionEarned','$reservationid')");
			}
        }

        // save from array
        public static function SaveFromArray(array $data)
        {
            $subscriber = new Subscriber();
            $payment = new Revenue($subscriber);
            $payment->Amount = isset($data['amount']) ? $data['amount'] : $payment->Amount;
            $payment->Property = isset($data['property']) ? $data['property'] : $payment->Property;
            $payment->PaymentMode = isset($data['mode']) ? $data['mode'] : $payment->PaymentMode;
            $payment->Customer = isset($data['customer']) ? $data['customer'] : $payment->Customer;
            $payment->PaymentCode = isset($data['code']) ? $data['code'] : $payment->PaymentCode;
            $payment->Remark = isset($data['remark']) ? $data['remark'] : $payment->Remark;
            $payment->UserId = isset($data['userid']) ? $data['userid'] : $payment->UserId;
            $payment->ReservationId = isset($data['resid']) ? $data['resid'] : $payment->ReservationId;

            // get commission
            $totalCommission = 0;

            // not refund
            if ($payment->PaymentCode != 'refund') :

                // @var mixed $db 
                $db = DB::GetDB();

                // get property
                $property = addslashes(is_a($payment->Property, "Property") ? $payment->Property->Id : $payment->Property);

                // load property
                $property = $db->query("SELECT commission,commisson_discount FROM property WHERE propertyid = '{$property}'");

                // are we good
                if ($property->num_rows > 0) :

                    // get property
                    $propertyData = $property->fetch_assoc();

                    // fetch
                    $totalCommission = doubleval($propertyData['commission']);

                    // subtract
                    $totalCommission -= intval($propertyData['commisson_discount']);

                endif;

                // get general commission
                if ($totalCommission == 0) : 

                    // load system
                    $system = $db->query("SELECT property_comission FROM `system` WHERE id = 1");

                    // are we good
                    if ($system->num_rows > 0) :

                        // fetch
                        $totalCommission = doubleval($system->fetch_assoc()['property_comission']);

                    endif;

                endif;

                // calculate commission
                if ($totalCommission > 0) :

                    $totalCommission = (doubleval($payment->Amount) * $totalCommission) / 100;
                    
                endif;

            endif;

            $payment->CommissionEarned = $totalCommission;
            $payment->Save();
        }
        
        public static function ByProperty()
		{
			$db = DB::GetDB();
			$ret = array();
            $i = 0;
            $property = isset($_REQUEST['property']) ? $_REQUEST['property'] : $_REQUEST['propertyid'];
            $subscriber = new Subscriber();

			$res = $db->query("SELECT * FROM revenue WHERE propertyid = '$property'");
			while (($row = $res->fetch_assoc()) != null)
			{
				if (self::canShowRevenue($row)) :

                    $ret[$i] = new Revenue($subscriber);
                    $ret[$i]->InitializeWithRow($row);
                    $i++;
                    
                endif;
			}
			return $ret;
        }
        
        public static function ByCustomer($customer)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($customer, "Customer") ? $customer->Id : $customer;
            $subscriber = new Subscriber();

            $res = $db->query("SELECT * FROM revenue WHERE customerid='$id' ORDER BY id DESC");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) :

                    $ret[$i] = new Revenue($subscriber);
                    $ret[$i]->InitializeWithRow($row);
                    $i++;

                endif;
            }
            
            return $ret;
        }

        public static function ByUser($user)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($user, "User") ? $user->Id : $user;
            $subscriber = new Subscriber();

            $res = $db->query("SELECT * FROM revenue WHERE userid='$id' ORDER BY id DESC");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) :

                    $ret[$i] = new Revenue($subscriber);
                    $ret[$i]->InitializeWithRow($row);
                    $i++;

                endif;
            }
            
            return $ret;
        }

        public static function ByVehicle($vehicle)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $id = is_a($vehicle, "Vehicle") ? $vehicle->Id : $vehicle;
            $subscriber = new Subscriber();

            $res = $db->query("SELECT * FROM revenue WHERE vehicleid='$id' ORDER BY id DESC");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) :

                    $ret[$i] = new Revenue($subscriber);
                    $ret[$i]->InitializeWithRow($row);
                    $i++;

                endif;
            }
            
            return $ret;
        }

        public static function ByPaymentMode($paymentMode, $identifier)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $subscriber = new Subscriber();

            // identifier can either be user, customer, property, or vehicle object
            $identifier = self::loadIdentifier($identifier);

            // make query
            $res = $db->query("SELECT * FROM revenue WHERE payment_mode='$paymentMode' $identifier ORDER BY id DESC");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) :

                    $ret[$i] = new Revenue($subscriber);
                    $ret[$i]->InitializeWithRow($row);
                    $i++;

                endif;
            }
            
            return $ret;
        }

        public static function ByPaymentCode($paymentCode, $identifier)
        {
            $db = DB::GetDB();
            $ret = array();
            $i = 0;
            $subscriber = new Subscriber();

            // identifier can either be user, customer, property, or vehicle object
            $identifier = self::loadIdentifier($identifier);

            // make query
            $res = $db->query("SELECT * FROM revenue WHERE payment_code='$paymentCode' $identifier ORDER BY id DESC");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) :

                    $ret[$i] = new Revenue($subscriber);
                    $ret[$i]->InitializeWithRow($row);
                    $i++;

                endif;
            }
            
            return $ret;
        }

        public static function TotalRevenue($identifier)
        {
            $db = DB::GetDB();
            $total = 0;
            $subscriber = new Subscriber();

            // identifier can either be user, customer, property, or vehicle object
            $identifier = self::loadIdentifier($identifier);

            // make query
            $res = $db->query("SELECT amount,created FROM revenue WHERE payment_code != 'refund' $identifier");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) $total += doubleval($row['amount']);
            }
            
            return $total;
        }

        public static function TotalRefunds($identifier)
        {
            $db = DB::GetDB();
            $total = 0;
            $subscriber = new Subscriber();

            // identifier can either be user, customer, property, or vehicle object
            $identifier = self::loadIdentifier($identifier);

            // make query
            $res = $db->query("SELECT amount,created FROM revenue WHERE payment_code = 'refund' $identifier");
            
            while (($row = $res->fetch_assoc()) != null)
            {
                if (self::canShowRevenue($row)) $total += doubleval($row['amount']);
            }
            
            return $total;
        }

        // can we show this report?
        public static function canShowRevenue($row) : bool
        {
            // @var bool $canAdd
            $canAdd = false;

            // get date
            $dateTime = new DateTime((isset($_REQUEST['dueDate']) ? $_REQUEST['dueDate'] : ''));

            // get last 30 days
            $last30Days = strtotime('today - 30 days');

            // manage range
            if (isset($_REQUEST['dueDate']) && isset($_REQUEST['dueDateTo']))
            {
                // can we add
                if ($canAdd === false)
                {
                    // only proceed if date range exists
                    if ($_REQUEST['dueDate'] != '' && $_REQUEST['dueDateTo'] != '')
                    {
                        // get date time 2
                        $dateTime2 = new DateTime(date('m/d/Y', $row['created']));

                        // build time for range
                        $rangeTime = new DateTime($_REQUEST['dueDateTo']);

                        // check now
                        if ($dateTime2->getTimestamp() <= $rangeTime->getTimestamp() && $dateTime2->getTimestamp() >= $dateTime->getTimestamp()) $canAdd = true;
                    }
                    else
                    {
                        if (intval($row['created']) >= $last30Days) $canAdd = true;
                    }
                }
            }
            else
            {
                $canAdd = true;
            }

            // return bool
            return $canAdd;
        }

        // apply filter
        public static function applyFilter()
        {
            // get user 
            $user = addslashes($_REQUEST['posuser']);

            // get property
            $property = isset($_REQUEST['property']) ? $_REQUEST['property'] : $_REQUEST['propertyid'];

            // generate sql statement
            $statement = "SELECT * FROM revenue WHERE propertyid = '$property' AND userid = '$user' ";

            // manage filter
            switch ($_REQUEST['filter']) :

              // get income
              case 'income':
                  $statement .= " AND payment_code != 'refund' ";
              break;

              // get refund
              case 'refund':
                  $statement .= " AND payment_code = 'refund' ";
              break;

            endswitch;

            // manage sort 
            if ($_REQUEST['sort_by'] != '' && $_REQUEST['sort_by'] != null)
            {
                if ($_REQUEST['sort_by'] != 'all')
                {
                    $mode = addslashes($_REQUEST['sort_by']);
                    $statement .= " AND payment_mode = '$mode' ";
                }
            }

            $sumPage = function($base, $increment)
            {
              $total = 0;

              // run for loop
              for ($x=1; $x<$increment; $x++)
              {
                  $total += $base;
              }

              return $total;
            };

            // handle pagination
            $min = intval($_REQUEST['Page'])-1;
            $min = ($min > 1) ? $sumPage(intval($_REQUEST['Perpage']), $min) : $min;

            // get max
            $max = intval($_REQUEST['Perpage']);
            $max = (intval($_REQUEST['Page'])-1) > 1 ? ($max * (intval($_REQUEST['Page']) - 1)) : $max;

            // build limit
            $limit = 'LIMIT ' . $min . ',' . $max;

            // load subscriber
            $subscriber = new Subscriber();

            // load array and index
            $ret = array();
            $i = 0;
            // make query
            $db = DB::GetDB();


            // query function
            $queryFunction = function($statement, $subscriber) use (&$ret, &$i, &$db)
            {
                
                $res = $db->query($statement);
                while (($row = $res->fetch_assoc()) != null)
                {
                    if (Revenue::canShowRevenue($row)) :

                        $ret[$i] = new Revenue($subscriber);
                        $ret[$i]->InitializeWithRow($row);
                        $i++;
                        
                    endif;
                }
            };

            // search term empty
            if ($_REQUEST['searchterm'] == '')
            {
              $statement .= 'ORDER BY id desc ' . $limit;

              // run now
              $queryFunction($statement, $subscriber);
            }
            else
            {
                $term = addslashes($_REQUEST['searchterm']);

                // check customer information
                $res = $db->query("SELECT * FROM customer WHERE email LIKE '%$term%' OR `name` LIKE '%$term%' OR surname LIKE '%$term%' OR phone LIKE '%$term%'");
                
                // check fullname
                if ($res->num_rows == 0)
                {
                    $termArray = explode(' ', trim($term));
        
                    // check length
                    if (count($termArray) == 2)
                    {
                        // get first name last name
                        list($name, $lastname) = $termArray;
        
                        // check now
                        $res = $db->query("SELECT * FROM customer WHERE `name` LIKE '%$name%' OR surname LIKE '%$lastname%'");
                    }
                }

                // Check now
                if ($res->num_rows > 0)
                {
                    // run loop
                    while (($row = $res->fetch_assoc()) != null)
                    {
                        $newStatement = $statement . " AND customerid = '{$row['customerid']}' " . 'ORDER BY id desc ' . $limit;
                        $queryFunction($newStatement, $subscriber);
                    }
                }
                else
                {
                    $statement .= " AND (payment_code LIKE '%$term%' OR amount LIKE '%$term%' OR payment_mode LIKE '%$term%' OR remark LIKE '%$term%') " . 'ORDER BY id desc ' . $limit;
                    $queryFunction($statement, $subscriber);
                }
            }

            

            return $ret;
        }

        // manage identifiers
        private static function loadIdentifier($identifier) : string
        {
            // @var string $extra
            $extra = '';

            // check for property
            if (is_a($identifier, 'Property')) $extra = " AND propertyid = '$identifier->Id'";

            // check customer
            if (is_a($identifier, 'Customer')) $extra = " AND customerid = '$identifier->Id'";

            // check user
            if (is_a($identifier, 'User')) $extra = " AND userid = '$identifier->Id'";

            // return string
            return $extra;
        }

    }
