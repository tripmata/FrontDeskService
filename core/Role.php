<?php
	/* Generated by Wixnit Class Builder 
	// Aug, 18/2019
	// Building class for Role
	*/

	class Role
	{
		public $Id = "";
		public $Created = 0;
        /**
         * @var Access
         */
		public $Booking = 0;
        /**
         * @var Access
         */
		public $Discount = 0;
        /**
         * @var Access
         */
		public $Customers = 0;
        /**
         * @var Access
         */
		public $Staff = 0;
        /**
         * @var Access
         */
		public $Rooms = 0;
        /**
         * @var Access
         */
		public $Kitchen = 0;
        /**
         * @var Access
         */
		public $Bakery = 0;
        /**
         * @var Access
         */
		public $Bar = 0;
        /**
         * @var Access
         */
		public $Laundry = 0;
        /**
         * @var Access
         */
		public $Housekeeping = 0;
        /**
         * @var Access
         */
		public $Pool = 0;
        /**
         * @var Access
         */
		public $Store = 0;
        /**
         * @var Access
         */
		public $Event = 0;
        /**
         * @var Access
         */
		public $Finance = 0;
        /**
         * @var Access
         */
		public $Branch = 0;
        /**
         * @var Access
         */
		public $Log = 0;
        /**
         * @var Access
         */
		public $Report = 0;
        /**
         * @var Access
         */
		public $Messaging = 0;
        /**
         * @var Access
         */
		public $Webfront = 0;
        /**
         * @var Access
         */
		public $Webconfig = 0;
        /**
         * @var Access
         */
		public $Settings = 0;
        /**
         * @var string
         */
		public $Name = "";

		//Define system access and roles
		public $System = false;
        /**
         * @var Access
         */
		public $Frontdesk = 0;
        /**
         * @var Access
         */
		public $Kitchenpos = 0;
        /**
         * @var Access
         */
		public $Laundrypos = 0;
        /**
         * @var Access
         */
		public $Bakerypos = 0;
        /**
         * @var Access
         */
		public $Poolpos = 0;
        /**
         * @var Access
         */
		public $Barpos = 0;
		
		private $subscriber = null;

		const KitchenPOS = "kitchen_pos";
		const BarPOS = "bar_pos";
		const LaundryPOS = "laundry_pos";
		const BakeryPOS = "bakery_pos";
		const PoolPOS = "pool_pos";
		const FrontDesk = "frontdesk";

		function __construct(Subscriber $sub)
		{
			$this->subscriber = $sub;
		}

		
		public function Initialize($arg=null)
		{
			if($arg != null)
			{
				$db = $this->subscriber->GetDB();

				$res = $db->query("SELECT * FROM role WHERE roleid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['roleid'];
					$this->Created = new WixDate($row['created']);
					$this->Booking = new Access(Convert::ToInt($row['booking']));
					$this->Discount = new Access(Convert::ToInt($row['discount']));
					$this->Customers = new Access(Convert::ToInt($row['customers']));
					$this->Staff = new Access(Convert::ToInt($row['staff']));
					$this->Rooms = new Access(Convert::ToInt($row['rooms']));
					$this->Kitchen = new Access(Convert::ToInt($row['kitchen']));
					$this->Bakery = new Access(Convert::ToInt($row['bakery']));
					$this->Bar = new Access(Convert::ToInt($row['bar']));
					$this->Laundry = new Access(Convert::ToInt($row['laundry']));
					$this->Housekeeping = new Access(Convert::ToInt($row['housekeeping']));
					$this->Pool = new Access(Convert::ToInt($row['pool']));
					$this->Store = new Access(Convert::ToInt($row['store']));
					$this->Event = new Access(Convert::ToInt($row['event']));
					$this->Finance = new Access(Convert::ToInt($row['finance']));
					$this->Branch = new Access(Convert::ToInt($row['branch']));
					$this->Log = new Access(Convert::ToInt($row['log']));
					$this->Report = new Access(Convert::ToInt($row['report']));
					$this->Messaging = new Access(Convert::ToInt($row['messaging']));
					$this->Webfront = new Access(Convert::ToInt($row['webfront']));
					$this->Webconfig = new Access(Convert::ToInt($row['webconfig']));
					$this->Settings = new Access(Convert::ToInt($row['settings']));
					$this->Name = $row['name'];


                    //System variables
                    $this->System = Convert::ToBool($row['system']);

                    $this->Frontdesk = new Access(Convert::ToInt($row['frontdesk']));
                    $this->Kitchenpos = new Access(Convert::ToInt($row['kitchenpos']));
                    $this->Laundrypos = new Access(Convert::ToInt($row['laundrypos']));
                    $this->Bakerypos = new Access(Convert::ToInt($row['bakerypos']));
                    $this->Poolpos = new Access(Convert::ToInt($row['poolpos']));
                    $this->Barpos = new Access(Convert::ToInt($row['barpos']));
				}
			}
		}

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$booking = Convert::ToInt(is_a($this->Booking, "Access") ? $this->Booking->toInt() : $this->Booking);
			$discount = Convert::ToInt(is_a($this->Discount, "Access") ? $this->Discount->toInt() : $this->Discount);
			$customers = Convert::ToInt(is_a($this->Customers, "Access") ? $this->Customers->toInt() : $this->Customers);
			$staff = Convert::ToInt(is_a($this->Staff, "Access") ? $this->Staff->toInt() : $this->Staff);
			$rooms = Convert::ToInt(is_a($this->Rooms, "Access") ? $this->Rooms->toInt() : $this->Rooms);
			$kitchen = Convert::ToInt(is_a($this->Kitchen, "Access") ? $this->Kitchen->toInt() : $this->Kitchen);
			$bakery = Convert::ToInt(is_a($this->Bakery, "Access") ? $this->Bakery->toInt() : $this->Bakery);
			$bar = Convert::ToInt(is_a($this->Bar, "Access") ? $this->Bar->toInt() : $this->Bar);
			$laundry = Convert::ToInt(is_a($this->Laundry, "Access") ? $this->Laundry->toInt() : $this->Laundry);
			$housekeeping = Convert::ToInt(is_a($this->Housekeeping, "Access") ? $this->Housekeeping->toInt() : $this->Housekeeping);
			$pool = Convert::ToInt(is_a($this->Pool, "Access") ? $this->Pool->toInt() : $this->Pool);
			$store = Convert::ToInt(is_a($this->Store, "Access") ? $this->Store->toInt() : $this->Store);
			$event = Convert::ToInt(is_a($this->Event, "Access") ? $this->Event->toInt() : $this->Event);
			$finance = Convert::ToInt(is_a($this->Finance, "Access") ? $this->Finance->toInt() : $this->Finance);
			$branch = Convert::ToInt(is_a($this->Branch, "Access") ? $this->Branch->toInt() : $this->Branch);
			$log = Convert::ToInt(is_a($this->Log, "Access") ? $this->Log->toInt() : $this->Log);
			$report = Convert::ToInt(is_a($this->Report, "Access") ? $this->Report->toInt() : $this->Report);
			$messaging = Convert::ToInt(is_a($this->Messaging, "Access") ? $this->Messaging->toInt() : $this->Messaging);
			$webfront = Convert::ToInt(is_a($this->Webfront, "Access") ? $this->Webfront->toInt() : $this->Webfront);
			$webconfig = Convert::ToInt(is_a($this->Webconfig, "Access") ? $this->Webconfig->toInt() : $this->Webconfig);
			$settings = Convert::ToInt(is_a($this->Settings, "Access") ? $this->Settings->toInt() : $this->Settings);
			$name = addslashes($this->Name);

			//System Variables
			$system = Convert::ToInt($this->System);
            $frontdesk  = Convert::ToInt(is_a($this->Frontdesk, "Access") ? $this->Frontdesk->toInt() : $this->Frontdesk);
            $kitchenpos = Convert::ToInt(is_a($this->Kitchenpos, "Access") ? $this->Kitchenpos->toInt() : $this->Kitchenpos);
            $laundrypos = Convert::ToInt(is_a($this->Laundrypos, "Access") ? $this->Laundrypos->toInt() : $this->Laundrypos);
            $bakerypos = Convert::ToInt(is_a($this->Bakerypos, "Access") ? $this->Bakerypos->toInt() : $this->Bakerypos);
            $poolpos = Convert::ToInt(is_a($this->Poolpos, "Access") ? $this->Poolpos->toInt() : $this->Poolpos);
            $barpos = Convert::ToInt(is_a($this->Barpos, "Access") ? $this->Barpos->toInt() : $this->Barpos);

			if($res = $db->query("SELECT roleid FROM role WHERE roleid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE role SET booking='$booking',discount='$discount',customers='$customers',staff='$staff',rooms='$rooms',kitchen='$kitchen',bakery='$bakery',bar='$bar',laundry='$laundry',housekeeping='$housekeeping',pool='$pool',store='$store',event='$event',finance='$finance',branch='$branch',log='$log',report='$report',messaging='$messaging',webfront='$webfront',webconfig='$webconfig',settings='$settings',name='$name',system='$system',frontdesk='$frontdesk',barpos='$barpos',kitchenpos='$kitchenpos',bakerypos='$bakerypos',laundrypos='$laundrypos',poolpos='$poolpos' WHERE roleid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT roleid FROM role WHERE roleid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO role(roleid,created,booking,discount,customers,staff,rooms,kitchen,bakery,bar,laundry,housekeeping,pool,store,event,finance,branch,log,report,messaging,webfront,webconfig,settings,name,system,frontdesk,barpos,kitchenpos,bakerypos,laundrypos,poolpos) VALUES ('$id','$created','$booking','$discount','$customers','$staff','$rooms','$kitchen','$bakery','$bar','$laundry','$housekeeping','$pool','$store','$event','$finance','$branch','$log','$report','$messaging','$webfront','$webconfig','$settings','$name','$system','$frontdesk','$barpos','$kitchenpos','$bakerypos','$laundrypos','$poolpos')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM role WHERE roleid='$id' AND system =0");

			//Deleting Associated Objects
			/*n			$this->Booking->Delete();

			$this->Discount->Delete();

			$this->Customers->Delete();

			$this->Staff->Delete();

			$this->Rooms->Delete();

			$this->Kitchen->Delete();

			$this->Bakery->Delete();

			$this->Bar->Delete();

			$this->Laundry->Delete();

			$this->Housekeeping->Delete();

			$this->Pool->Delete();

			$this->Store->Delete();

			$this->Event->Delete();

			$this->Finance->Delete();

			$this->Branch->Delete();

			$this->Log->Delete();

			$this->Report->Delete();

			$this->Messaging->Delete();

			$this->Webfront->Delete();

			$this->Webconfig->Delete();

			$this->Settings->Delete();
			*/
		}

		public static function Search($term='', Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM role WHERE name LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Role($subscriber);
				$ret[$i]->Id = $row['roleid'];
				$ret[$i]->Created = new WixDate(Convert::ToInt($row['created']));
				$ret[$i]->Booking = new Access(Convert::ToInt($row['booking']));
				$ret[$i]->Discount = new Access(Convert::ToInt($row['discount']));
				$ret[$i]->Customers = new Access(Convert::ToInt($row['customers']));
				$ret[$i]->Staff = new Access(Convert::ToInt($row['staff']));
				$ret[$i]->Rooms = new Access(Convert::ToInt($row['rooms']));
				$ret[$i]->Kitchen = new Access(Convert::ToInt($row['kitchen']));
				$ret[$i]->Bakery = new Access(Convert::ToInt($row['bakery']));
				$ret[$i]->Bar = new Access(Convert::ToInt($row['bar']));
				$ret[$i]->Laundry = new Access(Convert::ToInt($row['laundry']));
				$ret[$i]->Housekeeping = new Access(Convert::ToInt($row['housekeeping']));
				$ret[$i]->Pool = new Access(Convert::ToInt($row['pool']));
				$ret[$i]->Store = new Access(Convert::ToInt($row['store']));
				$ret[$i]->Event = new Access(Convert::ToInt($row['event']));
				$ret[$i]->Finance = new Access(Convert::ToInt($row['finance']));
				$ret[$i]->Branch = new Access(Convert::ToInt($row['branch']));
				$ret[$i]->Log = new Access(Convert::ToInt($row['log']));
				$ret[$i]->Report = new Access(Convert::ToInt($row['report']));
				$ret[$i]->Messaging = new Access(Convert::ToInt($row['messaging']));
				$ret[$i]->Webfront = new Access(Convert::ToInt($row['webfront']));
				$ret[$i]->Webconfig = new Access(Convert::ToInt($row['webconfig']));
				$ret[$i]->Settings = new Access(Convert::ToInt($row['settings']));
				$ret[$i]->Name = $row['name'];

				//System access and variables
				$ret[$i]->System = Convert::ToBool($row['system']);

                $ret[$i]->Frontdesk = new Access(Convert::ToInt($row['frontdesk']));
                $ret[$i]->Kitchenpos = new Access(Convert::ToInt($row['kitchenpos']));
                $ret[$i]->Laundrypos = new Access(Convert::ToInt($row['laundrypos']));
                $ret[$i]->Bakerypos = new Access(Convert::ToInt($row['bakerypos']));
                $ret[$i]->Poolpos = new Access(Convert::ToInt($row['poolpos']));
                $ret[$i]->Barpos = new Access(Convert::ToInt($row['barpos']));

				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='roleid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT roleid FROM role WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['roleid'];
				$i++;
			}
			return Role::GroupInitialize($ret);
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT roleid FROM role ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['roleid'];
				$i++;
			}
			return Role::GroupInitialize($ret);
		}

		public static function GroupInitialize(Subscriber $subscriber, $array=null, $orderBy='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$query = "";

			if(is_array($array) === true)
			{
				if(count($array) == 0)
				{
					return $ret;
				}
				else
				{
					for($i = 0; $i < count($array); $i++)
					{
						if($query == "")
						{
							$query = " WHERE Roleid='".$array[$i]."'";
						}
						else
						{
							$query .= " OR Roleid ='".$array[$i]."'";
						}
					}
				}
			}
			$i = 0;
			$res = $db->query("SELECT * FROM role".$query." ORDER BY ".$orderBy." ".$order);
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Role($subscriber);
				$ret[$i]->Id = $row['roleid'];
				$ret[$i]->Created = new WixDate(Convert::ToInt($row['created']));
				$ret[$i]->Booking = new Access(Convert::ToInt($row['booking']));
				$ret[$i]->Discount = new Access(Convert::ToInt($row['discount']));
				$ret[$i]->Customers = new Access(Convert::ToInt($row['customers']));
				$ret[$i]->Staff = new Access(Convert::ToInt($row['staff']));
				$ret[$i]->Rooms = new Access(Convert::ToInt($row['rooms']));
				$ret[$i]->Kitchen = new Access(Convert::ToInt($row['kitchen']));
				$ret[$i]->Bakery = new Access(Convert::ToInt($row['bakery']));
				$ret[$i]->Bar = new Access(Convert::ToInt($row['bar']));
				$ret[$i]->Laundry = new Access(Convert::ToInt($row['laundry']));
				$ret[$i]->Housekeeping = new Access(Convert::ToInt($row['housekeeping']));
				$ret[$i]->Pool = new Access(Convert::ToInt($row['pool']));
				$ret[$i]->Store = new Access(Convert::ToInt($row['store']));
				$ret[$i]->Event = new Access(Convert::ToInt($row['event']));
				$ret[$i]->Finance = new Access(Convert::ToInt($row['finance']));
				$ret[$i]->Branch = new Access(Convert::ToInt($row['branch']));
				$ret[$i]->Log = new Access(Convert::ToInt($row['log']));
				$ret[$i]->Report = new Access(Convert::ToInt($row['report']));
				$ret[$i]->Messaging = new Access(Convert::ToInt($row['messaging']));
				$ret[$i]->Webfront = new Access(Convert::ToInt($row['webfront']));
				$ret[$i]->Webconfig = new Access(Convert::ToInt($row['webconfig']));
				$ret[$i]->Settings = new Access(Convert::ToInt($row['settings']));
				$ret[$i]->Name = $row['name'];

                //System access and variables
                $ret[$i]->System = Convert::ToBool($row['system']);

                $ret[$i]->Frontdesk = new Access(Convert::ToInt($row['frontdesk']));
                $ret[$i]->Kitchenpos = new Access(Convert::ToInt($row['kitchenpos']));
                $ret[$i]->Laundrypos = new Access(Convert::ToInt($row['laundrypos']));
                $ret[$i]->Bakerypos = new Access(Convert::ToInt($row['bakerypos']));
                $ret[$i]->Poolpos = new Access(Convert::ToInt($row['poolpos']));
                $ret[$i]->Barpos = new Access(Convert::ToInt($row['barpos']));

                $i++;
			}
			return $ret;
		}
	}
