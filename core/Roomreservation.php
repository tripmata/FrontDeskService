<?php
	/* Generated by Wixnit Class Builder 
	// Feb, 25/2020
	// Building class for Roomreservation
	*/

	class Roomreservation
	{
		public $Id = "";
		public $Created = 0;
		public $Customer = "";
		public $Checkin = 0;
		public $Checkout = 0;
		public $Guestcount = 0;
		public $Paid = false;
		public $Invoice = "";
		public $Roomcategory = "";
		public $Price = 0;
		public $Tax = 0;
		public $Period = "";

		private $subscriber = null;

		function __construct(Subscriber $subscriber)
		{
			$this->subscriber = $subscriber;
		}

		public function Initialize($arg=null)
        {
            if($arg != null)
            {
                $db = $this->subscriber->GetDB();

                $res = $db->query("SELECT * FROM roomreservation WHERE roomreservationid='$arg'");

                if($res->num_rows > 0)
                {
                    $row = $res->fetch_assoc();

                    $this->Id = $row['roomreservationid'];
                    $this->Created = new WixDate($row['created']);
                    $this->Customer = new Customer($this->subscriber);
                    $this->Customer->Initialize($row['customer']);
                    $this->Checkin = new WixDate($row['checkin']);
                    $this->Checkout = new WixDate($row['checkout']);
                    $this->Guestcount = $row['guestcount'];
                    $this->Paid = Convert::ToBool($row['paid']);
                    $this->Invoice = new Invoice($this->subscriber);
                    $this->Invoice->Initialize($row['invoice']);
                    $this->Roomcategory = new Roomcategory($this->subscriber);
                    $this->Roomcategory->Initialize($row['roomcategory']);
                    $this->Price = $row['price'];
                    $this->Tax = $row['tax'];
                    $this->Period = $row['period'];
                }
            }
        }

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$customer = addslashes(is_a($this->Customer, "Customer") ? $this->Customer->Id : $this->Customer);
			$checkin = Convert::ToInt($this->Checkin);
			$checkout = Convert::ToInt($this->Checkout);
			$guestcount = Convert::ToInt($this->Guestcount);
			$paid = Convert::ToInt($this->Paid);
			$invoice = addslashes(is_a($this->Invoice, "Invoice") ? $this->Invoice->Id : $this->Invoice);
			$roomcategory = addslashes(is_a($this->Roomcategory, "Roomcategory") ? $this->Roomcategory->Id : $this->Roomcategory);
			$price = floatval($this->Price);
			$tax = floatval($this->Tax);
			$period = addslashes($this->Period);

			if($res = $db->query("SELECT roomreservationid FROM roomreservation WHERE roomreservationid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE roomreservation SET customer='$customer',checkin='$checkin',checkout='$checkout',guestcount='$guestcount',paid='$paid',invoice='$invoice',roomcategory='$roomcategory',price='$price',tax='$tax',period='$period' WHERE roomreservationid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT roomreservationid FROM roomreservation WHERE roomreservationid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO roomreservation(roomreservationid,created,customer,checkin,checkout,guestcount,paid,invoice,roomcategory,price,tax,period) VALUES ('$id','$created','$customer','$checkin','$checkout','$guestcount','$paid','$invoice','$roomcategory','$price','$tax','$period')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM roomreservation WHERE roomreservationid='$id'");

			//Deleting Associated Objects
			/*n			$this->Customer->Delete();

			$this->Invoice->Delete();
			*/
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM roomreservation WHERE customer LIKE '%$term%' OR checkin LIKE '%$term%' OR checkout LIKE '%$term%' OR guestcount LIKE '%$term%' OR paid LIKE '%$term%' OR invoice LIKE '%$term%' OR roomcategory LIKE '%$term%' OR price LIKE '%$term%' OR tax LIKE '%$term%' OR period LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Roomreservation($subscriber);
                $ret[$i]->Id = $row['roomreservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkin = new WixDate($row['checkin']);
                $ret[$i]->Checkout = new WixDate($row['checkout']);
                $ret[$i]->Guestcount = $row['guestcount'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Invoice = $row['invoice'];
                $ret[$i]->Roomcategory = $row['roomcategory'];
                $ret[$i]->Price = $row['price'];
                $ret[$i]->Tax = $row['tax'];
                $ret[$i]->Period = $row['period'];
				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='roomreservationid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM roomreservation WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Roomreservation($subscriber);
                $ret[$i]->Id = $row['roomreservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkin = new WixDate($row['checkin']);
                $ret[$i]->Checkout = new WixDate($row['checkout']);
                $ret[$i]->Guestcount = $row['guestcount'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Invoice = $row['invoice'];
                $ret[$i]->Roomcategory = $row['roomcategory'];
                $ret[$i]->Price = $row['price'];
                $ret[$i]->Tax = $row['tax'];
                $ret[$i]->Period = $row['period'];
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM roomreservation ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
                $ret[$i] = new Roomreservation($subscriber);
                $ret[$i]->Id = $row['roomreservationid'];
                $ret[$i]->Created = new WixDate($row['created']);
                $ret[$i]->Customer = $row['customer'];
                $ret[$i]->Checkin = new WixDate($row['checkin']);
                $ret[$i]->Checkout = new WixDate($row['checkout']);
                $ret[$i]->Guestcount = $row['guestcount'];
                $ret[$i]->Paid = Convert::ToBool($row['paid']);
                $ret[$i]->Invoice = $row['invoice'];
                $ret[$i]->Roomcategory = $row['roomcategory'];
                $ret[$i]->Price = $row['price'];
                $ret[$i]->Tax = $row['tax'];
                $ret[$i]->Period = $row['period'];
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM roomreservation");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Roomreservation($subscriber);
				$ret[$i]->Id = $row['roomreservationid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Customer = $row['customer'];
				$ret[$i]->Checkin = new WixDate($row['checkin']);
				$ret[$i]->Checkout = new WixDate($row['checkout']);
				$ret[$i]->Guestcount = $row['guestcount'];
				$ret[$i]->Paid = Convert::ToBool($row['paid']);
				$ret[$i]->Invoice = $row['invoice'];
				$ret[$i]->Roomcategory = $row['roomcategory'];
				$ret[$i]->Price = $row['price'];
				$ret[$i]->Tax = $row['tax'];
				$ret[$i]->Period = $row['period'];
				$i++;
			}
			return $ret;
		}

		public function GetCustomer()
		{
			return $this->Customer;
		}

		public function SetCustomer($customer)
		{

			//Presuming Object has a Save Method
			/*
			if(is_a($customer, "Customer"))
			{
				$customer->Save();
			}
			*/
			$this->Customer = is_a($customer, "Customer") ? $customer->Id : $customer;
		}
	}
