<?php
	/* Generated by Wixnit Class Builder 
	// Jan, 17/2020
	// Building class for Seo
	*/

	class Seo
	{
		public $Created = 0;
		public $Homekeywords = array();
		public $Lodgingkeywords = array();
		public $Restaurantkeywords = array();
		public $Barkeywords = array();
		public $Pastrykeywords = array();
		public $Homedescription = "";
		public $Lodgingdescription = "";
		public $Restaurantdescription = "";
		public $Bardescription = "";
		public $Pastrydescription = "";
		public $Autoseo = false;

		private $subscriber = null;

		const Homepage = "home";
		const Restaurant = "restaurant";
		const Aboutus = "aboutus";
		const Contactus = "contactus";
		const Useraccount = "useraccount";
		const Faq = "faq";
		const Bar = "bar";
		const Pastry = "pastry";
		const Laundry = "laundry";
		const Lodging = "lodging";
		const Room = "room";
		const Privacy = "privacy";
		const TandC = "tandc";

		function __construct(Subscriber $subscriber)
		{
		    $this->subscriber = $subscriber;

			$db = $this->subscriber->GetDB();

			$res = $db->query("SELECT * FROM seo");

			if($res->num_rows > 0)
			{
				$row = $res->fetch_assoc();
			
				$this->Created = new WixDate($row['created']);
				$this->Homekeywords = json_decode($row['homekeywords']);
				$this->Lodgingkeywords = json_decode($row['lodgingkeywords']);
				$this->Restaurantkeywords = json_decode($row['restaurantkeywords']);
				$this->Barkeywords = json_decode($row['barkeywords']);
				$this->Pastrykeywords = json_decode($row['pastrykeywords']);
				$this->Homedescription = $row['homedescription'];
				$this->Lodgingdescription = $row['lodgingdescription'];
				$this->Restaurantdescription = $row['restaurantdescription'];
				$this->Bardescription = $row['bardescription'];
				$this->Pastrydescription = $row['pastrydescription'];
				$this->Autoseo = Convert::ToBool($row['autoseo']);
			}
			else
			{
				$this->Save();
			}
		}

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$created = time();
			$homekeywords = addslashes(json_encode($this->Homekeywords));
			$lodgingkeywords = addslashes(json_encode($this->Lodgingkeywords));
			$restaurantkeywords = addslashes(json_encode($this->Restaurantkeywords));
			$barkeywords = addslashes(json_encode($this->Barkeywords));
			$pastrykeywords = addslashes(json_encode($this->Pastrykeywords));
			$homedescription = addslashes($this->Homedescription);
			$lodgingdescription = addslashes($this->Lodgingdescription);
			$restaurantdescription = addslashes($this->Restaurantdescription);
			$bardescription = addslashes($this->Bardescription);
			$pastrydescription = addslashes($this->Pastrydescription);
			$autoseo = Convert::ToInt($this->Autoseo);

			if($res = $db->query("SELECT * FROM seo")->num_rows > 0)
			{
				$db->query("UPDATE seo SET homekeywords='$homekeywords',lodgingkeywords='$lodgingkeywords',restaurantkeywords='$restaurantkeywords',barkeywords='$barkeywords',pastrykeywords='$pastrykeywords',homedescription='$homedescription',lodgingdescription='$lodgingdescription',restaurantdescription='$restaurantdescription',bardescription='$bardescription',pastrydescription='$pastrydescription',autoseo='$autoseo'");
			}
			else
			{
				$db->query("INSERT INTO seo(created,homekeywords,lodgingkeywords,restaurantkeywords,barkeywords,pastrykeywords,homedescription,lodgingdescription,restaurantdescription,bardescription,pastrydescription,autoseo) VALUES ('$created','$homekeywords','$lodgingkeywords','$restaurantkeywords','$barkeywords','$pastrykeywords','$homedescription','$lodgingdescription','$restaurantdescription','$bardescription','$pastrydescription','$autoseo')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$db->query("DELETE FROM seo");
		}

		public static function BuildTitle(Subscriber $subscriber, $default, $page, $item=null)
        {
            $seo = new Seo($subscriber);

            $ret = "";

            if($seo->Autoseo)
            {
                $ret = $default;

                if($page == Seo::Homepage)
                {
                    if(strpos(strtolower($subscriber->BusinessName), 'hotel') != false)
                    {
                        $ret = $subscriber->BusinessName." ".$subscriber->City." : : Home";
                    }
                    else
                    {
                        $ret = $subscriber->BusinessName." hotel ".$subscriber->City." : : Home";
                    }
                }
                if($page == Seo::Room)
                {
                    if(strpos(strtolower($subscriber->BusinessName), 'hotel') != false)
                    {
                        $ret = $subscriber->BusinessName." ".$subscriber->City." : : Home";
                    }
                    else
                    {
                        $ret = $subscriber->BusinessName." hotel ".$subscriber->City." : : Home";
                    }
                }
                return ucwords(strtolower($ret));
            }
            else
            {
                return $default;
            }
        }

        public static function MetaKeywords(Subscriber $subscriber, $default, $page, $item=null)
        {
            $seo = new Seo($subscriber);

            $ret = "";

            if($seo->Autoseo)
            {
                if(is_array($default))
                {
                    for($i = 0; $i < count($default); $i++)
                    {
                        if($default[$i] != "")
                        {
                            $ret .= (($ret == "") ? $default[$i] : ",".$default[$i]);
                        }
                    }
                }
            }
            else
            {
                if(is_array($default))
                {
                    for($i = 0; $i < count($default); $i++)
                    {
                        if($default[$i] != "")
                        {
                            $ret .= (($ret == "") ? $default[$i] : ",".$default[$i]);
                        }
                    }
                }
            }

            return $ret;
        }

        public static function Metadescription(Subscriber $subscriber, $default, $page, $item=null)
        {
            $seo = new Seo($subscriber);

            if($seo->Autoseo)
            {
                return $default;
            }
            else
            {
                return $default;
            }
        }

        public static function ImageAlt(Subscriber $subscriber, $default, $page, $item=null)
        {
            $seo = new Seo($subscriber);

            if($seo->Autoseo)
            {
                return $default;
            }
            else
            {
                return $default;
            }
        }
	}
