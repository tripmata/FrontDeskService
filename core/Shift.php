<?php
	/* Generated by Wixnit Class Builder 
	// Aug, 20/2019
	// Building class for Shift
	*/

	class Shift
	{
		public $Id = "";
		public $Created = 0;
		public $Monday = false;
		public $Tuesday = false;
		public $Wednesday = false;
		public $Thursday = false;
		public $Friday = false;
		public $Saturday = false;
		public $Sunday = false;
		public $Starthour = 0;
		public $Stophour = 0;
		public $Startminuite = 0;
		public $Stopminuite = 0;
		public $Startgmt = "";
		public $Stopgmt = "";
		public $Name = "";

		private $subscriber = null;
		
		function __construct(Subscriber $sub)
		{
			$this->subscriber = $sub;
		}
		
		public function Initialize($arg=null)
		{
			if($arg != null)
			{
				$db = $this->subscriber->GetDB();

				$res = $db->query("SELECT * FROM shift WHERE shiftid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();
				
					$this->Id = $row['shiftid'];
					$this->Created = new WixDate($row['created']);
					$this->Monday = Convert::ToBool($row['monday']);
					$this->Tuesday = Convert::ToBool($row['tuesday']);
					$this->Wednesday = Convert::ToBool($row['wednesday']);
					$this->Thursday = Convert::ToBool($row['thursday']);
					$this->Friday = Convert::ToBool($row['friday']);
					$this->Saturday = Convert::ToBool($row['saturday']);
					$this->Sunday = Convert::ToBool($row['sunday']);
					$this->Starthour = $row['starthour'];
					$this->Stophour = $row['stophour'];
					$this->Startminuite = $row['startminuite'];
					$this->Stopminuite = $row['stopminuite'];
					$this->Startgmt = $row['startgmt'];
					$this->Stopgmt = $row['stopgmt'];
					$this->Name = $row['name'];
				}
			}
		}

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$monday = Convert::ToInt($this->Monday);
			$tuesday = Convert::ToInt($this->Tuesday);
			$wednesday = Convert::ToInt($this->Wednesday);
			$thursday = Convert::ToInt($this->Thursday);
			$friday = Convert::ToInt($this->Friday);
			$saturday = Convert::ToInt($this->Saturday);
			$sunday = Convert::ToInt($this->Sunday);
			$starthour = Convert::ToInt($this->Starthour);
			$stophour = Convert::ToInt($this->Stophour);
			$startminuite = Convert::ToInt($this->Startminuite);
			$stopminuite = Convert::ToInt($this->Stopminuite);
			$startgmt = addslashes($this->Startgmt);
			$stopgmt = addslashes($this->Stopgmt);
			$name = addslashes($this->Name);

			if($res = $db->query("SELECT shiftid FROM shift WHERE shiftid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE shift SET monday='$monday',tuesday='$tuesday',wednesday='$wednesday',thursday='$thursday',friday='$friday',saturday='$saturday',sunday='$sunday',starthour='$starthour',stophour='$stophour',startminuite='$startminuite',stopminuite='$stopminuite',startgmt='$startgmt',stopgmt='$stopgmt',name='$name' WHERE shiftid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT shiftid FROM shift WHERE shiftid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO shift(shiftid,created,monday,tuesday,wednesday,thursday,friday,saturday,sunday,starthour,stophour,startminuite,stopminuite,startgmt,stopgmt,name) VALUES ('$id','$created','$monday','$tuesday','$wednesday','$thursday','$friday','$saturday','$sunday','$starthour','$stophour','$startminuite','$stopminuite','$startgmt','$stopgmt','$name')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM shift WHERE shiftid='$id'");
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT shiftid FROM shift WHERE monday LIKE '%$term%' OR tuesday LIKE '%$term%' OR wednesday LIKE '%$term%' OR thursday LIKE '%$term%' OR friday LIKE '%$term%' OR saturday LIKE '%$term%' OR sunday LIKE '%$term%' OR starthour LIKE '%$term%' OR stophour LIKE '%$term%' OR startminuite LIKE '%$term%' OR stopminuite LIKE '%$term%' OR startgmt LIKE '%$term%' OR stopgmt LIKE '%$term%' OR name LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['shiftid'];
				$i++;
			}
			return Shift::GroupInitialize($ret);
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='shiftid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT shiftid FROM shift WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['shiftid'];
				$i++;
			}
			return Shift::GroupInitialize($ret);
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT shiftid FROM shift ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = $row['shiftid'];
				$i++;
			}
			return Shift::GroupInitialize($ret);
		}

		public static function GroupInitialize(Subscriber $subscriber, $array=null, $orderBy='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$query = "";

			if(is_array($array) === true)
			{
				if(count($array) == 0)
				{
					return $ret;
				}
				else
				{
					for($i = 0; $i < count($array); $i++)
					{
						if($query == "")
						{
							$query = " WHERE Shiftid='".$array[$i]."'";
						}
						else
						{
							$query .= " OR Shiftid ='".$array[$i]."'";
						}
					}
				}
			}
			$i = 0;
			$res = $db->query("SELECT * FROM shift".$query." ORDER BY ".$orderBy." ".$order);
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Shift();
				$ret[$i]->Id = $row['shiftid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Monday = Convert::ToBool($row['monday']);
				$ret[$i]->Tuesday = Convert::ToBool($row['tuesday']);
				$ret[$i]->Wednesday = Convert::ToBool($row['wednesday']);
				$ret[$i]->Thursday = Convert::ToBool($row['thursday']);
				$ret[$i]->Friday = Convert::ToBool($row['friday']);
				$ret[$i]->Saturday = Convert::ToBool($row['saturday']);
				$ret[$i]->Sunday = Convert::ToBool($row['sunday']);
				$ret[$i]->Starthour = $row['starthour'];
				$ret[$i]->Stophour = $row['stophour'];
				$ret[$i]->Startminuite = $row['startminuite'];
				$ret[$i]->Stopminuite = $row['stopminuite'];
				$ret[$i]->Startgmt = $row['startgmt'];
				$ret[$i]->Stopgmt = $row['stopgmt'];
				$ret[$i]->Name = $row['name'];
				$i++;
			}
			return $ret;
		}
		
		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			
			$ret = array();
			$i = 0;
			
			$res = $db->query("SELECT * FROM shift");
			
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Shift($subscriber);
				$ret[$i]->Id = $row['shiftid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Monday = Convert::ToBool($row['monday']);
				$ret[$i]->Tuesday = Convert::ToBool($row['tuesday']);
				$ret[$i]->Wednesday = Convert::ToBool($row['wednesday']);
				$ret[$i]->Thursday = Convert::ToBool($row['thursday']);
				$ret[$i]->Friday = Convert::ToBool($row['friday']);
				$ret[$i]->Saturday = Convert::ToBool($row['saturday']);
				$ret[$i]->Sunday = Convert::ToBool($row['sunday']);
				$ret[$i]->Starthour = Convert::ToInt($row['starthour']);
				$ret[$i]->Stophour = Convert::ToInt($row['stophour']);
				$ret[$i]->Startminuite = Convert::ToInt($row['startminuite']);
				$ret[$i]->Stopminuite = Convert::ToInt($row['stopminuite']);
				$ret[$i]->Startgmt = $row['startgmt'];
				$ret[$i]->Stopgmt = $row['stopgmt'];
				$ret[$i]->Name = $row['name'];
				$i++;
			}
			
			return $ret;
		}
		
		public function PerioToString()
		{
			$ret = "";
			if($this->Starthour < 10)
			{
				$ret = "0".$this->Starthour.":";
			}
			else
			{
				$ret = $this->Starthour.":";
			}
			if($this->Startminuite < 10)
			{
				$ret .= "0".$this->Startminuite.$this->Startgmt." - ";
			}
			else
			{
				$ret .= $this->Startminuite.$this->Startgmt." - ";
			}
			if($this->Stophour < 10)
			{
				$ret .= "0".$this->Stophour.":";
			}
			else
			{
				$ret .= $this->Stophour.":";
			}
			if($this->Stopminuite < 10)
			{
				$ret .= "0".$this->Stopminuite.$this->Stopgmt;
			}
			else
			{
				$ret .= $this->Stopminuite.$this->Stopgmt;
			}
			return $ret;
		}
		
		
		public function Hours()
		{
			$ret = new stdClass();
			$ret->Hours = 0;
			$ret->Minuites = 0;
			
			$starthour = $this->Starthour == 12 ? 0 : $this->Starthour;
			$stophour = $this->Stophour == 12 ? 0 : $this->Stophour;
			
			$startmins = $this->Startgmt == "am" ? (($starthour * 60) + $this->Startminuite) : ((($starthour + 12) * 60) + $this->Startminuite);
			$stopmins = $this->Stopgmt == "am" ? (($stophour * 60) + $this->Stopminuite) : ((($stophour + 12) * 60) + $this->Stopminuite);
			
			if($stopmins >= $startmins)
			{
				$ret->Hours = Convert::ToInt(explode(".", (($stopmins - $startmins) / 60))[0]);
				$ret->Minuites = Convert::ToInt(($stopmins - $startmins) % 60);
			}
			else
			{
				$ret->Hours = Convert::ToInt(explode(".", (((24 * 60) - ($startmins - $stopmins)) / 60))[0]) ;
				$ret->Minuites = Convert::ToInt(((24 * 60) - ($startmins - $stopmins)) % 60);
			}
			
			//$ret->Hours = $startmins;
			//$ret->Minuites = $stopmins;
			
			return $ret;
		}
	}
