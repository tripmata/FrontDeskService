<?php
	/* Generated by Wixnit Class Builder
	// Aug, 21/2019
	// Building class for Staff
	*/

	class Staff
	{
		public $Id = "";
		public $Created = 0;
		public $Name = "";
		public $Surname = "";
		public $Phone = "";
		public $Email = "";
		public $Nationality = "";
		public $State = "";
		public $Address = "";
		public $Sex = "";
		public $Dateofbirth = 0;
		public $Department = "";
		public $Shift = array();
		public $Position = "";
		public $Bank = "";
		public $Accountname = "";
		public $Accountnumber = "";
		public $Passport = "";
		public $Fullshot = "";
		public $Biodata = "";
		public $Salary = 0;
		public $Status = false;
		public $Suspended = false;

		public $Type = "staff";

		private $subscriber = null;

		function __construct(Subscriber $sub)
		{
			$this->subscriber = $sub;
		}


		public function Initialize($arg=null)
		{
			if($arg != null)
			{
				$db = $this->subscriber->GetDB();

				$res = $db->query("SELECT * FROM staff WHERE staffid='$arg'");

				if($res->num_rows > 0)
				{
					$row = $res->fetch_assoc();

					$this->Id = $row['staffid'];
					$this->Created = new WixDate($row['created']);
					$this->Name = $row['name'];
					$this->Surname = $row['surname'];
					$this->Phone = $row['phone'];
					$this->Email = $row['email'];
					$this->Nationality = Country::ByCode($row['nationality']);
					$this->State = $row['state'];
					$this->Address = $row['address'];
					$this->Sex = $row['sex'];
					$this->Dateofbirth = new WixDate($row['dateofbirth']);
					$this->Department = new department($this->subscriber);
					$this->Department->Initialize($row['department']);
					$this->Shift = array();
					$this->Position = $row['position'];
					$this->Bank = $row['bank'];
					$this->Accountname = $row['accountname'];
					$this->Accountnumber = $row['accountnumber'];
					$this->Passport = $row['passport'];
					$this->Fullshot = $row['fullshot'];
					$this->Biodata = $row['biodata'];
					$this->Salary = $row['salary'];
					$this->Status = Convert::ToBool($row['status']);
					$this->Suspended = Convert::ToBool($row['suspended']);

					$shifts = json_decode($row['shift']);

					for($i = 0; $i < count($shifts); $i++)
					{
						$this->Shift[$i] = new Shift($this->subscriber);
						$this->Shift[$i]->Initialize($shifts[$i]);
					}
					$i++;
				}
			}
		}

		public function Save()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$created = time();
			$name = addslashes($this->Name);
			$surname = addslashes($this->Surname);
			$phone = addslashes($this->Phone);
			$email = addslashes($this->Email);
			$nationality = addslashes($this->Nationality);
			$state = addslashes($this->State);
			$address = addslashes($this->Address);
			$sex = addslashes($this->Sex);
			$dateofbirth = Convert::ToInt(is_a($this->Dateofbirth, "WixDate") ? $this->Dateofbirth->getValue() : $this->Dateofbirth);
			$department = addslashes(is_a($this->Department, "department") ? $this->Department->Id : $this->Department);
			$shift = addslashes(json_encode(is_a($this->Shift, "shift") ? $this->Shift->GetArray() : $this->Shift));
			$position = addslashes($this->Position);
			$bank = addslashes($this->Bank);
			$accountname = addslashes($this->Accountname);
			$accountnumber = addslashes($this->Accountnumber);
			$passport = addslashes($this->Passport);
			$fullshot = addslashes($this->Fullshot);
			$biodata = addslashes($this->Biodata);
			$salary = floatval($this->Salary);
			$status = Convert::ToInt($this->Status);
			$suspended = Convert::ToInt($this->Suspended);

			if($res = $db->query("SELECT staffid FROM staff WHERE staffid='$id'")->num_rows > 0)
			{
				$db->query("UPDATE staff SET name='$name',surname='$surname',phone='$phone',email='$email',nationality='$nationality',state='$state',address='$address',sex='$sex',dateofbirth='$dateofbirth',department='$department',shift='$shift',position='$position',bank='$bank',accountname='$accountname',accountnumber='$accountnumber',passport='$passport',fullshot='$fullshot',biodata='$biodata',salary='$salary',status='$status',suspended='$suspended' WHERE staffid = '$id'");
			}
			else
			{
				redo: ;
				$id = Random::GenerateId(16);
				if($db->query("SELECT staffid FROM staff WHERE staffid='$id'")->num_rows > 0)
				{
					goto redo;
				}
				$this->Id = $id;
				$db->query("INSERT INTO staff(staffid,created,name,surname,phone,email,nationality,state,address,sex,dateofbirth,department,shift,position,bank,accountname,accountnumber,passport,fullshot,biodata,salary,status,suspended) VALUES ('$id','$created','$name','$surname','$phone','$email','$nationality','$state','$address','$sex','$dateofbirth','$department','$shift','$position','$bank','$accountname','$accountnumber','$passport','$fullshot','$biodata','$salary','$status','$suspended')");
			}
		}

		public function Delete()
		{
			$db = $this->subscriber->GetDB();

			$id = $this->Id;
			$db->query("DELETE FROM staff WHERE staffid='$id'");

            Contactcollection::Removefromalllist($this->subscriber, $this->Id, $this->Type);

			//Deleting Associated Objects
			/*n			$this->Department->Delete();

			$this->Shift->Delete();
			*/
		}

		public static function Search(Subscriber $subscriber, $term='')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM staff WHERE name LIKE '%$term%' OR surname LIKE '%$term%' OR phone LIKE '%$term%' OR email LIKE '%$term%' OR nationality LIKE '%$term%' OR state LIKE '%$term%' OR address LIKE '%$term%' OR sex LIKE '%$term%' OR dateofbirth LIKE '%$term%' OR department LIKE '%$term%' OR shift LIKE '%$term%' OR position LIKE '%$term%' OR bank LIKE '%$term%' OR accountname LIKE '%$term%' OR accountnumber LIKE '%$term%' OR passport LIKE '%$term%' OR fullshot LIKE '%$term%' OR biodata LIKE '%$term%' OR salary LIKE '%$term%' OR status LIKE '%$term%' OR suspended LIKE '%$term%'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Staff($subscriber);
				$ret[$i]->Id = $row['staffid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Name = $row['name'];
				$ret[$i]->Surname = $row['surname'];
				$ret[$i]->Phone = $row['phone'];
				$ret[$i]->Email = $row['email'];
				$ret[$i]->Nationality = Country::ByCode($row['nationality']);
				$ret[$i]->State = $row['state'];
				$ret[$i]->Address = $row['address'];
				$ret[$i]->Sex = $row['sex'];
				$ret[$i]->Dateofbirth = new WixDate($row['dateofbirth']);
				$ret[$i]->Department = new department($subscriber);
				$ret[$i]->Department->Initialize($row['department']);
				$ret[$i]->Shift = array();
				$ret[$i]->Position = $row['position'];
				$ret[$i]->Bank = $row['bank'];
				$ret[$i]->Accountname = $row['accountname'];
				$ret[$i]->Accountnumber = $row['accountnumber'];
				$ret[$i]->Passport = $row['passport'];
				$ret[$i]->Fullshot = $row['fullshot'];
				$ret[$i]->Biodata = $row['biodata'];
				$ret[$i]->Salary = $row['salary'];
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Suspended = Convert::ToBool($row['suspended']);

				$shifts = json_decode($row['shift']);

				for($j = 0; $j < count($shifts); $j++)
				{
					$ret[$i]->Shift[$j] = new Shift($subscriber);
					$ret[$i]->Shift[$j]->Initialize($shifts[$j]);
				}
				$i++;
			}
			return $ret;
		}

		public static function Filter(Subscriber $subscriber, $term='', $field='staffid')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM staff WHERE ".$field." ='$term'");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Staff($subscriber);
				$ret[$i]->Id = $row['staffid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Name = $row['name'];
				$ret[$i]->Surname = $row['surname'];
				$ret[$i]->Phone = $row['phone'];
				$ret[$i]->Email = $row['email'];
				$ret[$i]->Nationality = Country::ByCode($row['nationality']);
				$ret[$i]->State = $row['state'];
				$ret[$i]->Address = $row['address'];
				$ret[$i]->Sex = $row['sex'];
				$ret[$i]->Dateofbirth = new WixDate($row['dateofbirth']);
				$ret[$i]->Department = new department($subscriber);
				$ret[$i]->Department->Initialize($row['department']);
				$ret[$i]->Shift = array();
				$ret[$i]->Position = $row['position'];
				$ret[$i]->Bank = $row['bank'];
				$ret[$i]->Accountname = $row['accountname'];
				$ret[$i]->Accountnumber = $row['accountnumber'];
				$ret[$i]->Passport = $row['passport'];
				$ret[$i]->Fullshot = $row['fullshot'];
				$ret[$i]->Biodata = $row['biodata'];
				$ret[$i]->Salary = $row['salary'];
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Suspended = Convert::ToBool($row['suspended']);

				$shifts = json_decode($row['shift']);

				for($j = 0; $j < count($shifts); $j++)
				{
					$ret[$i]->Shift[$j] = new Shift($subscriber);
					$ret[$i]->Shift[$j]->Initialize($shifts[$j]);
				}
				$i++;
			}
			return $ret;
		}

		public static function Order(Subscriber $subscriber, $field='id', $order='DESC')
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM staff ORDER BY ".$field." ".$order."");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Staff($subscriber);
				$ret[$i]->Id = $row['staffid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Name = $row['name'];
				$ret[$i]->Surname = $row['surname'];
				$ret[$i]->Phone = $row['phone'];
				$ret[$i]->Email = $row['email'];
				$ret[$i]->Nationality = Country::ByCode($row['nationality']);
				$ret[$i]->State = $row['state'];
				$ret[$i]->Address = $row['address'];
				$ret[$i]->Sex = $row['sex'];
				$ret[$i]->Dateofbirth = new WixDate($row['dateofbirth']);
				$ret[$i]->Department = new department($subscriber);
				$ret[$i]->Department->Initialize($row['department']);
				$ret[$i]->Shift = array();
				$ret[$i]->Position = $row['position'];
				$ret[$i]->Bank = $row['bank'];
				$ret[$i]->Accountname = $row['accountname'];
				$ret[$i]->Accountnumber = $row['accountnumber'];
				$ret[$i]->Passport = $row['passport'];
				$ret[$i]->Fullshot = $row['fullshot'];
				$ret[$i]->Biodata = $row['biodata'];
				$ret[$i]->Salary = $row['salary'];
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Suspended = Convert::ToBool($row['suspended']);

				$shifts = json_decode($row['shift']);

				for($j = 0; $j < count($shifts); $j++)
				{
					$ret[$i]->Shift[$j] = new Shift($subscriber);
					$ret[$i]->Shift[$j]->Initialize($shifts[$j]);
				}
				$i++;
			}
			return $ret;
		}

		public static function All(Subscriber $subscriber)
		{
			$db = $subscriber->GetDB();
			$ret = array();
			$i = 0;

			$res = $db->query("SELECT * FROM staff");
			while(($row = $res->fetch_assoc()) != null)
			{
				$ret[$i] = new Staff($subscriber);
				$ret[$i]->Id = $row['staffid'];
				$ret[$i]->Created = new WixDate($row['created']);
				$ret[$i]->Name = $row['name'];
				$ret[$i]->Surname = $row['surname'];
				$ret[$i]->Phone = $row['phone'];
				$ret[$i]->Email = $row['email'];
				$ret[$i]->Nationality = Country::ByCode($row['nationality']);
				$ret[$i]->State = $row['state'];
				$ret[$i]->Address = $row['address'];
				$ret[$i]->Sex = $row['sex'];
				$ret[$i]->Dateofbirth = new WixDate($row['dateofbirth']);
				$ret[$i]->Department = new department($subscriber);
				$ret[$i]->Department->Initialize($row['department']);
				$ret[$i]->Shift = array();
				$ret[$i]->Position = $row['position'];
				$ret[$i]->Bank = $row['bank'];
				$ret[$i]->Accountname = $row['accountname'];
				$ret[$i]->Accountnumber = $row['accountnumber'];
				$ret[$i]->Passport = $row['passport'];
				$ret[$i]->Fullshot = $row['fullshot'];
				$ret[$i]->Biodata = $row['biodata'];
				$ret[$i]->Salary = $row['salary'];
				$ret[$i]->Status = Convert::ToBool($row['status']);
				$ret[$i]->Suspended = Convert::ToBool($row['suspended']);

				$shifts = json_decode($row['shift']);

				for($j = 0; $j < count($shifts); $j++)
				{
					$ret[$i]->Shift[$j] = new Shift($subscriber);
					$ret[$i]->Shift[$j]->Initialize($shifts[$j]);
				}
				$i++;
			}
			return $ret;
		}


		//Hand crafted methods

		public static function BiodataExist($data, Subscriber $sub)
		{
			$db = $sub->GetDB();
			return $db->query("SELECT biodata FROM staff WHERE biodata='$data'")->num_rows > 0;
		}


	}
